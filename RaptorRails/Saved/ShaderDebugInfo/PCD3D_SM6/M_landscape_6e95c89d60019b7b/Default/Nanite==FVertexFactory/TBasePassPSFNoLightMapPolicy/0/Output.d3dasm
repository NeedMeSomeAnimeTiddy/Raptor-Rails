;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy w
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                5   xyzw        5   TARGET   float   xyzw
;
; shader hash: 61a95925332aa54b6168ed4873a22c6c
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                5                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_Scene
; {
;
;   struct UniformBufferConstants_Scene
;   {
;
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint PrePadding_Scene_GPUScene_4;             ; Offset:    4
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint PrePadding_Scene_GPUScene_12;            ; Offset:   12
;       uint BindlessResource_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint PrePadding_Scene_GPUScene_20;            ; Offset:   20
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint PrePadding_Scene_GPUScene_28;            ; Offset:   28
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint PrePadding_Scene_GPUScene_36;            ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;   
;   } UniformBufferConstants_Scene;                   ; Offset:    0 Size:    56
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_ShadingMask;     ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_ShadingBinMeta;  ; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint BindlessResource_Nanite_ShadingBinData;  ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint Nanite_MultiViewEnabled;                 ; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  176
;       uint PrePadding_Nanite_180;                   ; Offset:  180
;       uint BindlessResource_Nanite_InViews;         ; Offset:  184
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   188
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       uint4 Material_VTPackedPageTableUniform[4];   ; Offset:    0
;       uint4 Material_VTPackedUniform[15];           ; Offset:   64
;       float4 Material_PreshaderBuffer[7];           ; Offset:  304
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  416
;       uint PrePadding_Material_420;                 ; Offset:  420
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  424
;       uint PrePadding_Material_428;                 ; Offset:  428
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  432
;       uint PrePadding_Material_436;                 ; Offset:  436
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  440
;       uint PrePadding_Material_444;                 ; Offset:  444
;       uint BindlessResource_Material_VirtualTexturePageTable0_0;; Offset:  448
;       uint PrePadding_Material_452;                 ; Offset:  452
;       uint BindlessResource_Material_VirtualTexturePageTable1_0;; Offset:  456
;       uint PrePadding_Material_460;                 ; Offset:  460
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_0;; Offset:  464
;       uint PrePadding_Material_468;                 ; Offset:  468
;       uint BindlessResource_Material_VirtualTexturePageTable0_1;; Offset:  472
;       uint PrePadding_Material_476;                 ; Offset:  476
;       uint BindlessResource_Material_VirtualTexturePageTable1_1;; Offset:  480
;       uint PrePadding_Material_484;                 ; Offset:  484
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_1;; Offset:  488
;       uint PrePadding_Material_492;                 ; Offset:  492
;       uint BindlessResource_Material_VirtualTexturePhysical_0;; Offset:  496
;       uint PrePadding_Material_500;                 ; Offset:  500
;       uint BindlessSampler_Material_VirtualTexturePhysical_0Sampler;; Offset:  504
;       uint PrePadding_Material_508;                 ; Offset:  508
;       uint BindlessResource_Material_VirtualTexturePhysical_1;; Offset:  512
;       uint PrePadding_Material_516;                 ; Offset:  516
;       uint BindlessSampler_Material_VirtualTexturePhysical_1Sampler;; Offset:  520
;       uint PrePadding_Material_524;                 ; Offset:  524
;       uint BindlessResource_Material_VirtualTexturePhysical_2;; Offset:  528
;       uint PrePadding_Material_532;                 ; Offset:  532
;       uint BindlessSampler_Material_VirtualTexturePhysical_2Sampler;; Offset:  536
;       uint PrePadding_Material_540;                 ; Offset:  540
;       uint BindlessResource_Material_VirtualTexturePhysical_3;; Offset:  544
;       uint PrePadding_Material_548;                 ; Offset:  548
;       uint BindlessSampler_Material_VirtualTexturePhysical_3Sampler;; Offset:  552
;       uint PrePadding_Material_556;                 ; Offset:  556
;       uint BindlessResource_Material_VirtualTexturePhysical_4;; Offset:  560
;       uint PrePadding_Material_564;                 ; Offset:  564
;       uint BindlessSampler_Material_VirtualTexturePhysical_4Sampler;; Offset:  568
;       uint PrePadding_Material_572;                 ; Offset:  572
;       uint BindlessResource_Material_VirtualTexturePhysical_5;; Offset:  576
;       uint PrePadding_Material_580;                 ; Offset:  580
;       uint BindlessSampler_Material_VirtualTexturePhysical_5Sampler;; Offset:  584
;       uint PrePadding_Material_588;                 ; Offset:  588
;       uint BindlessResource_Material_VirtualTexturePhysical_6;; Offset:  592
;       uint PrePadding_Material_596;                 ; Offset:  596
;       uint BindlessSampler_Material_VirtualTexturePhysical_6Sampler;; Offset:  600
;       uint PrePadding_Material_604;                 ; Offset:  604
;       uint BindlessResource_Material_VirtualTexturePhysical_7;; Offset:  608
;       uint PrePadding_Material_612;                 ; Offset:  612
;       uint BindlessSampler_Material_VirtualTexturePhysical_7Sampler;; Offset:  616
;       uint PrePadding_Material_620;                 ; Offset:  620
;       uint BindlessResource_Material_VirtualTexturePhysical_8;; Offset:  624
;       uint PrePadding_Material_628;                 ; Offset:  628
;       uint BindlessSampler_Material_VirtualTexturePhysical_8Sampler;; Offset:  632
;       uint PrePadding_Material_636;                 ; Offset:  636
;       uint BindlessResource_Material_VirtualTexturePhysical_9;; Offset:  640
;       uint PrePadding_Material_644;                 ; Offset:  644
;       uint BindlessSampler_Material_VirtualTexturePhysical_9Sampler;; Offset:  648
;       uint PrePadding_Material_652;                 ; Offset:  652
;       uint BindlessResource_Material_VirtualTexturePhysical_10;; Offset:  656
;       uint PrePadding_Material_660;                 ; Offset:  660
;       uint BindlessSampler_Material_VirtualTexturePhysical_10Sampler;; Offset:  664
;       uint PrePadding_Material_668;                 ; Offset:  668
;       uint BindlessResource_Material_VirtualTexturePhysical_11;; Offset:  672
;       uint PrePadding_Material_676;                 ; Offset:  676
;       uint BindlessSampler_Material_VirtualTexturePhysical_11Sampler;; Offset:  680
;       uint PrePadding_Material_684;                 ; Offset:  684
;       uint BindlessResource_Material_VirtualTexturePhysical_12;; Offset:  688
;       uint PrePadding_Material_692;                 ; Offset:  692
;       uint BindlessSampler_Material_VirtualTexturePhysical_12Sampler;; Offset:  696
;       uint PrePadding_Material_700;                 ; Offset:  700
;       uint BindlessResource_Material_VirtualTexturePhysical_13;; Offset:  704
;       uint PrePadding_Material_708;                 ; Offset:  708
;       uint BindlessSampler_Material_VirtualTexturePhysical_13Sampler;; Offset:  712
;       uint PrePadding_Material_716;                 ; Offset:  716
;       uint BindlessResource_Material_VirtualTexturePhysical_14;; Offset:  720
;       uint PrePadding_Material_724;                 ; Offset:  724
;       uint BindlessSampler_Material_VirtualTexturePhysical_14Sampler;; Offset:  728
;       uint PrePadding_Material_732;                 ; Offset:  732
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  736
;       uint PrePadding_Material_740;                 ; Offset:  740
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  744
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   748
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_VTFeedbackBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_Scene      cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_LandscapeWeightmapSampler    sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S2             s2     1
; Material_VirtualTexturePhysical_0Sampler   sampler      NA          NA      S3             s3     1
; Material_VirtualTexturePhysical_1Sampler   sampler      NA          NA      S4             s4     1
; Material_VirtualTexturePhysical_2Sampler   sampler      NA          NA      S5             s5     1
; Material_VirtualTexturePhysical_3Sampler   sampler      NA          NA      S6             s6     1
; Material_VirtualTexturePhysical_4Sampler   sampler      NA          NA      S7             s7     1
; Material_VirtualTexturePhysical_5Sampler   sampler      NA          NA      S8             s8     1
; Material_VirtualTexturePhysical_6Sampler   sampler      NA          NA      S9             s9     1
; Material_VirtualTexturePhysical_7Sampler   sampler      NA          NA     S10            s10     1
; Material_VirtualTexturePhysical_8Sampler   sampler      NA          NA     S11            s11     1
; Material_VirtualTexturePhysical_9Sampler   sampler      NA          NA     S12            s12     1
; Material_VirtualTexturePhysical_10Sampler   sampler      NA          NA     S13            s13     1
; Material_VirtualTexturePhysical_11Sampler   sampler      NA          NA     S14            s14     1
; Material_VirtualTexturePhysical_12Sampler   sampler      NA          NA     S15            s15     1
; Material_VirtualTexturePhysical_13Sampler   sampler      NA          NA     S16            s16     1
; Material_VirtualTexturePhysical_14Sampler   sampler      NA          NA     S17            s17     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T1             t1     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T2             t2     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T3             t3     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T4             t4     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T5             t5     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T6             t6     1
; Nanite_ClusterPageData            texture    byte         r/o      T7             t7     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o      T8             t8     1
; Nanite_VisBuffer64                texture     u32          2d      T9             t9     1
; Material_Texture2D_0              texture     f32          2d     T10            t10     1
; Material_Texture2D_1              texture     f32          2d     T11            t11     1
; Material_VirtualTexturePageTable0_0   texture     u32          2d     T12            t12     1
; Material_VirtualTexturePageTable1_0   texture     u32          2d     T13            t13     1
; Material_VirtualTexturePageTable0_1   texture     u32          2d     T14            t14     1
; Material_VirtualTexturePageTable1_1   texture     u32          2d     T15            t15     1
; Material_VirtualTexturePhysical_0   texture     f32          2d     T16            t16     1
; Material_VirtualTexturePhysical_1   texture     f32          2d     T17            t17     1
; Material_VirtualTexturePhysical_2   texture     f32          2d     T18            t18     1
; Material_VirtualTexturePhysical_3   texture     f32          2d     T19            t19     1
; Material_VirtualTexturePhysical_4   texture     f32          2d     T20            t20     1
; Material_VirtualTexturePhysical_5   texture     f32          2d     T21            t21     1
; Material_VirtualTexturePhysical_6   texture     f32          2d     T22            t22     1
; Material_VirtualTexturePhysical_7   texture     f32          2d     T23            t23     1
; Material_VirtualTexturePhysical_8   texture     f32          2d     T24            t24     1
; Material_VirtualTexturePhysical_9   texture     f32          2d     T25            t25     1
; Material_VirtualTexturePhysical_10   texture     f32          2d     T26            t26     1
; Material_VirtualTexturePhysical_11   texture     f32          2d     T27            t27     1
; Material_VirtualTexturePhysical_12   texture     f32          2d     T28            t28     1
; Material_VirtualTexturePhysical_13   texture     f32          2d     T29            t29     1
; Material_VirtualTexturePhysical_14   texture     f32          2d     T30            t30     1
; View_VTFeedbackBuffer                 UAV  struct         r/w      U0             u0     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 24
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 7 }
;   output 1 depends on inputs: { 4, 5, 7 }
;   output 2 depends on inputs: { 4, 5, 7 }
;   output 4 depends on inputs: { 4, 5, 7 }
;   output 5 depends on inputs: { 4, 5, 7 }
;   output 6 depends on inputs: { 4, 5, 7 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5, 7 }
;   output 12 depends on inputs: { 4, 5, 7 }
;   output 13 depends on inputs: { 4, 5, 7 }
;   output 14 depends on inputs: { 4, 5, 7 }
;   output 15 depends on inputs: { 4, 5 }
;   output 20 depends on inputs: { 4, 5, 7 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%"class.Texture2D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture2D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture2D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [4 x <4 x i32>], [15 x <4 x i32>], [7 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 30, i32 30, i32 0, i8 0 }, i32 30, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 29, i32 29, i32 0, i8 0 }, i32 29, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 28, i32 28, i32 0, i8 0 }, i32 28, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 27, i32 27, i32 0, i8 0 }, i32 27, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 3 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 3 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 3 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 3 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 3 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 3 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 3 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 3 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 3 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 3 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %49 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %50 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %51 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %52 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %53 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %54 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %55 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %51, %dx.types.ResourceProperties { i32 13, i32 748 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %56 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %53, %dx.types.ResourceProperties { i32 13, i32 56 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %54, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %58 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %59 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %60 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %61 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %56, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.i32 %61, 2
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 135)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 3
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = extractvalue %dx.types.CBufRet.f32 %97, 3
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %107 = fadd fast float %58, -5.000000e-01
  %108 = fadd fast float %59, -5.000000e-01
  %109 = fptoui float %107 to i32
  %110 = fptoui float %108 to i32
  %111 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %112 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %111, i32 0, i32 %109, i32 %110, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %113 = extractvalue %dx.types.ResRet.i32 %112, 0
  %114 = extractvalue %dx.types.ResRet.i32 %112, 1
  %115 = lshr i32 %113, 7
  %116 = bitcast i32 %114 to float
  %117 = icmp eq i32 %115, 0
  br i1 %117, label %1850, label %118

; <label>:118                                     ; preds = %0
  %119 = and i32 %113, 127
  %120 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %52, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %121 = shl nuw nsw i32 %115, 3
  %122 = add nsw i32 %121, -8
  %123 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %124 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %123, i32 %122, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %125 = extractvalue %dx.types.ResRet.i32 %124, 0
  %126 = extractvalue %dx.types.ResRet.i32 %124, 1
  %127 = lshr i32 %125, 16
  %128 = and i32 %126, 16777215
  %129 = lshr i32 %126, 24
  %130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %131 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %130, i32 %128, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %132 = extractvalue %dx.types.ResRet.f32 %131, 0
  %133 = bitcast float %132 to i32
  %134 = and i32 %133, 1048575
  %135 = mul nuw nsw i32 %134, 41
  %136 = add nuw nsw i32 %135, 1
  %137 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %138 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %137, i32 %136, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %139 = extractvalue %dx.types.ResRet.f32 %138, 0
  %140 = extractvalue %dx.types.ResRet.f32 %138, 1
  %141 = extractvalue %dx.types.ResRet.f32 %138, 2
  %142 = add i32 %128, %62
  %143 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %130, i32 %142, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %144 = extractvalue %dx.types.ResRet.f32 %143, 0
  %145 = extractvalue %dx.types.ResRet.f32 %143, 1
  %146 = extractvalue %dx.types.ResRet.f32 %143, 2
  %147 = extractvalue %dx.types.ResRet.f32 %143, 3
  %148 = bitcast float %144 to i32
  %149 = bitcast float %145 to i32
  %150 = bitcast float %146 to i32
  %151 = bitcast float %147 to i32
  %152 = shl i32 %62, 1
  %153 = add i32 %128, %152
  %154 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %130, i32 %153, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %155 = extractvalue %dx.types.ResRet.f32 %154, 0
  %156 = extractvalue %dx.types.ResRet.f32 %154, 1
  %157 = extractvalue %dx.types.ResRet.f32 %154, 2
  %158 = and i32 %148, 65535
  %159 = uitofp i32 %158 to float
  %160 = lshr i32 %148, 16
  %161 = uitofp i32 %160 to float
  %162 = and i32 %149, 32767
  %163 = uitofp i32 %162 to float
  %164 = fadd fast float %159, -3.276800e+04
  %165 = fadd fast float %161, -3.276800e+04
  %166 = fadd fast float %163, -1.638400e+04
  %167 = fmul fast float %166, 0x3F06A0F8E0000000
  %168 = and i32 %149, 32768
  %169 = icmp ne i32 %168, 0
  %170 = fadd fast float %164, %165
  %171 = fmul fast float %170, 0x3F00002000000000
  %172 = fsub fast float %164, %165
  %173 = fmul fast float %172, 0x3F00002000000000
  %174 = call float @dx.op.unary.f32(i32 6, float %171)  ; FAbs(value)
  %175 = call float @dx.op.unary.f32(i32 6, float %173)  ; FAbs(value)
  %176 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %174, float %175)  ; Dot2(ax,ay,bx,by)
  %177 = fsub fast float 2.000000e+00, %176
  %178 = call float @dx.op.dot3.f32(i32 55, float %171, float %173, float %177, float %171, float %173, float %177)  ; Dot3(ax,ay,az,bx,by,bz)
  %179 = call float @dx.op.unary.f32(i32 25, float %178)  ; Rsqrt(value)
  %180 = fmul fast float %179, %171
  %181 = fmul fast float %179, %173
  %182 = fmul fast float %179, %177
  %183 = fadd fast float %182, 1.000000e+00
  %184 = fdiv fast float 1.000000e+00, %183
  %185 = fmul fast float %181, %180
  %186 = fmul fast float %185, %184
  %187 = fsub fast float -0.000000e+00, %186
  %188 = fmul fast float %180, %180
  %189 = fmul fast float %188, %184
  %190 = fsub fast float 1.000000e+00, %189
  %191 = fmul fast float %181, %181
  %192 = fmul fast float %191, %184
  %193 = fsub fast float 1.000000e+00, %192
  %194 = fmul fast float %167, %167
  %195 = fsub fast float 1.000000e+00, %194
  %196 = call float @dx.op.unary.f32(i32 24, float %195)  ; Sqrt(value)
  %197 = select i1 %169, float %167, float %196
  %198 = select i1 %169, float %196, float %167
  %199 = fmul fast float %190, %197
  %200 = fmul fast float %197, %187
  %201 = fmul fast float %197, %180
  %202 = fmul fast float %198, %187
  %203 = fmul fast float %193, %198
  %204 = fmul fast float %181, %198
  %205 = fsub fast float -0.000000e+00, %204
  %206 = fadd fast float %199, %202
  %207 = fadd fast float %200, %203
  %208 = fsub fast float %205, %201
  %209 = fmul fast float %208, %181
  %210 = fmul fast float %207, %182
  %211 = fsub fast float %209, %210
  %212 = fmul fast float %206, %182
  %213 = fmul fast float %208, %180
  %214 = fsub fast float %212, %213
  %215 = fmul fast float %207, %180
  %216 = fmul fast float %206, %181
  %217 = fsub fast float %215, %216
  %218 = lshr i32 %151, 16
  %219 = shl i32 %218, 23
  %220 = add i32 %219, -125829120
  %221 = bitcast i32 %220 to float
  %222 = lshr i32 %150, 16
  %223 = and i32 %150, 65535
  %224 = and i32 %151, 65535
  %225 = uitofp i32 %223 to float
  %226 = uitofp i32 %222 to float
  %227 = uitofp i32 %224 to float
  %228 = fadd fast float %225, -3.276800e+04
  %229 = fadd fast float %226, -3.276800e+04
  %230 = fadd fast float %227, -3.276800e+04
  %231 = fmul fast float %221, %228
  %232 = fmul fast float %221, %229
  %233 = fmul fast float %221, %230
  %234 = fmul fast float %206, %231
  %235 = fmul fast float %207, %231
  %236 = fmul fast float %208, %231
  %237 = fmul fast float %211, %232
  %238 = fmul fast float %214, %232
  %239 = fmul fast float %217, %232
  %240 = fmul fast float %180, %233
  %241 = fmul fast float %181, %233
  %242 = fmul fast float %182, %233
  %243 = call float @dx.op.unary.f32(i32 6, float %231)  ; FAbs(value)
  %244 = call float @dx.op.unary.f32(i32 6, float %232)  ; FAbs(value)
  %245 = call float @dx.op.unary.f32(i32 6, float %233)  ; FAbs(value)
  %246 = fdiv fast float 1.000000e+00, %243
  %247 = fdiv fast float 1.000000e+00, %244
  %248 = fdiv fast float 1.000000e+00, %245
  %249 = fmul fast float %246, %246
  %250 = fmul fast float %234, %249
  %251 = fmul fast float %235, %249
  %252 = fmul fast float %249, %236
  %253 = fmul fast float %247, %247
  %254 = fmul fast float %237, %253
  %255 = fmul fast float %238, %253
  %256 = fmul fast float %239, %253
  %257 = fmul fast float %248, %248
  %258 = fmul fast float %257, %240
  %259 = fmul fast float %257, %241
  %260 = fmul fast float %257, %242
  %261 = fsub fast float -0.000000e+00, %155
  %262 = fsub fast float -0.000000e+00, %156
  %263 = fsub fast float -0.000000e+00, %157
  %264 = fmul fast float %250, %261
  %265 = call float @dx.op.tertiary.f32(i32 46, float %262, float %251, float %264)  ; FMad(a,b,c)
  %266 = call float @dx.op.tertiary.f32(i32 46, float %263, float %252, float %265)  ; FMad(a,b,c)
  %267 = fmul fast float %254, %261
  %268 = call float @dx.op.tertiary.f32(i32 46, float %262, float %255, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %263, float %256, float %268)  ; FMad(a,b,c)
  %270 = fmul fast float %258, %261
  %271 = call float @dx.op.tertiary.f32(i32 46, float %262, float %259, float %270)  ; FMad(a,b,c)
  %272 = call float @dx.op.tertiary.f32(i32 46, float %263, float %260, float %271)  ; FMad(a,b,c)
  %273 = fsub fast float %139, %64
  %274 = fsub fast float %140, %65
  %275 = fsub fast float %141, %66
  %276 = fmul fast float %273, 2.097152e+06
  %277 = fmul fast float %274, 2.097152e+06
  %278 = fmul fast float %275, 2.097152e+06
  %279 = fadd fast float %276, %68
  %280 = fadd fast float %279, %155
  %281 = fadd fast float %277, %69
  %282 = fadd fast float %281, %156
  %283 = fadd fast float %278, %70
  %284 = fadd fast float %283, %157
  %285 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %120, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.i32 %285, 1
  %287 = call i32 @dx.op.binary.i32(i32 40, i32 %127, i32 %286)  ; UMin(a,b)
  %288 = shl i32 %287, 17
  %289 = sub nsw i32 %127, %286
  %290 = call i32 @dx.op.binary.i32(i32 37, i32 %289, i32 0)  ; IMax(a,b)
  %291 = shl i32 %290, 15
  %292 = add i32 %291, %288
  %293 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %294 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %292, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %295 = extractvalue %dx.types.ResRet.i32 %294, 0
  %296 = shl i32 %295, 4
  %297 = shl nuw nsw i32 %129, 4
  %298 = or i32 %292, %297
  %299 = add nsw i32 %298, 16
  %300 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %299, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %301 = extractvalue %dx.types.ResRet.i32 %300, 0
  %302 = extractvalue %dx.types.ResRet.i32 %300, 1
  %303 = extractvalue %dx.types.ResRet.i32 %300, 3
  %304 = add i32 %299, %296
  %305 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %304, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %306 = extractvalue %dx.types.ResRet.i32 %305, 0
  %307 = extractvalue %dx.types.ResRet.i32 %305, 1
  %308 = extractvalue %dx.types.ResRet.i32 %305, 2
  %309 = extractvalue %dx.types.ResRet.i32 %305, 3
  %310 = mul i32 %295, 80
  %311 = add i32 %299, %310
  %312 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %311, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %313 = extractvalue %dx.types.ResRet.i32 %312, 0
  %314 = extractvalue %dx.types.ResRet.i32 %312, 1
  %315 = extractvalue %dx.types.ResRet.i32 %312, 2
  %316 = lshr i32 %301, 9
  %317 = lshr i32 %302, 8
  %318 = and i32 %309, 15
  %319 = lshr i32 %309, 9
  %320 = and i32 %319, 31
  %321 = lshr i32 %309, 14
  %322 = and i32 %321, 31
  %323 = lshr i32 %309, 19
  %324 = and i32 %323, 31
  %325 = lshr i32 %309, 24
  %326 = and i32 %325, 15
  %327 = lshr i32 %309, 28
  %328 = and i32 %313, 4194303
  %329 = lshr i32 %313, 22
  %330 = and i32 %314, 4194303
  %331 = and i32 %314, 4194304
  %332 = icmp ne i32 %331, 0
  %333 = lshr i32 %314, 23
  %334 = and i32 %333, 7
  %335 = add nuw nsw i32 %318, 10
  %336 = mul nuw nsw i32 %335, %119
  %337 = add i32 %317, %292
  %338 = lshr i32 %336, 5
  %339 = shl nuw nsw i32 %338, 2
  %340 = add i32 %337, %339
  %341 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %340, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %342 = extractvalue %dx.types.ResRet.i32 %341, 0
  %343 = extractvalue %dx.types.ResRet.i32 %341, 1
  %344 = and i32 %336, 31
  %345 = lshr i32 %342, %344
  %346 = icmp ne i32 %344, 0
  %347 = sub nsw i32 0, %336
  %348 = and i32 %347, 31
  %349 = shl i32 %343, %348
  %350 = select i1 %346, i32 %349, i32 0
  %351 = or i32 %350, %345
  %352 = shl i32 1, %318
  %353 = add i32 %352, -1
  %354 = and i32 %351, %353
  %355 = lshr i32 %351, %318
  %356 = and i32 %355, 31
  %357 = add nuw nsw i32 %318, 5
  %358 = lshr i32 %351, %357
  %359 = and i32 %358, 31
  %360 = add i32 %356, %354
  %361 = add i32 %359, %354
  %362 = add nuw nsw i32 %320, %322
  %363 = add nuw nsw i32 %362, %324
  %364 = mul i32 %354, %363
  %365 = add i32 %316, %292
  %366 = lshr i32 %364, 5
  %367 = shl nuw nsw i32 %366, 2
  %368 = add i32 %365, %367
  %369 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %368, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %370 = extractvalue %dx.types.ResRet.i32 %369, 0
  %371 = extractvalue %dx.types.ResRet.i32 %369, 1
  %372 = extractvalue %dx.types.ResRet.i32 %369, 2
  %373 = and i32 %364, 31
  %374 = lshr i32 %370, %373
  %375 = icmp ne i32 %373, 0
  %376 = sub i32 0, %364
  %377 = and i32 %376, 31
  %378 = shl i32 %371, %377
  %379 = select i1 %375, i32 %378, i32 0
  %380 = or i32 %379, %374
  %381 = lshr i32 %371, %373
  %382 = shl i32 %372, %377
  %383 = select i1 %375, i32 %382, i32 0
  %384 = or i32 %383, %381
  %385 = shl i32 1, %320
  %386 = add i32 %385, -1
  %387 = and i32 %380, %386
  %388 = lshr i32 %380, %320
  %389 = icmp ne i32 %320, 0
  %390 = sub nsw i32 0, %319
  %391 = and i32 %390, 31
  %392 = shl i32 %384, %391
  %393 = select i1 %389, i32 %392, i32 0
  %394 = or i32 %393, %388
  %395 = lshr i32 %384, %320
  %396 = shl i32 1, %322
  %397 = add i32 %396, -1
  %398 = and i32 %394, %397
  %399 = lshr i32 %394, %322
  %400 = icmp ne i32 %322, 0
  %401 = sub nsw i32 0, %321
  %402 = and i32 %401, 31
  %403 = shl i32 %395, %402
  %404 = select i1 %400, i32 %403, i32 0
  %405 = or i32 %399, %404
  %406 = shl i32 1, %324
  %407 = add i32 %406, -1
  %408 = and i32 %405, %407
  %409 = shl i32 %309, 19
  %410 = and i32 %409, 260046848
  %411 = sub nsw i32 1132462080, %410
  %412 = bitcast i32 %411 to float
  %413 = add i32 %387, %306
  %414 = add i32 %398, %307
  %415 = add i32 %408, %308
  %416 = sitofp i32 %413 to float
  %417 = sitofp i32 %414 to float
  %418 = sitofp i32 %415 to float
  %419 = fmul fast float %416, %412
  %420 = fmul fast float %417, %412
  %421 = fmul fast float %418, %412
  %422 = mul i32 %360, %363
  %423 = lshr i32 %422, 5
  %424 = shl nuw nsw i32 %423, 2
  %425 = add i32 %365, %424
  %426 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %425, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %427 = extractvalue %dx.types.ResRet.i32 %426, 0
  %428 = extractvalue %dx.types.ResRet.i32 %426, 1
  %429 = extractvalue %dx.types.ResRet.i32 %426, 2
  %430 = and i32 %422, 31
  %431 = lshr i32 %427, %430
  %432 = icmp ne i32 %430, 0
  %433 = sub i32 0, %422
  %434 = and i32 %433, 31
  %435 = shl i32 %428, %434
  %436 = select i1 %432, i32 %435, i32 0
  %437 = or i32 %436, %431
  %438 = lshr i32 %428, %430
  %439 = shl i32 %429, %434
  %440 = select i1 %432, i32 %439, i32 0
  %441 = or i32 %440, %438
  %442 = and i32 %437, %386
  %443 = lshr i32 %437, %320
  %444 = shl i32 %441, %391
  %445 = select i1 %389, i32 %444, i32 0
  %446 = or i32 %445, %443
  %447 = lshr i32 %441, %320
  %448 = and i32 %446, %397
  %449 = lshr i32 %446, %322
  %450 = shl i32 %447, %402
  %451 = select i1 %400, i32 %450, i32 0
  %452 = or i32 %449, %451
  %453 = and i32 %452, %407
  %454 = add i32 %442, %306
  %455 = add i32 %448, %307
  %456 = add i32 %453, %308
  %457 = sitofp i32 %454 to float
  %458 = sitofp i32 %455 to float
  %459 = sitofp i32 %456 to float
  %460 = fmul fast float %457, %412
  %461 = fmul fast float %458, %412
  %462 = fmul fast float %459, %412
  %463 = mul i32 %361, %363
  %464 = lshr i32 %463, 5
  %465 = shl nuw nsw i32 %464, 2
  %466 = add i32 %365, %465
  %467 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %466, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %468 = extractvalue %dx.types.ResRet.i32 %467, 0
  %469 = extractvalue %dx.types.ResRet.i32 %467, 1
  %470 = extractvalue %dx.types.ResRet.i32 %467, 2
  %471 = and i32 %463, 31
  %472 = lshr i32 %468, %471
  %473 = icmp ne i32 %471, 0
  %474 = sub i32 0, %463
  %475 = and i32 %474, 31
  %476 = shl i32 %469, %475
  %477 = select i1 %473, i32 %476, i32 0
  %478 = or i32 %477, %472
  %479 = lshr i32 %469, %471
  %480 = shl i32 %470, %475
  %481 = select i1 %473, i32 %480, i32 0
  %482 = or i32 %481, %479
  %483 = and i32 %478, %386
  %484 = lshr i32 %478, %320
  %485 = shl i32 %482, %391
  %486 = select i1 %389, i32 %485, i32 0
  %487 = or i32 %486, %484
  %488 = lshr i32 %482, %320
  %489 = and i32 %487, %397
  %490 = lshr i32 %487, %322
  %491 = shl i32 %488, %402
  %492 = select i1 %400, i32 %491, i32 0
  %493 = or i32 %490, %492
  %494 = and i32 %493, %407
  %495 = add i32 %483, %306
  %496 = add i32 %489, %307
  %497 = add i32 %494, %308
  %498 = sitofp i32 %495 to float
  %499 = sitofp i32 %496 to float
  %500 = sitofp i32 %497 to float
  %501 = fmul fast float %498, %412
  %502 = fmul fast float %499, %412
  %503 = fmul fast float %500, %412
  %504 = add i32 %330, %292
  %505 = add i32 %328, %292
  %506 = and i32 %303, 15
  %507 = lshr i32 %303, 4
  %508 = and i32 %507, 15
  %509 = lshr i32 %303, 8
  %510 = and i32 %509, 15
  %511 = lshr i32 %303, 12
  %512 = and i32 %511, 15
  %513 = mul i32 %354, %329
  %514 = shl nuw nsw i32 %326, 1
  %515 = ashr i32 %513, 5
  %516 = shl nsw i32 %515, 2
  %517 = add i32 %516, %505
  %518 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %517, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %519 = extractvalue %dx.types.ResRet.i32 %518, 0
  %520 = extractvalue %dx.types.ResRet.i32 %518, 1
  %521 = extractvalue %dx.types.ResRet.i32 %518, 2
  %522 = extractvalue %dx.types.ResRet.i32 %518, 3
  %523 = and i32 %513, 31
  %524 = lshr i32 %519, %523
  %525 = icmp ne i32 %523, 0
  %526 = sub i32 0, %513
  %527 = and i32 %526, 31
  %528 = shl i32 %520, %527
  %529 = select i1 %525, i32 %528, i32 0
  %530 = or i32 %529, %524
  %531 = lshr i32 %520, %523
  %532 = shl i32 %521, %527
  %533 = select i1 %525, i32 %532, i32 0
  %534 = or i32 %533, %531
  %535 = lshr i32 %521, %523
  %536 = shl i32 %522, %527
  %537 = select i1 %525, i32 %536, i32 0
  %538 = or i32 %537, %535
  %539 = shl i32 1, %514
  %540 = add i32 %539, -1
  %541 = and i32 %530, %540
  %542 = shl i32 1, %326
  %543 = add i32 %542, -1
  %544 = and i32 %541, %543
  %545 = lshr i32 %541, %326
  %546 = and i32 %545, %543
  %547 = uitofp i32 %544 to float
  %548 = uitofp i32 %546 to float
  %549 = uitofp i32 %543 to float
  %550 = fdiv fast float 2.000000e+00, %549
  %551 = fmul fast float %547, %550
  %552 = fmul fast float %548, %550
  %553 = fadd fast float %551, -1.000000e+00
  %554 = fadd fast float %552, -1.000000e+00
  %555 = call float @dx.op.unary.f32(i32 6, float %553)  ; FAbs(value)
  %556 = fsub fast float 1.000000e+00, %555
  %557 = call float @dx.op.unary.f32(i32 6, float %554)  ; FAbs(value)
  %558 = fsub fast float %556, %557
  %559 = fsub fast float -0.000000e+00, %558
  %560 = call float @dx.op.unary.f32(i32 7, float %559)  ; Saturate(value)
  %561 = fsub fast float -0.000000e+00, %560
  %562 = fcmp fast oge float %553, 0.000000e+00
  %563 = fcmp fast oge float %554, 0.000000e+00
  %564 = select i1 %562, float %561, float %560
  %565 = select i1 %563, float %561, float %560
  %566 = fadd fast float %564, %553
  %567 = fadd fast float %565, %554
  %568 = call float @dx.op.dot3.f32(i32 55, float %566, float %567, float %558, float %566, float %567, float %558)  ; Dot3(ax,ay,az,bx,by,bz)
  %569 = call float @dx.op.unary.f32(i32 25, float %568)  ; Rsqrt(value)
  %570 = fmul fast float %566, %569
  %571 = fmul fast float %567, %569
  %572 = fmul fast float %569, %558
  %573 = add nuw nsw i32 %327, 1
  %574 = select i1 %332, i32 %573, i32 0
  %575 = add nsw i32 %513, %514
  %576 = lshr i32 %530, %514
  %577 = icmp ne i32 %326, 0
  %578 = sub nsw i32 0, %514
  %579 = and i32 %578, 30
  %580 = shl i32 %534, %579
  %581 = select i1 %577, i32 %580, i32 0
  %582 = or i32 %581, %576
  %583 = lshr i32 %534, %514
  %584 = shl i32 %538, %579
  %585 = select i1 %577, i32 %584, i32 0
  %586 = or i32 %585, %583
  %587 = shl i32 1, %574
  %588 = add i32 %587, -1
  %589 = and i32 %582, %588
  br i1 %332, label %590, label %627, !dx.controlflow.hints !89

; <label>:590                                     ; preds = %118
  %591 = shl i32 1, %327
  %592 = and i32 %589, %591
  %593 = icmp ne i32 %592, 0
  %594 = add i32 %591, -1
  %595 = and i32 %589, %594
  %596 = call float @dx.op.unary.f32(i32 6, float %572)  ; FAbs(value)
  %597 = call float @dx.op.unary.f32(i32 6, float %570)  ; FAbs(value)
  %598 = fcmp fast ogt float %596, %597
  %599 = select i1 %598, float %572, float %570
  %600 = select i1 %598, float %570, float %572
  %601 = fsub fast float -0.000000e+00, %571
  %602 = fmul fast float %600, %599
  %603 = fmul fast float %600, %601
  %604 = fmul fast float %599, %599
  %605 = fmul fast float %571, %601
  %606 = fsub fast float %604, %605
  %607 = call float @dx.op.dot2.f32(i32 54, float %601, float %599, float %601, float %599)  ; Dot2(ax,ay,bx,by)
  %608 = call float @dx.op.unary.f32(i32 25, float %607)  ; Rsqrt(value)
  %609 = uitofp i32 %595 to float
  %610 = uitofp i32 %591 to float
  %611 = fdiv fast float 0x401921FB60000000, %610
  %612 = fmul fast float %611, %609
  %613 = call float @dx.op.unary.f32(i32 12, float %612)  ; Cos(value)
  %614 = fmul fast float %613, %608
  %615 = fmul fast float %614, %601
  %616 = fmul fast float %614, %599
  %617 = call float @dx.op.unary.f32(i32 13, float %612)  ; Sin(value)
  %618 = fmul fast float %617, %608
  %619 = fmul fast float %602, %618
  %620 = fmul fast float %603, %618
  %621 = fmul fast float %618, %606
  %622 = fsub fast float %615, %619
  %623 = fadd fast float %620, %616
  %624 = select i1 %598, float %621, float %622
  %625 = select i1 %598, float %622, float %621
  %626 = select i1 %593, float -1.000000e+00, float 1.000000e+00
  br label %627

; <label>:627                                     ; preds = %590, %118
  %628 = phi float [ %624, %590 ], [ 0.000000e+00, %118 ]
  %629 = phi float [ %623, %590 ], [ 0.000000e+00, %118 ]
  %630 = phi float [ %625, %590 ], [ 0.000000e+00, %118 ]
  %631 = phi float [ %626, %590 ], [ 0.000000e+00, %118 ]
  %632 = add nuw nsw i32 %574, %506
  %633 = add nuw nsw i32 %632, %508
  %634 = add nsw i32 %633, %575
  %635 = and i32 %633, 31
  %636 = lshr i32 %582, %635
  %637 = icmp ne i32 %635, 0
  %638 = sub nsw i32 0, %633
  %639 = and i32 %638, 31
  %640 = shl i32 %586, %639
  %641 = select i1 %637, i32 %640, i32 0
  %642 = or i32 %641, %636
  %643 = add nuw nsw i32 %510, %512
  %644 = mul i32 %360, %329
  %645 = ashr i32 %644, 5
  %646 = shl nsw i32 %645, 2
  %647 = add i32 %646, %505
  %648 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %647, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %649 = extractvalue %dx.types.ResRet.i32 %648, 0
  %650 = extractvalue %dx.types.ResRet.i32 %648, 1
  %651 = extractvalue %dx.types.ResRet.i32 %648, 2
  %652 = extractvalue %dx.types.ResRet.i32 %648, 3
  %653 = and i32 %644, 31
  %654 = lshr i32 %649, %653
  %655 = icmp ne i32 %653, 0
  %656 = sub i32 0, %644
  %657 = and i32 %656, 31
  %658 = shl i32 %650, %657
  %659 = select i1 %655, i32 %658, i32 0
  %660 = or i32 %659, %654
  %661 = lshr i32 %650, %653
  %662 = shl i32 %651, %657
  %663 = select i1 %655, i32 %662, i32 0
  %664 = or i32 %663, %661
  %665 = lshr i32 %651, %653
  %666 = shl i32 %652, %657
  %667 = select i1 %655, i32 %666, i32 0
  %668 = or i32 %667, %665
  %669 = and i32 %660, %540
  %670 = and i32 %669, %543
  %671 = lshr i32 %669, %326
  %672 = and i32 %671, %543
  %673 = uitofp i32 %670 to float
  %674 = uitofp i32 %672 to float
  %675 = fmul fast float %673, %550
  %676 = fmul fast float %674, %550
  %677 = fadd fast float %675, -1.000000e+00
  %678 = fadd fast float %676, -1.000000e+00
  %679 = call float @dx.op.unary.f32(i32 6, float %677)  ; FAbs(value)
  %680 = fsub fast float 1.000000e+00, %679
  %681 = call float @dx.op.unary.f32(i32 6, float %678)  ; FAbs(value)
  %682 = fsub fast float %680, %681
  %683 = fsub fast float -0.000000e+00, %682
  %684 = call float @dx.op.unary.f32(i32 7, float %683)  ; Saturate(value)
  %685 = fsub fast float -0.000000e+00, %684
  %686 = fcmp fast oge float %677, 0.000000e+00
  %687 = fcmp fast oge float %678, 0.000000e+00
  %688 = select i1 %686, float %685, float %684
  %689 = select i1 %687, float %685, float %684
  %690 = fadd fast float %688, %677
  %691 = fadd fast float %689, %678
  %692 = call float @dx.op.dot3.f32(i32 55, float %690, float %691, float %682, float %690, float %691, float %682)  ; Dot3(ax,ay,az,bx,by,bz)
  %693 = call float @dx.op.unary.f32(i32 25, float %692)  ; Rsqrt(value)
  %694 = fmul fast float %690, %693
  %695 = fmul fast float %691, %693
  %696 = fmul fast float %693, %682
  %697 = add nsw i32 %644, %514
  %698 = lshr i32 %660, %514
  %699 = shl i32 %664, %579
  %700 = select i1 %577, i32 %699, i32 0
  %701 = or i32 %700, %698
  %702 = lshr i32 %664, %514
  %703 = shl i32 %668, %579
  %704 = select i1 %577, i32 %703, i32 0
  %705 = or i32 %704, %702
  %706 = and i32 %701, %588
  br i1 %332, label %707, label %744, !dx.controlflow.hints !89

; <label>:707                                     ; preds = %627
  %708 = shl i32 1, %327
  %709 = and i32 %706, %708
  %710 = icmp ne i32 %709, 0
  %711 = add i32 %708, -1
  %712 = and i32 %706, %711
  %713 = call float @dx.op.unary.f32(i32 6, float %696)  ; FAbs(value)
  %714 = call float @dx.op.unary.f32(i32 6, float %694)  ; FAbs(value)
  %715 = fcmp fast ogt float %713, %714
  %716 = select i1 %715, float %696, float %694
  %717 = select i1 %715, float %694, float %696
  %718 = fsub fast float -0.000000e+00, %695
  %719 = fmul fast float %717, %716
  %720 = fmul fast float %717, %718
  %721 = fmul fast float %716, %716
  %722 = fmul fast float %695, %718
  %723 = fsub fast float %721, %722
  %724 = call float @dx.op.dot2.f32(i32 54, float %718, float %716, float %718, float %716)  ; Dot2(ax,ay,bx,by)
  %725 = call float @dx.op.unary.f32(i32 25, float %724)  ; Rsqrt(value)
  %726 = uitofp i32 %712 to float
  %727 = uitofp i32 %708 to float
  %728 = fdiv fast float 0x401921FB60000000, %727
  %729 = fmul fast float %728, %726
  %730 = call float @dx.op.unary.f32(i32 12, float %729)  ; Cos(value)
  %731 = fmul fast float %730, %725
  %732 = fmul fast float %731, %718
  %733 = fmul fast float %731, %716
  %734 = call float @dx.op.unary.f32(i32 13, float %729)  ; Sin(value)
  %735 = fmul fast float %734, %725
  %736 = fmul fast float %719, %735
  %737 = fmul fast float %720, %735
  %738 = fmul fast float %735, %723
  %739 = fsub fast float %732, %736
  %740 = fadd fast float %737, %733
  %741 = select i1 %715, float %738, float %739
  %742 = select i1 %715, float %739, float %738
  %743 = select i1 %710, float -1.000000e+00, float 1.000000e+00
  br label %744

; <label>:744                                     ; preds = %707, %627
  %745 = phi float [ %741, %707 ], [ 0.000000e+00, %627 ]
  %746 = phi float [ %740, %707 ], [ 0.000000e+00, %627 ]
  %747 = phi float [ %742, %707 ], [ 0.000000e+00, %627 ]
  %748 = phi float [ %743, %707 ], [ 0.000000e+00, %627 ]
  %749 = add nsw i32 %633, %697
  %750 = and i32 %633, 31
  %751 = lshr i32 %701, %750
  %752 = icmp ne i32 %750, 0
  %753 = sub nsw i32 0, %633
  %754 = and i32 %753, 31
  %755 = shl i32 %705, %754
  %756 = select i1 %752, i32 %755, i32 0
  %757 = or i32 %756, %751
  %758 = mul i32 %361, %329
  %759 = ashr i32 %758, 5
  %760 = shl nsw i32 %759, 2
  %761 = add i32 %760, %505
  %762 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %293, i32 %761, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %763 = extractvalue %dx.types.ResRet.i32 %762, 0
  %764 = extractvalue %dx.types.ResRet.i32 %762, 1
  %765 = extractvalue %dx.types.ResRet.i32 %762, 2
  %766 = extractvalue %dx.types.ResRet.i32 %762, 3
  %767 = and i32 %758, 31
  %768 = lshr i32 %763, %767
  %769 = icmp ne i32 %767, 0
  %770 = sub i32 0, %758
  %771 = and i32 %770, 31
  %772 = shl i32 %764, %771
  %773 = select i1 %769, i32 %772, i32 0
  %774 = or i32 %773, %768
  %775 = lshr i32 %764, %767
  %776 = shl i32 %765, %771
  %777 = select i1 %769, i32 %776, i32 0
  %778 = or i32 %777, %775
  %779 = lshr i32 %765, %767
  %780 = shl i32 %766, %771
  %781 = select i1 %769, i32 %780, i32 0
  %782 = or i32 %781, %779
  %783 = and i32 %774, %540
  %784 = and i32 %783, %543
  %785 = lshr i32 %783, %326
  %786 = and i32 %785, %543
  %787 = uitofp i32 %784 to float
  %788 = uitofp i32 %786 to float
  %789 = fmul fast float %787, %550
  %790 = fmul fast float %788, %550
  %791 = fadd fast float %789, -1.000000e+00
  %792 = fadd fast float %790, -1.000000e+00
  %793 = call float @dx.op.unary.f32(i32 6, float %791)  ; FAbs(value)
  %794 = fsub fast float 1.000000e+00, %793
  %795 = call float @dx.op.unary.f32(i32 6, float %792)  ; FAbs(value)
  %796 = fsub fast float %794, %795
  %797 = fsub fast float -0.000000e+00, %796
  %798 = call float @dx.op.unary.f32(i32 7, float %797)  ; Saturate(value)
  %799 = fsub fast float -0.000000e+00, %798
  %800 = fcmp fast oge float %791, 0.000000e+00
  %801 = fcmp fast oge float %792, 0.000000e+00
  %802 = select i1 %800, float %799, float %798
  %803 = select i1 %801, float %799, float %798
  %804 = fadd fast float %802, %791
  %805 = fadd fast float %803, %792
  %806 = call float @dx.op.dot3.f32(i32 55, float %804, float %805, float %796, float %804, float %805, float %796)  ; Dot3(ax,ay,az,bx,by,bz)
  %807 = call float @dx.op.unary.f32(i32 25, float %806)  ; Rsqrt(value)
  %808 = fmul fast float %804, %807
  %809 = fmul fast float %805, %807
  %810 = fmul fast float %807, %796
  %811 = add nsw i32 %758, %514
  %812 = lshr i32 %774, %514
  %813 = shl i32 %778, %579
  %814 = select i1 %577, i32 %813, i32 0
  %815 = or i32 %814, %812
  %816 = lshr i32 %778, %514
  %817 = shl i32 %782, %579
  %818 = select i1 %577, i32 %817, i32 0
  %819 = or i32 %818, %816
  %820 = and i32 %815, %588
  br i1 %332, label %821, label %858, !dx.controlflow.hints !89

; <label>:821                                     ; preds = %744
  %822 = shl i32 1, %327
  %823 = and i32 %820, %822
  %824 = icmp ne i32 %823, 0
  %825 = add i32 %822, -1
  %826 = and i32 %820, %825
  %827 = call float @dx.op.unary.f32(i32 6, float %810)  ; FAbs(value)
  %828 = call float @dx.op.unary.f32(i32 6, float %808)  ; FAbs(value)
  %829 = fcmp fast ogt float %827, %828
  %830 = select i1 %829, float %810, float %808
  %831 = select i1 %829, float %808, float %810
  %832 = fsub fast float -0.000000e+00, %809
  %833 = fmul fast float %831, %830
  %834 = fmul fast float %831, %832
  %835 = fmul fast float %830, %830
  %836 = fmul fast float %809, %832
  %837 = fsub fast float %835, %836
  %838 = call float @dx.op.dot2.f32(i32 54, float %832, float %830, float %832, float %830)  ; Dot2(ax,ay,bx,by)
  %839 = call float @dx.op.unary.f32(i32 25, float %838)  ; Rsqrt(value)
  %840 = uitofp i32 %826 to float
  %841 = uitofp i32 %822 to float
  %842 = fdiv fast float 0x401921FB60000000, %841
  %843 = fmul fast float %842, %840
  %844 = call float @dx.op.unary.f32(i32 12, float %843)  ; Cos(value)
  %845 = fmul fast float %844, %839
  %846 = fmul fast float %845, %832
  %847 = fmul fast float %845, %830
  %848 = call float @dx.op.unary.f32(i32 13, float %843)  ; Sin(value)
  %849 = fmul fast float %848, %839
  %850 = fmul fast float %833, %849
  %851 = fmul fast float %834, %849
  %852 = fmul fast float %849, %837
  %853 = fsub fast float %846, %850
  %854 = fadd fast float %851, %847
  %855 = select i1 %829, float %852, float %853
  %856 = select i1 %829, float %853, float %852
  %857 = select i1 %824, float -1.000000e+00, float 1.000000e+00
  br label %858

; <label>:858                                     ; preds = %821, %744
  %859 = phi float [ %855, %821 ], [ 0.000000e+00, %744 ]
  %860 = phi float [ %854, %821 ], [ 0.000000e+00, %744 ]
  %861 = phi float [ %856, %821 ], [ 0.000000e+00, %744 ]
  %862 = phi float [ %857, %821 ], [ 0.000000e+00, %744 ]
  %863 = add nsw i32 %633, %811
  %864 = and i32 %633, 31
  %865 = lshr i32 %815, %864
  %866 = icmp ne i32 %864, 0
  %867 = sub nsw i32 0, %633
  %868 = and i32 %867, 31
  %869 = shl i32 %819, %868
  %870 = select i1 %866, i32 %869, i32 0
  %871 = or i32 %870, %865
  %872 = and i32 %315, 15
  %873 = lshr i32 %315, 4
  %874 = and i32 %873, 15
  %875 = lshr i32 %642, %643
  %876 = shl i32 1, %872
  %877 = add i32 %876, -1
  %878 = and i32 %875, %877
  %879 = add nuw nsw i32 %643, %872
  %880 = add nsw i32 %879, %634
  %881 = ashr i32 %880, 5
  %882 = shl nsw i32 %881, 2
  %883 = add i32 %882, %505
  %884 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %885 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %884, i32 %883, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %886 = extractvalue %dx.types.ResRet.i32 %885, 0
  %887 = extractvalue %dx.types.ResRet.i32 %885, 1
  %888 = extractvalue %dx.types.ResRet.i32 %885, 2
  %889 = extractvalue %dx.types.ResRet.i32 %885, 3
  %890 = and i32 %880, 31
  %891 = lshr i32 %886, %890
  %892 = icmp ne i32 %890, 0
  %893 = sub i32 0, %880
  %894 = and i32 %893, 31
  %895 = shl i32 %887, %894
  %896 = select i1 %892, i32 %895, i32 0
  %897 = or i32 %896, %891
  %898 = lshr i32 %887, %890
  %899 = shl i32 %888, %894
  %900 = select i1 %892, i32 %899, i32 0
  %901 = or i32 %900, %898
  %902 = lshr i32 %888, %890
  %903 = shl i32 %889, %894
  %904 = select i1 %892, i32 %903, i32 0
  %905 = or i32 %904, %902
  %906 = shl i32 1, %874
  %907 = add i32 %906, -1
  %908 = and i32 %897, %907
  %909 = lshr i32 %757, %643
  %910 = and i32 %909, %877
  %911 = add nsw i32 %879, %749
  %912 = ashr i32 %911, 5
  %913 = shl nsw i32 %912, 2
  %914 = add i32 %913, %505
  %915 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %916 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %915, i32 %914, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %917 = extractvalue %dx.types.ResRet.i32 %916, 0
  %918 = extractvalue %dx.types.ResRet.i32 %916, 1
  %919 = extractvalue %dx.types.ResRet.i32 %916, 2
  %920 = extractvalue %dx.types.ResRet.i32 %916, 3
  %921 = and i32 %911, 31
  %922 = lshr i32 %917, %921
  %923 = icmp ne i32 %921, 0
  %924 = sub i32 0, %911
  %925 = and i32 %924, 31
  %926 = shl i32 %918, %925
  %927 = select i1 %923, i32 %926, i32 0
  %928 = or i32 %927, %922
  %929 = lshr i32 %918, %921
  %930 = shl i32 %919, %925
  %931 = select i1 %923, i32 %930, i32 0
  %932 = or i32 %931, %929
  %933 = lshr i32 %919, %921
  %934 = shl i32 %920, %925
  %935 = select i1 %923, i32 %934, i32 0
  %936 = or i32 %935, %933
  %937 = and i32 %928, %907
  %938 = lshr i32 %871, %643
  %939 = and i32 %938, %877
  %940 = add nsw i32 %879, %863
  %941 = ashr i32 %940, 5
  %942 = shl nsw i32 %941, 2
  %943 = add i32 %942, %505
  %944 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %945 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %944, i32 %943, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %946 = extractvalue %dx.types.ResRet.i32 %945, 0
  %947 = extractvalue %dx.types.ResRet.i32 %945, 1
  %948 = extractvalue %dx.types.ResRet.i32 %945, 2
  %949 = extractvalue %dx.types.ResRet.i32 %945, 3
  %950 = and i32 %940, 31
  %951 = lshr i32 %946, %950
  %952 = icmp ne i32 %950, 0
  %953 = sub i32 0, %940
  %954 = and i32 %953, 31
  %955 = shl i32 %947, %954
  %956 = select i1 %952, i32 %955, i32 0
  %957 = or i32 %956, %951
  %958 = lshr i32 %947, %950
  %959 = shl i32 %948, %954
  %960 = select i1 %952, i32 %959, i32 0
  %961 = or i32 %960, %958
  %962 = lshr i32 %948, %950
  %963 = shl i32 %949, %954
  %964 = select i1 %952, i32 %963, i32 0
  %965 = or i32 %964, %962
  %966 = and i32 %957, %907
  %967 = icmp eq i32 %334, 0
  br i1 %967, label %1019, label %968, !dx.controlflow.hints !90

; <label>:968                                     ; preds = %858
  %969 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %970 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %969, i32 %504, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %971 = extractvalue %dx.types.ResRet.i32 %970, 0
  %972 = extractvalue %dx.types.ResRet.i32 %970, 1
  %973 = extractvalue %dx.types.ResRet.i32 %970, 2
  %974 = extractvalue %dx.types.ResRet.i32 %970, 3
  %975 = add i32 %504, 16
  %976 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %969, i32 %975, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %977 = extractvalue %dx.types.ResRet.i32 %976, 0
  %978 = extractvalue %dx.types.ResRet.i32 %976, 1
  %979 = extractvalue %dx.types.ResRet.i32 %976, 2
  %980 = icmp ugt i32 %878, %973
  %981 = icmp ugt i32 %908, %974
  %982 = select i1 %980, i32 %977, i32 0
  %983 = select i1 %981, i32 %978, i32 0
  %984 = shl i32 %979, 23
  %985 = sub nsw i32 1065353216, %984
  %986 = bitcast i32 %985 to float
  %987 = add i32 %971, %878
  %988 = add i32 %987, %982
  %989 = add i32 %972, %908
  %990 = add i32 %989, %983
  %991 = sitofp i32 %988 to float
  %992 = sitofp i32 %990 to float
  %993 = fmul fast float %991, %986
  %994 = fmul fast float %992, %986
  %995 = icmp ugt i32 %910, %973
  %996 = icmp ugt i32 %937, %974
  %997 = select i1 %995, i32 %977, i32 0
  %998 = select i1 %996, i32 %978, i32 0
  %999 = add i32 %971, %910
  %1000 = add i32 %999, %997
  %1001 = add i32 %972, %937
  %1002 = add i32 %1001, %998
  %1003 = sitofp i32 %1000 to float
  %1004 = sitofp i32 %1002 to float
  %1005 = fmul fast float %1003, %986
  %1006 = fmul fast float %1004, %986
  %1007 = icmp ugt i32 %939, %973
  %1008 = icmp ugt i32 %966, %974
  %1009 = select i1 %1007, i32 %977, i32 0
  %1010 = select i1 %1008, i32 %978, i32 0
  %1011 = add i32 %971, %939
  %1012 = add i32 %1011, %1009
  %1013 = add i32 %972, %966
  %1014 = add i32 %1013, %1010
  %1015 = sitofp i32 %1012 to float
  %1016 = sitofp i32 %1014 to float
  %1017 = fmul fast float %1015, %986
  %1018 = fmul fast float %1016, %986
  br label %1019

; <label>:1019                                    ; preds = %968, %858
  %1020 = phi float [ 0.000000e+00, %858 ], [ %1017, %968 ]
  %1021 = phi float [ 0.000000e+00, %858 ], [ %1005, %968 ]
  %1022 = phi float [ 0.000000e+00, %858 ], [ %993, %968 ]
  %1023 = phi float [ 0.000000e+00, %858 ], [ %1018, %968 ]
  %1024 = phi float [ 0.000000e+00, %858 ], [ %1006, %968 ]
  %1025 = phi float [ 0.000000e+00, %858 ], [ %994, %968 ]
  %1026 = lshr i32 %315, 8
  %1027 = and i32 %1026, 15
  %1028 = lshr i32 %315, 12
  %1029 = and i32 %1028, 15
  %1030 = add nuw nsw i32 %874, %1027
  %1031 = add nsw i32 %1030, %880
  %1032 = lshr i32 %897, %1030
  %1033 = icmp ne i32 %1030, 0
  %1034 = sub nsw i32 0, %1030
  %1035 = and i32 %1034, 31
  %1036 = shl i32 %901, %1035
  %1037 = select i1 %1033, i32 %1036, i32 0
  %1038 = or i32 %1037, %1032
  %1039 = lshr i32 %901, %1030
  %1040 = shl i32 %905, %1035
  %1041 = select i1 %1033, i32 %1040, i32 0
  %1042 = or i32 %1041, %1039
  %1043 = add nsw i32 %1030, %911
  %1044 = lshr i32 %928, %1030
  %1045 = icmp ne i32 %1030, 0
  %1046 = sub nsw i32 0, %1030
  %1047 = and i32 %1046, 31
  %1048 = shl i32 %932, %1047
  %1049 = select i1 %1045, i32 %1048, i32 0
  %1050 = or i32 %1049, %1044
  %1051 = lshr i32 %932, %1030
  %1052 = shl i32 %936, %1047
  %1053 = select i1 %1045, i32 %1052, i32 0
  %1054 = or i32 %1053, %1051
  %1055 = add nsw i32 %1030, %940
  %1056 = lshr i32 %957, %1030
  %1057 = icmp ne i32 %1030, 0
  %1058 = sub nsw i32 0, %1030
  %1059 = and i32 %1058, 31
  %1060 = shl i32 %961, %1059
  %1061 = select i1 %1057, i32 %1060, i32 0
  %1062 = or i32 %1061, %1056
  %1063 = lshr i32 %961, %1030
  %1064 = shl i32 %965, %1059
  %1065 = select i1 %1057, i32 %1064, i32 0
  %1066 = or i32 %1065, %1063
  %1067 = lshr i32 %315, 16
  %1068 = and i32 %1067, 15
  %1069 = lshr i32 %315, 20
  %1070 = and i32 %1069, 15
  %1071 = add nuw nsw i32 %1029, %1068
  %1072 = add nsw i32 %1071, %1031
  %1073 = lshr i32 %1038, %1071
  %1074 = icmp ne i32 %1071, 0
  %1075 = sub nsw i32 0, %1071
  %1076 = and i32 %1075, 31
  %1077 = shl i32 %1042, %1076
  %1078 = select i1 %1074, i32 %1077, i32 0
  %1079 = or i32 %1078, %1073
  %1080 = add nsw i32 %1071, %1043
  %1081 = lshr i32 %1050, %1071
  %1082 = icmp ne i32 %1071, 0
  %1083 = sub nsw i32 0, %1071
  %1084 = and i32 %1083, 31
  %1085 = shl i32 %1054, %1084
  %1086 = select i1 %1082, i32 %1085, i32 0
  %1087 = or i32 %1086, %1081
  %1088 = add nsw i32 %1071, %1055
  %1089 = lshr i32 %1062, %1071
  %1090 = icmp ne i32 %1071, 0
  %1091 = sub nsw i32 0, %1071
  %1092 = and i32 %1091, 31
  %1093 = shl i32 %1066, %1092
  %1094 = select i1 %1090, i32 %1093, i32 0
  %1095 = or i32 %1094, %1089
  %1096 = lshr i32 %315, 24
  %1097 = and i32 %1096, 15
  %1098 = lshr i32 %315, 28
  %1099 = lshr i32 %1079, %1070
  %1100 = shl i32 1, %1097
  %1101 = add i32 %1100, -1
  %1102 = and i32 %1099, %1101
  %1103 = add nuw nsw i32 %1070, %1097
  %1104 = add nsw i32 %1103, %1072
  %1105 = ashr i32 %1104, 5
  %1106 = shl nsw i32 %1105, 2
  %1107 = add i32 %1106, %505
  %1108 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1109 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1108, i32 %1107, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1110 = extractvalue %dx.types.ResRet.i32 %1109, 0
  %1111 = extractvalue %dx.types.ResRet.i32 %1109, 1
  %1112 = and i32 %1104, 31
  %1113 = lshr i32 %1110, %1112
  %1114 = icmp ne i32 %1112, 0
  %1115 = sub i32 0, %1104
  %1116 = and i32 %1115, 31
  %1117 = shl i32 %1111, %1116
  %1118 = select i1 %1114, i32 %1117, i32 0
  %1119 = or i32 %1118, %1113
  %1120 = shl i32 1, %1098
  %1121 = add i32 %1120, -1
  %1122 = and i32 %1119, %1121
  %1123 = lshr i32 %1087, %1070
  %1124 = and i32 %1123, %1101
  %1125 = add nsw i32 %1103, %1080
  %1126 = ashr i32 %1125, 5
  %1127 = shl nsw i32 %1126, 2
  %1128 = add i32 %1127, %505
  %1129 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1130 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1129, i32 %1128, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1131 = extractvalue %dx.types.ResRet.i32 %1130, 0
  %1132 = extractvalue %dx.types.ResRet.i32 %1130, 1
  %1133 = and i32 %1125, 31
  %1134 = lshr i32 %1131, %1133
  %1135 = icmp ne i32 %1133, 0
  %1136 = sub i32 0, %1125
  %1137 = and i32 %1136, 31
  %1138 = shl i32 %1132, %1137
  %1139 = select i1 %1135, i32 %1138, i32 0
  %1140 = or i32 %1139, %1134
  %1141 = and i32 %1140, %1121
  %1142 = lshr i32 %1095, %1070
  %1143 = and i32 %1142, %1101
  %1144 = add nsw i32 %1103, %1088
  %1145 = ashr i32 %1144, 5
  %1146 = shl nsw i32 %1145, 2
  %1147 = add i32 %1146, %505
  %1148 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1149 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1148, i32 %1147, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1150 = extractvalue %dx.types.ResRet.i32 %1149, 0
  %1151 = extractvalue %dx.types.ResRet.i32 %1149, 1
  %1152 = and i32 %1144, 31
  %1153 = lshr i32 %1150, %1152
  %1154 = icmp ne i32 %1152, 0
  %1155 = sub i32 0, %1144
  %1156 = and i32 %1155, 31
  %1157 = shl i32 %1151, %1156
  %1158 = select i1 %1154, i32 %1157, i32 0
  %1159 = or i32 %1158, %1153
  %1160 = and i32 %1159, %1121
  %1161 = icmp ugt i32 %334, 3
  br i1 %1161, label %1162, label %1214, !dx.controlflow.hints !90

; <label>:1162                                    ; preds = %1019
  %1163 = add i32 %504, 96
  %1164 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1165 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1164, i32 %1163, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1166 = extractvalue %dx.types.ResRet.i32 %1165, 0
  %1167 = extractvalue %dx.types.ResRet.i32 %1165, 1
  %1168 = extractvalue %dx.types.ResRet.i32 %1165, 2
  %1169 = extractvalue %dx.types.ResRet.i32 %1165, 3
  %1170 = add i32 %504, 112
  %1171 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1164, i32 %1170, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1172 = extractvalue %dx.types.ResRet.i32 %1171, 0
  %1173 = extractvalue %dx.types.ResRet.i32 %1171, 1
  %1174 = extractvalue %dx.types.ResRet.i32 %1171, 2
  %1175 = icmp ugt i32 %1102, %1168
  %1176 = icmp ugt i32 %1122, %1169
  %1177 = select i1 %1175, i32 %1172, i32 0
  %1178 = select i1 %1176, i32 %1173, i32 0
  %1179 = shl i32 %1174, 23
  %1180 = sub nsw i32 1065353216, %1179
  %1181 = bitcast i32 %1180 to float
  %1182 = add i32 %1166, %1102
  %1183 = add i32 %1182, %1177
  %1184 = add i32 %1167, %1122
  %1185 = add i32 %1184, %1178
  %1186 = sitofp i32 %1183 to float
  %1187 = sitofp i32 %1185 to float
  %1188 = fmul fast float %1186, %1181
  %1189 = fmul fast float %1187, %1181
  %1190 = icmp ugt i32 %1124, %1168
  %1191 = icmp ugt i32 %1141, %1169
  %1192 = select i1 %1190, i32 %1172, i32 0
  %1193 = select i1 %1191, i32 %1173, i32 0
  %1194 = add i32 %1166, %1124
  %1195 = add i32 %1194, %1192
  %1196 = add i32 %1167, %1141
  %1197 = add i32 %1196, %1193
  %1198 = sitofp i32 %1195 to float
  %1199 = sitofp i32 %1197 to float
  %1200 = fmul fast float %1198, %1181
  %1201 = fmul fast float %1199, %1181
  %1202 = icmp ugt i32 %1143, %1168
  %1203 = icmp ugt i32 %1160, %1169
  %1204 = select i1 %1202, i32 %1172, i32 0
  %1205 = select i1 %1203, i32 %1173, i32 0
  %1206 = add i32 %1166, %1143
  %1207 = add i32 %1206, %1204
  %1208 = add i32 %1167, %1160
  %1209 = add i32 %1208, %1205
  %1210 = sitofp i32 %1207 to float
  %1211 = sitofp i32 %1209 to float
  %1212 = fmul fast float %1210, %1181
  %1213 = fmul fast float %1211, %1181
  br label %1214

; <label>:1214                                    ; preds = %1162, %1019
  %1215 = phi float [ 0.000000e+00, %1019 ], [ %1212, %1162 ]
  %1216 = phi float [ 0.000000e+00, %1019 ], [ %1200, %1162 ]
  %1217 = phi float [ 0.000000e+00, %1019 ], [ %1188, %1162 ]
  %1218 = phi float [ 0.000000e+00, %1019 ], [ %1213, %1162 ]
  %1219 = phi float [ 0.000000e+00, %1019 ], [ %1201, %1162 ]
  %1220 = phi float [ 0.000000e+00, %1019 ], [ %1189, %1162 ]
  %1221 = fmul fast float %419, %234
  %1222 = call float @dx.op.tertiary.f32(i32 46, float %420, float %237, float %1221)  ; FMad(a,b,c)
  %1223 = call float @dx.op.tertiary.f32(i32 46, float %421, float %240, float %1222)  ; FMad(a,b,c)
  %1224 = fadd fast float %1223, %280
  %1225 = fmul fast float %419, %235
  %1226 = call float @dx.op.tertiary.f32(i32 46, float %420, float %238, float %1225)  ; FMad(a,b,c)
  %1227 = call float @dx.op.tertiary.f32(i32 46, float %421, float %241, float %1226)  ; FMad(a,b,c)
  %1228 = fadd fast float %1227, %282
  %1229 = fmul fast float %419, %236
  %1230 = call float @dx.op.tertiary.f32(i32 46, float %420, float %239, float %1229)  ; FMad(a,b,c)
  %1231 = call float @dx.op.tertiary.f32(i32 46, float %421, float %242, float %1230)  ; FMad(a,b,c)
  %1232 = fadd fast float %1231, %284
  %1233 = fmul fast float %1224, %80
  %1234 = call float @dx.op.tertiary.f32(i32 46, float %1228, float %82, float %1233)  ; FMad(a,b,c)
  %1235 = call float @dx.op.tertiary.f32(i32 46, float %1232, float %84, float %1234)  ; FMad(a,b,c)
  %1236 = fmul fast float %460, %234
  %1237 = call float @dx.op.tertiary.f32(i32 46, float %461, float %237, float %1236)  ; FMad(a,b,c)
  %1238 = call float @dx.op.tertiary.f32(i32 46, float %462, float %240, float %1237)  ; FMad(a,b,c)
  %1239 = fadd fast float %1238, %280
  %1240 = fmul fast float %460, %235
  %1241 = call float @dx.op.tertiary.f32(i32 46, float %461, float %238, float %1240)  ; FMad(a,b,c)
  %1242 = call float @dx.op.tertiary.f32(i32 46, float %462, float %241, float %1241)  ; FMad(a,b,c)
  %1243 = fadd fast float %1242, %282
  %1244 = fmul fast float %460, %236
  %1245 = call float @dx.op.tertiary.f32(i32 46, float %461, float %239, float %1244)  ; FMad(a,b,c)
  %1246 = call float @dx.op.tertiary.f32(i32 46, float %462, float %242, float %1245)  ; FMad(a,b,c)
  %1247 = fadd fast float %1246, %284
  %1248 = fmul fast float %1239, %80
  %1249 = call float @dx.op.tertiary.f32(i32 46, float %1243, float %82, float %1248)  ; FMad(a,b,c)
  %1250 = call float @dx.op.tertiary.f32(i32 46, float %1247, float %84, float %1249)  ; FMad(a,b,c)
  %1251 = fmul fast float %501, %234
  %1252 = call float @dx.op.tertiary.f32(i32 46, float %502, float %237, float %1251)  ; FMad(a,b,c)
  %1253 = call float @dx.op.tertiary.f32(i32 46, float %503, float %240, float %1252)  ; FMad(a,b,c)
  %1254 = fadd fast float %1253, %280
  %1255 = fmul fast float %501, %235
  %1256 = call float @dx.op.tertiary.f32(i32 46, float %502, float %238, float %1255)  ; FMad(a,b,c)
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %503, float %241, float %1256)  ; FMad(a,b,c)
  %1258 = fadd fast float %1257, %282
  %1259 = fmul fast float %501, %236
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %502, float %239, float %1259)  ; FMad(a,b,c)
  %1261 = call float @dx.op.tertiary.f32(i32 46, float %503, float %242, float %1260)  ; FMad(a,b,c)
  %1262 = fadd fast float %1261, %284
  %1263 = fmul fast float %1254, %80
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1258, float %82, float %1263)  ; FMad(a,b,c)
  %1265 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %84, float %1264)  ; FMad(a,b,c)
  %1266 = fsub fast float %64, %139
  %1267 = fsub fast float %65, %140
  %1268 = fsub fast float %66, %141
  %1269 = fmul fast float %1266, 2.097152e+06
  %1270 = fmul fast float %1267, 2.097152e+06
  %1271 = fmul fast float %1268, 2.097152e+06
  %1272 = fsub fast float %1269, %68
  %1273 = fsub fast float %1270, %69
  %1274 = fsub fast float %1271, %70
  %1275 = fmul fast float %250, %1272
  %1276 = call float @dx.op.tertiary.f32(i32 46, float %1273, float %251, float %1275)  ; FMad(a,b,c)
  %1277 = call float @dx.op.tertiary.f32(i32 46, float %1274, float %252, float %1276)  ; FMad(a,b,c)
  %1278 = fadd fast float %1277, %266
  %1279 = fmul fast float %254, %1272
  %1280 = call float @dx.op.tertiary.f32(i32 46, float %1273, float %255, float %1279)  ; FMad(a,b,c)
  %1281 = call float @dx.op.tertiary.f32(i32 46, float %1274, float %256, float %1280)  ; FMad(a,b,c)
  %1282 = fadd fast float %1281, %269
  %1283 = fmul fast float %258, %1272
  %1284 = call float @dx.op.tertiary.f32(i32 46, float %1273, float %259, float %1283)  ; FMad(a,b,c)
  %1285 = call float @dx.op.tertiary.f32(i32 46, float %1274, float %260, float %1284)  ; FMad(a,b,c)
  %1286 = fadd fast float %1285, %272
  %1287 = fmul fast float %88, %58
  %1288 = call float @dx.op.tertiary.f32(i32 46, float %59, float %93, float %1287)  ; FMad(a,b,c)
  %1289 = call float @dx.op.tertiary.f32(i32 46, float %116, float %98, float %1288)  ; FMad(a,b,c)
  %1290 = call float @dx.op.tertiary.f32(i32 46, float %60, float %103, float %1289)  ; FMad(a,b,c)
  %1291 = fmul fast float %89, %58
  %1292 = call float @dx.op.tertiary.f32(i32 46, float %59, float %94, float %1291)  ; FMad(a,b,c)
  %1293 = call float @dx.op.tertiary.f32(i32 46, float %116, float %99, float %1292)  ; FMad(a,b,c)
  %1294 = call float @dx.op.tertiary.f32(i32 46, float %60, float %104, float %1293)  ; FMad(a,b,c)
  %1295 = fmul fast float %90, %58
  %1296 = call float @dx.op.tertiary.f32(i32 46, float %59, float %95, float %1295)  ; FMad(a,b,c)
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %116, float %100, float %1296)  ; FMad(a,b,c)
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %60, float %105, float %1297)  ; FMad(a,b,c)
  %1299 = fmul fast float %91, %58
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %59, float %96, float %1299)  ; FMad(a,b,c)
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %116, float %101, float %1300)  ; FMad(a,b,c)
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %60, float %106, float %1301)  ; FMad(a,b,c)
  %1303 = fmul fast float %1290, %250
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %1294, float %251, float %1303)  ; FMad(a,b,c)
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %1298, float %252, float %1304)  ; FMad(a,b,c)
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %1302, float %1278, float %1305)  ; FMad(a,b,c)
  %1307 = fmul fast float %1290, %254
  %1308 = call float @dx.op.tertiary.f32(i32 46, float %1294, float %255, float %1307)  ; FMad(a,b,c)
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %1298, float %256, float %1308)  ; FMad(a,b,c)
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %1302, float %1282, float %1309)  ; FMad(a,b,c)
  %1311 = fmul fast float %1290, %258
  %1312 = call float @dx.op.tertiary.f32(i32 46, float %1294, float %259, float %1311)  ; FMad(a,b,c)
  %1313 = call float @dx.op.tertiary.f32(i32 46, float %1298, float %260, float %1312)  ; FMad(a,b,c)
  %1314 = call float @dx.op.tertiary.f32(i32 46, float %1302, float %1286, float %1313)  ; FMad(a,b,c)
  %1315 = fmul fast float %250, %88
  %1316 = call float @dx.op.tertiary.f32(i32 46, float %89, float %251, float %1315)  ; FMad(a,b,c)
  %1317 = call float @dx.op.tertiary.f32(i32 46, float %90, float %252, float %1316)  ; FMad(a,b,c)
  %1318 = fmul fast float %254, %88
  %1319 = call float @dx.op.tertiary.f32(i32 46, float %89, float %255, float %1318)  ; FMad(a,b,c)
  %1320 = call float @dx.op.tertiary.f32(i32 46, float %90, float %256, float %1319)  ; FMad(a,b,c)
  %1321 = call float @dx.op.tertiary.f32(i32 46, float %91, float %1282, float %1320)  ; FMad(a,b,c)
  %1322 = fmul fast float %258, %88
  %1323 = call float @dx.op.tertiary.f32(i32 46, float %89, float %259, float %1322)  ; FMad(a,b,c)
  %1324 = call float @dx.op.tertiary.f32(i32 46, float %90, float %260, float %1323)  ; FMad(a,b,c)
  %1325 = call float @dx.op.tertiary.f32(i32 46, float %91, float %1286, float %1324)  ; FMad(a,b,c)
  %1326 = fmul fast float %250, %93
  %1327 = call float @dx.op.tertiary.f32(i32 46, float %94, float %251, float %1326)  ; FMad(a,b,c)
  %1328 = call float @dx.op.tertiary.f32(i32 46, float %95, float %252, float %1327)  ; FMad(a,b,c)
  %1329 = call float @dx.op.tertiary.f32(i32 46, float %96, float %1278, float %1328)  ; FMad(a,b,c)
  %1330 = fmul fast float %254, %93
  %1331 = call float @dx.op.tertiary.f32(i32 46, float %94, float %255, float %1330)  ; FMad(a,b,c)
  %1332 = call float @dx.op.tertiary.f32(i32 46, float %95, float %256, float %1331)  ; FMad(a,b,c)
  %1333 = fmul fast float %258, %93
  %1334 = call float @dx.op.tertiary.f32(i32 46, float %94, float %259, float %1333)  ; FMad(a,b,c)
  %1335 = call float @dx.op.tertiary.f32(i32 46, float %95, float %260, float %1334)  ; FMad(a,b,c)
  %1336 = call float @dx.op.tertiary.f32(i32 46, float %96, float %1286, float %1335)  ; FMad(a,b,c)
  %1337 = fadd fast float %1329, %1306
  %1338 = fadd fast float %1336, %1314
  %1339 = fdiv fast float %1337, %1302
  %1340 = fdiv fast float %1338, %1302
  %1341 = fadd fast float %1321, %1310
  %1342 = fadd fast float %1325, %1314
  %1343 = fdiv fast float %1341, %1302
  %1344 = fdiv fast float %1306, %1302
  %1345 = fdiv fast float %1310, %1302
  %1346 = fdiv fast float %1314, %1302
  br label %1347

; <label>:1347                                    ; preds = %1347, %1214
  %1348 = phi float [ %501, %1214 ], [ %1460, %1347 ]
  %1349 = phi float [ %502, %1214 ], [ %1461, %1347 ]
  %1350 = phi float [ %503, %1214 ], [ %1462, %1347 ]
  %1351 = phi float [ %460, %1214 ], [ %1454, %1347 ]
  %1352 = phi float [ %461, %1214 ], [ %1455, %1347 ]
  %1353 = phi float [ %462, %1214 ], [ %1456, %1347 ]
  %1354 = phi float [ %419, %1214 ], [ %1448, %1347 ]
  %1355 = phi float [ %420, %1214 ], [ %1449, %1347 ]
  %1356 = phi float [ %421, %1214 ], [ %1450, %1347 ]
  %1357 = phi i32 [ 0, %1214 ], [ %1463, %1347 ]
  %1358 = fsub fast float %1351, %1354
  %1359 = fsub fast float %1352, %1355
  %1360 = fsub fast float %1353, %1356
  %1361 = fsub fast float %1348, %1354
  %1362 = fsub fast float %1349, %1355
  %1363 = fsub fast float %1350, %1356
  %1364 = fsub fast float %1344, %1354
  %1365 = fsub fast float %1345, %1355
  %1366 = fsub fast float %1346, %1356
  %1367 = fmul fast float %1360, %1362
  %1368 = fmul fast float %1363, %1359
  %1369 = fsub fast float %1367, %1368
  %1370 = fmul fast float %1363, %1358
  %1371 = fmul fast float %1360, %1361
  %1372 = fsub fast float %1370, %1371
  %1373 = fmul fast float %1359, %1361
  %1374 = fmul fast float %1362, %1358
  %1375 = fsub fast float %1373, %1374
  %1376 = fmul fast float %1372, %1363
  %1377 = fmul fast float %1375, %1362
  %1378 = fsub fast float %1376, %1377
  %1379 = fmul fast float %1375, %1361
  %1380 = fmul fast float %1369, %1363
  %1381 = fsub fast float %1379, %1380
  %1382 = fmul fast float %1369, %1362
  %1383 = fmul fast float %1372, %1361
  %1384 = fsub fast float %1382, %1383
  %1385 = call float @dx.op.dot3.f32(i32 55, float %1358, float %1359, float %1360, float %1378, float %1381, float %1384)  ; Dot3(ax,ay,az,bx,by,bz)
  %1386 = fdiv fast float 1.000000e+00, %1385
  %1387 = call float @dx.op.dot3.f32(i32 55, float %1364, float %1365, float %1366, float %1378, float %1381, float %1384)  ; Dot3(ax,ay,az,bx,by,bz)
  %1388 = fmul fast float %1387, %1386
  %1389 = fmul fast float %1360, %1365
  %1390 = fmul fast float %1366, %1359
  %1391 = fsub fast float %1389, %1390
  %1392 = fmul fast float %1366, %1358
  %1393 = fmul fast float %1360, %1364
  %1394 = fsub fast float %1392, %1393
  %1395 = fmul fast float %1359, %1364
  %1396 = fmul fast float %1365, %1358
  %1397 = fsub fast float %1395, %1396
  %1398 = call float @dx.op.dot3.f32(i32 55, float %1369, float %1372, float %1375, float %1391, float %1394, float %1397)  ; Dot3(ax,ay,az,bx,by,bz)
  %1399 = fmul fast float %1398, %1386
  %1400 = fsub fast float 1.000000e+00, %1388
  %1401 = fsub fast float %1400, %1399
  %1402 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1401)  ; FMax(a,b)
  %1403 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1388)  ; FMax(a,b)
  %1404 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1399)  ; FMax(a,b)
  %1405 = call float @dx.op.dot3.f32(i32 55, float %1402, float %1403, float %1404, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %1406 = fdiv fast float %1402, %1405
  %1407 = fdiv fast float %1403, %1405
  %1408 = fdiv fast float %1404, %1405
  %1409 = fmul fast float %1406, %1354
  %1410 = fmul fast float %1406, %1355
  %1411 = fmul fast float %1406, %1356
  %1412 = fmul fast float %1407, %1351
  %1413 = fmul fast float %1407, %1352
  %1414 = fmul fast float %1407, %1353
  %1415 = fmul fast float %1408, %1348
  %1416 = fmul fast float %1408, %1349
  %1417 = fmul fast float %1408, %1350
  %1418 = fmul fast float %1406, %570
  %1419 = fmul fast float %1406, %571
  %1420 = fmul fast float %1406, %572
  %1421 = fmul fast float %1407, %694
  %1422 = fmul fast float %1407, %695
  %1423 = fmul fast float %1407, %696
  %1424 = fadd fast float %1421, %1418
  %1425 = fadd fast float %1422, %1419
  %1426 = fadd fast float %1423, %1420
  %1427 = fmul fast float %1408, %808
  %1428 = fmul fast float %1408, %809
  %1429 = fmul fast float %1408, %810
  %1430 = fadd fast float %1424, %1427
  %1431 = fadd fast float %1425, %1428
  %1432 = fadd fast float %1426, %1429
  %1433 = fsub fast float %1344, %1409
  %1434 = fsub fast float %1433, %1412
  %1435 = fsub fast float %1434, %1415
  %1436 = fsub fast float %1345, %1410
  %1437 = fsub fast float %1436, %1413
  %1438 = fsub fast float %1437, %1416
  %1439 = fsub fast float %1346, %1411
  %1440 = fsub fast float %1439, %1414
  %1441 = fsub fast float %1440, %1417
  %1442 = call float @dx.op.dot3.f32(i32 55, float %1435, float %1438, float %1441, float %1430, float %1431, float %1432)  ; Dot3(ax,ay,az,bx,by,bz)
  %1443 = call float @dx.op.dot3.f32(i32 55, float %1430, float %1431, float %1432, float %1430, float %1431, float %1432)  ; Dot3(ax,ay,az,bx,by,bz)
  %1444 = fdiv fast float %1442, %1443
  %1445 = fmul fast float %1444, %570
  %1446 = fmul fast float %1444, %571
  %1447 = fmul fast float %1444, %572
  %1448 = fadd fast float %1445, %1354
  %1449 = fadd fast float %1446, %1355
  %1450 = fadd fast float %1447, %1356
  %1451 = fmul fast float %1444, %694
  %1452 = fmul fast float %1444, %695
  %1453 = fmul fast float %1444, %696
  %1454 = fadd fast float %1451, %1351
  %1455 = fadd fast float %1452, %1352
  %1456 = fadd fast float %1453, %1353
  %1457 = fmul fast float %1444, %808
  %1458 = fmul fast float %1444, %809
  %1459 = fmul fast float %1444, %810
  %1460 = fadd fast float %1457, %1348
  %1461 = fadd fast float %1458, %1349
  %1462 = fadd fast float %1459, %1350
  %1463 = add nuw nsw i32 %1357, 1
  %1464 = icmp eq i32 %1463, 2
  br i1 %1464, label %1465, label %1347

; <label>:1465                                    ; preds = %1347
  %1466 = fadd fast float %1235, %86
  %1467 = fadd fast float %1250, %86
  %1468 = fadd fast float %1265, %86
  %1469 = call float @dx.op.tertiary.f32(i32 46, float %91, float %1278, float %1317)  ; FMad(a,b,c)
  %1470 = call float @dx.op.tertiary.f32(i32 46, float %96, float %1282, float %1332)  ; FMad(a,b,c)
  %1471 = fadd fast float %1470, %1310
  %1472 = fdiv fast float %1471, %1302
  %1473 = fadd fast float %1469, %1306
  %1474 = fdiv fast float %1473, %1302
  %1475 = fdiv fast float %1342, %1302
  %1476 = fsub fast float %1454, %1448
  %1477 = fsub fast float %1455, %1449
  %1478 = fsub fast float %1456, %1450
  %1479 = fsub fast float %1460, %1448
  %1480 = fsub fast float %1461, %1449
  %1481 = fsub fast float %1462, %1450
  %1482 = fsub fast float %1344, %1448
  %1483 = fsub fast float %1345, %1449
  %1484 = fsub fast float %1346, %1450
  %1485 = fmul fast float %1480, %1478
  %1486 = fmul fast float %1481, %1477
  %1487 = fsub fast float %1485, %1486
  %1488 = fmul fast float %1481, %1476
  %1489 = fmul fast float %1479, %1478
  %1490 = fsub fast float %1488, %1489
  %1491 = fmul fast float %1479, %1477
  %1492 = fmul fast float %1480, %1476
  %1493 = fsub fast float %1491, %1492
  %1494 = fmul fast float %1490, %1481
  %1495 = fmul fast float %1493, %1480
  %1496 = fsub fast float %1494, %1495
  %1497 = fmul fast float %1493, %1479
  %1498 = fmul fast float %1487, %1481
  %1499 = fsub fast float %1497, %1498
  %1500 = fmul fast float %1487, %1480
  %1501 = fmul fast float %1490, %1479
  %1502 = fsub fast float %1500, %1501
  %1503 = call float @dx.op.dot3.f32(i32 55, float %1476, float %1477, float %1478, float %1496, float %1499, float %1502)  ; Dot3(ax,ay,az,bx,by,bz)
  %1504 = fdiv fast float 1.000000e+00, %1503
  %1505 = call float @dx.op.dot3.f32(i32 55, float %1482, float %1483, float %1484, float %1496, float %1499, float %1502)  ; Dot3(ax,ay,az,bx,by,bz)
  %1506 = fmul fast float %1505, %1504
  %1507 = fmul fast float %1483, %1478
  %1508 = fmul fast float %1484, %1477
  %1509 = fsub fast float %1507, %1508
  %1510 = fmul fast float %1484, %1476
  %1511 = fmul fast float %1482, %1478
  %1512 = fsub fast float %1510, %1511
  %1513 = fmul fast float %1482, %1477
  %1514 = fmul fast float %1483, %1476
  %1515 = fsub fast float %1513, %1514
  %1516 = call float @dx.op.dot3.f32(i32 55, float %1487, float %1490, float %1493, float %1509, float %1512, float %1515)  ; Dot3(ax,ay,az,bx,by,bz)
  %1517 = fmul fast float %1516, %1504
  %1518 = fsub fast float 1.000000e+00, %1506
  %1519 = fsub fast float %1518, %1517
  %1520 = fsub fast float %1474, %1448
  %1521 = fsub fast float %1343, %1449
  %1522 = fsub fast float %1475, %1450
  %1523 = call float @dx.op.dot3.f32(i32 55, float %1520, float %1521, float %1522, float %1496, float %1499, float %1502)  ; Dot3(ax,ay,az,bx,by,bz)
  %1524 = fmul fast float %1521, %1478
  %1525 = fmul fast float %1522, %1477
  %1526 = fsub fast float %1524, %1525
  %1527 = fmul fast float %1522, %1476
  %1528 = fmul fast float %1520, %1478
  %1529 = fsub fast float %1527, %1528
  %1530 = fmul fast float %1520, %1477
  %1531 = fmul fast float %1521, %1476
  %1532 = fsub fast float %1530, %1531
  %1533 = call float @dx.op.dot3.f32(i32 55, float %1487, float %1490, float %1493, float %1526, float %1529, float %1532)  ; Dot3(ax,ay,az,bx,by,bz)
  %1534 = fsub fast float %1523, %1505
  %1535 = fmul fast float %1504, %1534
  %1536 = fsub fast float %1533, %1516
  %1537 = fmul fast float %1504, %1536
  %1538 = fsub fast float %1339, %1448
  %1539 = fsub fast float %1472, %1449
  %1540 = fsub fast float %1340, %1450
  %1541 = call float @dx.op.dot3.f32(i32 55, float %1538, float %1539, float %1540, float %1496, float %1499, float %1502)  ; Dot3(ax,ay,az,bx,by,bz)
  %1542 = fmul fast float %1539, %1478
  %1543 = fmul fast float %1540, %1477
  %1544 = fsub fast float %1542, %1543
  %1545 = fmul fast float %1540, %1476
  %1546 = fmul fast float %1538, %1478
  %1547 = fsub fast float %1545, %1546
  %1548 = fmul fast float %1538, %1477
  %1549 = fmul fast float %1539, %1476
  %1550 = fsub fast float %1548, %1549
  %1551 = call float @dx.op.dot3.f32(i32 55, float %1487, float %1490, float %1493, float %1544, float %1547, float %1550)  ; Dot3(ax,ay,az,bx,by,bz)
  %1552 = fsub fast float %1541, %1505
  %1553 = fmul fast float %1504, %1552
  %1554 = fsub fast float %1551, %1516
  %1555 = fmul fast float %1504, %1554
  %1556 = fmul fast float %1519, %570
  %1557 = fmul fast float %1519, %571
  %1558 = fmul fast float %1519, %572
  %1559 = fmul fast float %1506, %694
  %1560 = fmul fast float %1506, %695
  %1561 = fmul fast float %1506, %696
  %1562 = fmul fast float %1517, %808
  %1563 = fmul fast float %1517, %809
  %1564 = fmul fast float %1517, %810
  %1565 = fadd fast float %1562, %1559
  %1566 = fadd fast float %1565, %1556
  %1567 = fadd fast float %1563, %1560
  %1568 = fadd fast float %1567, %1557
  %1569 = fadd fast float %1564, %1561
  %1570 = fadd fast float %1569, %1558
  %1571 = call float @dx.op.dot3.f32(i32 55, float %1566, float %1568, float %1570, float %1566, float %1568, float %1570)  ; Dot3(ax,ay,az,bx,by,bz)
  %1572 = call float @dx.op.unary.f32(i32 25, float %1571)  ; Rsqrt(value)
  %1573 = fmul fast float %1572, %1566
  %1574 = fmul fast float %1572, %1568
  %1575 = fmul fast float %1572, %1570
  br i1 %967, label %1576, label %1589

; <label>:1576                                    ; preds = %1465
  %1577 = fmul fast float %1573, %248
  %1578 = fmul fast float %1574, %248
  %1579 = fmul fast float %1575, %248
  %1580 = fmul fast float %1577, %234
  %1581 = call float @dx.op.tertiary.f32(i32 46, float %1578, float %237, float %1580)  ; FMad(a,b,c)
  %1582 = call float @dx.op.tertiary.f32(i32 46, float %1579, float %240, float %1581)  ; FMad(a,b,c)
  %1583 = fmul fast float %1577, %235
  %1584 = call float @dx.op.tertiary.f32(i32 46, float %1578, float %238, float %1583)  ; FMad(a,b,c)
  %1585 = call float @dx.op.tertiary.f32(i32 46, float %1579, float %241, float %1584)  ; FMad(a,b,c)
  %1586 = fmul fast float %1577, %236
  %1587 = call float @dx.op.tertiary.f32(i32 46, float %1578, float %239, float %1586)  ; FMad(a,b,c)
  %1588 = call float @dx.op.tertiary.f32(i32 46, float %1579, float %242, float %1587)  ; FMad(a,b,c)
  br label %1766

; <label>:1589                                    ; preds = %1465
  br i1 %332, label %1687, label %1590, !dx.controlflow.hints !91

; <label>:1590                                    ; preds = %1589
  %1591 = fsub fast float %457, %416
  %1592 = fmul fast float %412, %1591
  %1593 = fsub fast float %458, %417
  %1594 = fmul fast float %412, %1593
  %1595 = fsub fast float %459, %418
  %1596 = fmul fast float %412, %1595
  %1597 = fsub fast float %498, %416
  %1598 = fmul fast float %412, %1597
  %1599 = fsub fast float %499, %417
  %1600 = fmul fast float %412, %1599
  %1601 = fsub fast float %500, %418
  %1602 = fmul fast float %412, %1601
  %1603 = fsub fast float %1021, %1022
  %1604 = fsub fast float %1024, %1025
  %1605 = fsub fast float %1020, %1022
  %1606 = fsub fast float %1023, %1025
  %1607 = call float @dx.op.unary.f32(i32 6, float %1603)  ; FAbs(value)
  %1608 = call float @dx.op.unary.f32(i32 6, float %1605)  ; FAbs(value)
  %1609 = fadd fast float %1608, %1607
  %1610 = fcmp fast ogt float %1609, 0x3EB0C6F7A0000000
  br i1 %1610, label %1630, label %1611, !dx.controlflow.hints !92

; <label>:1611                                    ; preds = %1590
  %1612 = fcmp fast oge float %1575, 0.000000e+00
  %1613 = select i1 %1612, float 1.000000e+00, float -1.000000e+00
  %1614 = fadd fast float %1613, %1575
  %1615 = fdiv fast float 1.000000e+00, %1614
  %1616 = fsub fast float -0.000000e+00, %1615
  %1617 = fmul fast float %1573, %1574
  %1618 = fmul fast float %1617, %1616
  %1619 = fmul fast float %1573, %1573
  %1620 = fmul fast float %1619, %1613
  %1621 = fmul fast float %1620, %1616
  %1622 = fadd fast float %1621, 1.000000e+00
  %1623 = fmul fast float %1618, %1613
  %1624 = fmul fast float %1573, %1613
  %1625 = fsub fast float -0.000000e+00, %1624
  %1626 = fmul fast float %1574, %1574
  %1627 = fmul fast float %1626, %1616
  %1628 = fadd fast float %1627, %1613
  %1629 = fsub fast float -0.000000e+00, %1574
  br label %1720

; <label>:1630                                    ; preds = %1590
  %1631 = fmul fast float %1574, %1602
  %1632 = fmul fast float %1575, %1600
  %1633 = fsub fast float %1631, %1632
  %1634 = fmul fast float %1575, %1598
  %1635 = fmul fast float %1573, %1602
  %1636 = fsub fast float %1634, %1635
  %1637 = fmul fast float %1573, %1600
  %1638 = fmul fast float %1574, %1598
  %1639 = fsub fast float %1637, %1638
  %1640 = fmul fast float %1575, %1594
  %1641 = fmul fast float %1574, %1596
  %1642 = fsub fast float %1640, %1641
  %1643 = fmul fast float %1573, %1596
  %1644 = fmul fast float %1575, %1592
  %1645 = fsub fast float %1643, %1644
  %1646 = fmul fast float %1574, %1592
  %1647 = fmul fast float %1573, %1594
  %1648 = fsub fast float %1646, %1647
  %1649 = fmul fast float %1633, %1603
  %1650 = fmul fast float %1636, %1603
  %1651 = fmul fast float %1639, %1603
  %1652 = fmul fast float %1642, %1605
  %1653 = fmul fast float %1645, %1605
  %1654 = fmul fast float %1648, %1605
  %1655 = fadd fast float %1649, %1652
  %1656 = fadd fast float %1650, %1653
  %1657 = fadd fast float %1651, %1654
  %1658 = fmul fast float %1633, %1604
  %1659 = fmul fast float %1636, %1604
  %1660 = fmul fast float %1639, %1604
  %1661 = fmul fast float %1642, %1606
  %1662 = fmul fast float %1645, %1606
  %1663 = fmul fast float %1648, %1606
  %1664 = fadd fast float %1658, %1661
  %1665 = fadd fast float %1659, %1662
  %1666 = fadd fast float %1660, %1663
  %1667 = call float @dx.op.dot3.f32(i32 55, float %1655, float %1656, float %1657, float %1655, float %1656, float %1657)  ; Dot3(ax,ay,az,bx,by,bz)
  %1668 = call float @dx.op.unary.f32(i32 25, float %1667)  ; Rsqrt(value)
  %1669 = fmul fast float %1668, %1655
  %1670 = fmul fast float %1668, %1656
  %1671 = fmul fast float %1668, %1657
  %1672 = fmul fast float %1671, %1574
  %1673 = fmul fast float %1670, %1575
  %1674 = fsub fast float %1672, %1673
  %1675 = fmul fast float %1669, %1575
  %1676 = fmul fast float %1671, %1573
  %1677 = fsub fast float %1675, %1676
  %1678 = fmul fast float %1670, %1573
  %1679 = fmul fast float %1669, %1574
  %1680 = fsub fast float %1678, %1679
  %1681 = call float @dx.op.dot3.f32(i32 55, float %1664, float %1665, float %1666, float %1674, float %1677, float %1680)  ; Dot3(ax,ay,az,bx,by,bz)
  %1682 = fcmp fast olt float %1681, 0.000000e+00
  %1683 = select i1 %1682, float -1.000000e+00, float 1.000000e+00
  %1684 = fmul fast float %1674, %1683
  %1685 = fmul fast float %1677, %1683
  %1686 = fmul fast float %1680, %1683
  br label %1720

; <label>:1687                                    ; preds = %1589
  %1688 = fmul fast float %1519, %628
  %1689 = fmul fast float %1519, %629
  %1690 = fmul fast float %1519, %630
  %1691 = fmul fast float %1519, %631
  %1692 = fmul fast float %1506, %745
  %1693 = fmul fast float %1506, %746
  %1694 = fmul fast float %1506, %747
  %1695 = fmul fast float %1506, %748
  %1696 = fmul fast float %1517, %859
  %1697 = fmul fast float %1517, %860
  %1698 = fmul fast float %1517, %861
  %1699 = fmul fast float %1517, %862
  %1700 = fadd fast float %1696, %1692
  %1701 = fadd fast float %1700, %1688
  %1702 = fadd fast float %1697, %1693
  %1703 = fadd fast float %1702, %1689
  %1704 = fadd fast float %1698, %1694
  %1705 = fadd fast float %1704, %1690
  %1706 = fadd fast float %1699, %1695
  %1707 = fadd fast float %1706, %1691
  %1708 = fmul fast float %1568, %1705
  %1709 = fmul fast float %1570, %1703
  %1710 = fsub fast float %1708, %1709
  %1711 = fmul fast float %1570, %1701
  %1712 = fmul fast float %1566, %1705
  %1713 = fsub fast float %1711, %1712
  %1714 = fmul fast float %1566, %1703
  %1715 = fmul fast float %1568, %1701
  %1716 = fsub fast float %1714, %1715
  %1717 = fmul fast float %1710, %1707
  %1718 = fmul fast float %1713, %1707
  %1719 = fmul fast float %1716, %1707
  br label %1720

; <label>:1720                                    ; preds = %1687, %1630, %1611
  %1721 = phi float [ %1701, %1687 ], [ %1669, %1630 ], [ %1622, %1611 ]
  %1722 = phi float [ %1703, %1687 ], [ %1670, %1630 ], [ %1623, %1611 ]
  %1723 = phi float [ %1705, %1687 ], [ %1671, %1630 ], [ %1625, %1611 ]
  %1724 = phi float [ %1717, %1687 ], [ %1684, %1630 ], [ %1618, %1611 ]
  %1725 = phi float [ %1718, %1687 ], [ %1685, %1630 ], [ %1628, %1611 ]
  %1726 = phi float [ %1719, %1687 ], [ %1686, %1630 ], [ %1629, %1611 ]
  %1727 = phi float [ %1566, %1687 ], [ %1573, %1630 ], [ %1573, %1611 ]
  %1728 = phi float [ %1568, %1687 ], [ %1574, %1630 ], [ %1574, %1611 ]
  %1729 = phi float [ %1570, %1687 ], [ %1575, %1630 ], [ %1575, %1611 ]
  %1730 = fmul fast float %234, %246
  %1731 = fmul fast float %235, %246
  %1732 = fmul fast float %236, %246
  %1733 = fmul fast float %237, %247
  %1734 = fmul fast float %238, %247
  %1735 = fmul fast float %239, %247
  %1736 = fmul fast float %248, %240
  %1737 = fmul fast float %248, %241
  %1738 = fmul fast float %248, %242
  %1739 = fmul fast float %1721, %1730
  %1740 = call float @dx.op.tertiary.f32(i32 46, float %1722, float %1733, float %1739)  ; FMad(a,b,c)
  %1741 = call float @dx.op.tertiary.f32(i32 46, float %1723, float %1736, float %1740)  ; FMad(a,b,c)
  %1742 = fmul fast float %1721, %1731
  %1743 = call float @dx.op.tertiary.f32(i32 46, float %1722, float %1734, float %1742)  ; FMad(a,b,c)
  %1744 = call float @dx.op.tertiary.f32(i32 46, float %1723, float %1737, float %1743)  ; FMad(a,b,c)
  %1745 = fmul fast float %1721, %1732
  %1746 = call float @dx.op.tertiary.f32(i32 46, float %1722, float %1735, float %1745)  ; FMad(a,b,c)
  %1747 = call float @dx.op.tertiary.f32(i32 46, float %1723, float %1738, float %1746)  ; FMad(a,b,c)
  %1748 = fmul fast float %1724, %1730
  %1749 = call float @dx.op.tertiary.f32(i32 46, float %1725, float %1733, float %1748)  ; FMad(a,b,c)
  %1750 = call float @dx.op.tertiary.f32(i32 46, float %1726, float %1736, float %1749)  ; FMad(a,b,c)
  %1751 = fmul fast float %1724, %1731
  %1752 = call float @dx.op.tertiary.f32(i32 46, float %1725, float %1734, float %1751)  ; FMad(a,b,c)
  %1753 = call float @dx.op.tertiary.f32(i32 46, float %1726, float %1737, float %1752)  ; FMad(a,b,c)
  %1754 = fmul fast float %1724, %1732
  %1755 = call float @dx.op.tertiary.f32(i32 46, float %1725, float %1735, float %1754)  ; FMad(a,b,c)
  %1756 = call float @dx.op.tertiary.f32(i32 46, float %1726, float %1738, float %1755)  ; FMad(a,b,c)
  %1757 = fmul fast float %1727, %1730
  %1758 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %1733, float %1757)  ; FMad(a,b,c)
  %1759 = call float @dx.op.tertiary.f32(i32 46, float %1729, float %1736, float %1758)  ; FMad(a,b,c)
  %1760 = fmul fast float %1727, %1731
  %1761 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %1734, float %1760)  ; FMad(a,b,c)
  %1762 = call float @dx.op.tertiary.f32(i32 46, float %1729, float %1737, float %1761)  ; FMad(a,b,c)
  %1763 = fmul fast float %1727, %1732
  %1764 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %1735, float %1763)  ; FMad(a,b,c)
  %1765 = call float @dx.op.tertiary.f32(i32 46, float %1729, float %1738, float %1764)  ; FMad(a,b,c)
  br label %1766

; <label>:1766                                    ; preds = %1720, %1576
  %1767 = phi float [ %1741, %1720 ], [ 0.000000e+00, %1576 ]
  %1768 = phi float [ %1744, %1720 ], [ 0.000000e+00, %1576 ]
  %1769 = phi float [ %1747, %1720 ], [ 0.000000e+00, %1576 ]
  %1770 = phi float [ %1750, %1720 ], [ 0.000000e+00, %1576 ]
  %1771 = phi float [ %1753, %1720 ], [ 0.000000e+00, %1576 ]
  %1772 = phi float [ %1756, %1720 ], [ 0.000000e+00, %1576 ]
  %1773 = phi float [ %1759, %1720 ], [ %1582, %1576 ]
  %1774 = phi float [ %1762, %1720 ], [ %1585, %1576 ]
  %1775 = phi float [ %1765, %1720 ], [ %1588, %1576 ]
  %1776 = fsub fast float %1021, %1022
  %1777 = fsub fast float %1024, %1025
  %1778 = fsub fast float %1020, %1022
  %1779 = fsub fast float %1023, %1025
  %1780 = fmul fast float %1506, %1776
  %1781 = fmul fast float %1506, %1777
  %1782 = fadd fast float %1780, %1022
  %1783 = fadd fast float %1781, %1025
  %1784 = fmul fast float %1517, %1778
  %1785 = fmul fast float %1517, %1779
  %1786 = fadd fast float %1782, %1784
  %1787 = fadd fast float %1783, %1785
  %1788 = fmul fast float %1535, %1776
  %1789 = fmul fast float %1535, %1777
  %1790 = fmul fast float %1537, %1778
  %1791 = fmul fast float %1537, %1779
  %1792 = fadd fast float %1790, %1788
  %1793 = fadd fast float %1791, %1789
  %1794 = fmul fast float %1553, %1776
  %1795 = fmul fast float %1553, %1777
  %1796 = fmul fast float %1555, %1778
  %1797 = fmul fast float %1555, %1779
  %1798 = fadd fast float %1796, %1794
  %1799 = fadd fast float %1797, %1795
  %1800 = fsub fast float %1216, %1217
  %1801 = fsub fast float %1219, %1220
  %1802 = fsub fast float %1215, %1217
  %1803 = fsub fast float %1218, %1220
  %1804 = fmul fast float %1506, %1800
  %1805 = fmul fast float %1506, %1801
  %1806 = fadd fast float %1804, %1217
  %1807 = fadd fast float %1805, %1220
  %1808 = fmul fast float %1517, %1802
  %1809 = fmul fast float %1517, %1803
  %1810 = fadd fast float %1806, %1808
  %1811 = fadd fast float %1807, %1809
  %1812 = fmul fast float %1535, %1800
  %1813 = fmul fast float %1535, %1801
  %1814 = fmul fast float %1537, %1802
  %1815 = fmul fast float %1537, %1803
  %1816 = fadd fast float %1814, %1812
  %1817 = fadd fast float %1815, %1813
  %1818 = fmul fast float %1553, %1800
  %1819 = fmul fast float %1553, %1801
  %1820 = fmul fast float %1555, %1802
  %1821 = fmul fast float %1555, %1803
  %1822 = fadd fast float %1820, %1818
  %1823 = fadd fast float %1821, %1819
  %1824 = fmul fast float %1519, %1224
  %1825 = fmul fast float %1519, %1228
  %1826 = fmul fast float %1519, %1232
  %1827 = fmul fast float %1506, %1239
  %1828 = fmul fast float %1506, %1243
  %1829 = fmul fast float %1506, %1247
  %1830 = fmul fast float %1517, %1254
  %1831 = fmul fast float %1517, %1258
  %1832 = fmul fast float %1517, %1262
  %1833 = fadd fast float %1830, %1827
  %1834 = fadd fast float %1833, %1824
  %1835 = fadd fast float %1831, %1828
  %1836 = fadd fast float %1835, %1825
  %1837 = fadd fast float %1832, %1829
  %1838 = fadd fast float %1837, %1826
  %1839 = fmul fast float %1519, %1466
  %1840 = fmul fast float %1506, %1467
  %1841 = fmul fast float %1517, %1468
  %1842 = fadd fast float %1841, %1840
  %1843 = fadd fast float %1842, %1839
  %1844 = fmul float %1786, 5.000000e-01
  %1845 = fmul float %1787, 5.000000e-01
  %1846 = fmul float %1792, 5.000000e-01
  %1847 = fmul float %1793, 5.000000e-01
  %1848 = fmul float %1798, 5.000000e-01
  %1849 = fmul float %1799, 5.000000e-01
  br label %1850

; <label>:1850                                    ; preds = %1766, %0
  %1851 = phi float [ %1847, %1766 ], [ 0.000000e+00, %0 ]
  %1852 = phi float [ %1817, %1766 ], [ 0.000000e+00, %0 ]
  %1853 = phi float [ %1846, %1766 ], [ 0.000000e+00, %0 ]
  %1854 = phi float [ %1816, %1766 ], [ 0.000000e+00, %0 ]
  %1855 = phi float [ %1849, %1766 ], [ 0.000000e+00, %0 ]
  %1856 = phi float [ %1823, %1766 ], [ 0.000000e+00, %0 ]
  %1857 = phi float [ %1848, %1766 ], [ 0.000000e+00, %0 ]
  %1858 = phi float [ %1822, %1766 ], [ 0.000000e+00, %0 ]
  %1859 = phi float [ %1845, %1766 ], [ 0.000000e+00, %0 ]
  %1860 = phi float [ %1811, %1766 ], [ 0.000000e+00, %0 ]
  %1861 = phi float [ %1844, %1766 ], [ 0.000000e+00, %0 ]
  %1862 = phi float [ %1810, %1766 ], [ 0.000000e+00, %0 ]
  %1863 = phi float [ %1767, %1766 ], [ 1.000000e+00, %0 ]
  %1864 = phi float [ %1768, %1766 ], [ 0.000000e+00, %0 ]
  %1865 = phi float [ %1769, %1766 ], [ 0.000000e+00, %0 ]
  %1866 = phi float [ %1770, %1766 ], [ 0.000000e+00, %0 ]
  %1867 = phi float [ %1771, %1766 ], [ 1.000000e+00, %0 ]
  %1868 = phi float [ %1772, %1766 ], [ 0.000000e+00, %0 ]
  %1869 = phi float [ %1773, %1766 ], [ 0.000000e+00, %0 ]
  %1870 = phi float [ %1774, %1766 ], [ 0.000000e+00, %0 ]
  %1871 = phi float [ %1775, %1766 ], [ 1.000000e+00, %0 ]
  %1872 = phi float [ %1834, %1766 ], [ 0.000000e+00, %0 ]
  %1873 = phi float [ %1836, %1766 ], [ 0.000000e+00, %0 ]
  %1874 = phi float [ %1838, %1766 ], [ 0.000000e+00, %0 ]
  %1875 = phi i32 [ %135, %1766 ], [ 0, %0 ]
  %1876 = phi float [ %1843, %1766 ], [ %60, %0 ]
  %1877 = fsub fast float %1872, %68
  %1878 = fsub fast float %1873, %69
  %1879 = fsub fast float %1874, %70
  %1880 = fptoui float %58 to i32
  %1881 = fptoui float %59 to i32
  %1882 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %1883 = extractvalue %dx.types.CBufRet.i32 %1882, 1
  %1884 = and i32 %1883, 31
  %1885 = lshr i32 %1880, %1884
  %1886 = lshr i32 %1881, %1884
  %1887 = extractvalue %dx.types.CBufRet.i32 %1882, 3
  %1888 = mul i32 %1886, %1887
  %1889 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 239)  ; CBufferLoadLegacy(handle,regIndex)
  %1890 = extractvalue %dx.types.CBufRet.i32 %1889, 1
  %1891 = add i32 %1890, %1885
  %1892 = add i32 %1891, %1888
  %1893 = and i32 %1892, 1
  %1894 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1895 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1896 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1894, %dx.types.Handle %1895, float %1862, float %1860, float undef, float undef, i32 0, i32 0, i32 undef, float %1854, float %1852, float undef, float %1858, float %1856, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1897 = extractvalue %dx.types.ResRet.f32 %1896, 0
  %1898 = extractvalue %dx.types.ResRet.f32 %1896, 1
  %1899 = extractvalue %dx.types.ResRet.f32 %1896, 2
  %1900 = extractvalue %dx.types.ResRet.f32 %1896, 3
  %1901 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %1902 = extractvalue %dx.types.CBufRet.f32 %1901, 0
  %1903 = extractvalue %dx.types.CBufRet.f32 %1901, 1
  %1904 = extractvalue %dx.types.CBufRet.f32 %1901, 2
  %1905 = extractvalue %dx.types.CBufRet.f32 %1901, 3
  %1906 = call float @dx.op.dot4.f32(i32 56, float %1897, float %1898, float %1899, float %1900, float %1902, float %1903, float %1904, float %1905)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1907 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %1908 = extractvalue %dx.types.CBufRet.f32 %1907, 0
  %1909 = extractvalue %dx.types.CBufRet.f32 %1907, 1
  %1910 = extractvalue %dx.types.CBufRet.f32 %1907, 2
  %1911 = extractvalue %dx.types.CBufRet.f32 %1907, 3
  %1912 = call float @dx.op.dot4.f32(i32 56, float %1897, float %1898, float %1899, float %1900, float %1908, float %1909, float %1910, float %1911)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1913 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1914 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1913, %dx.types.Handle %1895, float %1862, float %1860, float undef, float undef, i32 0, i32 0, i32 undef, float %1854, float %1852, float undef, float %1858, float %1856, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1915 = extractvalue %dx.types.ResRet.f32 %1914, 0
  %1916 = extractvalue %dx.types.ResRet.f32 %1914, 1
  %1917 = extractvalue %dx.types.ResRet.f32 %1914, 2
  %1918 = extractvalue %dx.types.ResRet.f32 %1914, 3
  %1919 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %1920 = extractvalue %dx.types.CBufRet.f32 %1919, 0
  %1921 = extractvalue %dx.types.CBufRet.f32 %1919, 1
  %1922 = extractvalue %dx.types.CBufRet.f32 %1919, 2
  %1923 = extractvalue %dx.types.CBufRet.f32 %1919, 3
  %1924 = call float @dx.op.dot4.f32(i32 56, float %1915, float %1916, float %1917, float %1918, float %1920, float %1921, float %1922, float %1923)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1925 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %1926 = extractvalue %dx.types.CBufRet.f32 %1925, 0
  %1927 = extractvalue %dx.types.CBufRet.f32 %1925, 1
  %1928 = extractvalue %dx.types.CBufRet.f32 %1925, 2
  %1929 = extractvalue %dx.types.CBufRet.f32 %1925, 3
  %1930 = call float @dx.op.dot4.f32(i32 56, float %1915, float %1916, float %1917, float %1918, float %1926, float %1927, float %1928, float %1929)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1931 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %1932 = extractvalue %dx.types.CBufRet.f32 %1931, 0
  %1933 = extractvalue %dx.types.CBufRet.f32 %1931, 1
  %1934 = extractvalue %dx.types.CBufRet.f32 %1931, 2
  %1935 = extractvalue %dx.types.CBufRet.f32 %1931, 3
  %1936 = call float @dx.op.dot4.f32(i32 56, float %1915, float %1916, float %1917, float %1918, float %1932, float %1933, float %1934, float %1935)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1937 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1938 = extractvalue %dx.types.CBufRet.i32 %1937, 0
  %1939 = extractvalue %dx.types.CBufRet.i32 %1937, 1
  %1940 = extractvalue %dx.types.CBufRet.i32 %1937, 2
  %1941 = extractvalue %dx.types.CBufRet.i32 %1937, 3
  %1942 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1943 = extractvalue %dx.types.CBufRet.i32 %1942, 0
  %1944 = extractvalue %dx.types.CBufRet.i32 %1942, 1
  %1945 = extractvalue %dx.types.CBufRet.i32 %1942, 2
  %1946 = extractvalue %dx.types.CBufRet.i32 %1942, 3
  %1947 = bitcast i32 %1943 to float
  %1948 = bitcast i32 %1944 to float
  %1949 = bitcast i32 %1945 to float
  %1950 = bitcast i32 %1946 to float
  %1951 = bitcast i32 %1938 to float
  %1952 = and i32 %1939, 4095
  %1953 = lshr i32 %1939, 12
  %1954 = and i32 %1953, 4095
  %1955 = lshr i32 %1939, 24
  %1956 = and i32 %1940, 15
  %1957 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %1958 = extractvalue %dx.types.CBufRet.f32 %1957, 0
  %1959 = call float @dx.op.unary.f32(i32 21, float %1958)  ; Exp(value)
  %1960 = fmul fast float %1959, %1857
  %1961 = fmul fast float %1959, %1855
  %1962 = fmul fast float %1960, %1947
  %1963 = fmul fast float %1961, %1948
  %1964 = fmul fast float %1947, %1853
  %1965 = fmul fast float %1964, %1949
  %1966 = fmul fast float %1965, %1959
  %1967 = fmul fast float %1948, %1851
  %1968 = fmul fast float %1967, %1950
  %1969 = fmul fast float %1968, %1959
  %1970 = fmul fast float %1962, %1949
  %1971 = fmul fast float %1963, %1950
  %1972 = call float @dx.op.dot2.f32(i32 54, float %1966, float %1969, float %1966, float %1969)  ; Dot2(ax,ay,bx,by)
  %1973 = call float @dx.op.dot2.f32(i32 54, float %1970, float %1971, float %1970, float %1971)  ; Dot2(ax,ay,bx,by)
  %1974 = call float @dx.op.binary.f32(i32 36, float %1972, float %1973)  ; FMin(a,b)
  %1975 = call float @dx.op.unary.f32(i32 23, float %1974)  ; Log(value)
  %1976 = call float @dx.op.binary.f32(i32 35, float %1972, float %1973)  ; FMax(a,b)
  %1977 = call float @dx.op.unary.f32(i32 23, float %1976)  ; Log(value)
  %1978 = fmul fast float %1977, 5.000000e-01
  %1979 = fsub fast float %1977, %1975
  %1980 = fmul fast float %1979, 5.000000e-01
  %1981 = call float @dx.op.binary.f32(i32 36, float %1980, float %1951)  ; FMin(a,b)
  %1982 = fsub fast float %1978, %1981
  %1983 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %1984 = extractvalue %dx.types.CBufRet.f32 %1983, 0
  %1985 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1986 = extractvalue %dx.types.CBufRet.i32 %1985, 1
  %1987 = uitofp i32 %1986 to float
  %1988 = fmul fast float %1987, 0x4040551EC0000000
  %1989 = fmul fast float %1987, 0x4027A147A0000000
  %1990 = fadd fast float %1988, %58
  %1991 = fadd fast float %1989, %59
  %1992 = call float @dx.op.dot2.f32(i32 54, float %1990, float %1991, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %1993 = call float @dx.op.unary.f32(i32 22, float %1992)  ; Frc(value)
  %1994 = fmul fast float %1993, 0x404A7DD040000000
  %1995 = call float @dx.op.unary.f32(i32 22, float %1994)  ; Frc(value)
  %1996 = fadd fast float %1982, %1984
  %1997 = fadd fast float %1996, %1995
  %1998 = call float @dx.op.unary.f32(i32 27, float %1997)  ; Round_ni(value)
  %1999 = fptosi float %1998 to i32
  %2000 = add nsw i32 %1999, %1955
  %2001 = fmul fast float %1947, %1861
  %2002 = fmul fast float %1948, %1859
  %2003 = call float @dx.op.unary.f32(i32 22, float %2001)  ; Frc(value)
  %2004 = call float @dx.op.unary.f32(i32 22, float %2002)  ; Frc(value)
  %2005 = fmul fast float %2003, %1949
  %2006 = fmul fast float %2004, %1950
  %2007 = call i32 @dx.op.binary.i32(i32 37, i32 %2000, i32 0)  ; IMax(a,b)
  %2008 = call i32 @dx.op.binary.i32(i32 38, i32 %2007, i32 %1956)  ; IMin(a,b)
  %2009 = fptoui float %2005 to i32
  %2010 = add i32 %2009, %1952
  %2011 = and i32 %2008, 31
  %2012 = lshr i32 %2010, %2011
  %2013 = fptoui float %2006 to i32
  %2014 = add i32 %2013, %1954
  %2015 = lshr i32 %2014, %2011
  %2016 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2017 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2016, i32 %2008, i32 %2012, i32 %2015, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2018 = extractvalue %dx.types.ResRet.i32 %2017, 0
  %2019 = extractvalue %dx.types.ResRet.i32 %2017, 1
  %2020 = extractvalue %dx.types.ResRet.i32 %2017, 2
  %2021 = extractvalue %dx.types.ResRet.i32 %2017, 3
  %2022 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2023 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2022, i32 %2008, i32 %2012, i32 %2015, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2024 = extractvalue %dx.types.ResRet.i32 %2023, 0
  %2025 = extractvalue %dx.types.ResRet.i32 %2023, 1
  %2026 = extractvalue %dx.types.ResRet.i32 %2023, 2
  %2027 = extractvalue %dx.types.ResRet.i32 %2023, 3
  %2028 = or i32 %2012, %1941
  %2029 = shl i32 %2015, 12
  %2030 = or i32 %2028, %2029
  %2031 = add nuw nsw i32 %1956, 1
  %2032 = add nsw i32 %2000, 1
  %2033 = call i32 @dx.op.binary.i32(i32 37, i32 %2032, i32 0)  ; IMax(a,b)
  %2034 = call i32 @dx.op.binary.i32(i32 38, i32 %2033, i32 %2031)  ; IMin(a,b)
  %2035 = shl i32 %2034, 24
  %2036 = or i32 %2030, %2035
  %2037 = icmp eq i32 %1893, 0
  %2038 = select i1 %2037, i32 %2036, i32 -1
  %2039 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2040 = extractvalue %dx.types.CBufRet.i32 %2039, 0
  %2041 = extractvalue %dx.types.CBufRet.i32 %2039, 1
  %2042 = extractvalue %dx.types.CBufRet.i32 %2039, 2
  %2043 = extractvalue %dx.types.CBufRet.i32 %2039, 3
  %2044 = bitcast i32 %2043 to float
  %2045 = call float @dx.op.unary.f32(i32 6, float %2044)  ; FAbs(value)
  %2046 = bitcast i32 %2041 to float
  %2047 = bitcast i32 %2042 to float
  %2048 = fcmp fast ogt float %2044, 0.000000e+00
  %2049 = lshr i32 %2040, 8
  %2050 = and i32 %2049, 255
  %2051 = uitofp i32 %2050 to float
  %2052 = fmul fast float %2051, 0x3F70101020000000
  %2053 = lshr i32 %2040, 16
  %2054 = and i32 %2053, 255
  %2055 = uitofp i32 %2054 to float
  %2056 = fmul fast float %2055, 0x3F70101020000000
  %2057 = and i32 %2018, 15
  %2058 = lshr i32 4096, %2057
  %2059 = uitofp i32 %2058 to float
  %2060 = fmul fast float %2059, 0x3F30000000000000
  %2061 = lshr i32 %2018, 4
  %2062 = select i1 %2048, i32 255, i32 63
  %2063 = and i32 %2061, %2062
  %2064 = lshr i32 %2018, 12
  %2065 = and i32 %2064, 255
  %2066 = lshr i32 %2018, 10
  %2067 = and i32 %2066, 63
  %2068 = select i1 %2048, i32 %2065, i32 %2067
  %2069 = fmul fast float %2060, %2005
  %2070 = fmul fast float %2060, %2006
  %2071 = call float @dx.op.unary.f32(i32 22, float %2069)  ; Frc(value)
  %2072 = call float @dx.op.unary.f32(i32 22, float %2070)  ; Frc(value)
  %2073 = uitofp i32 %2063 to float
  %2074 = uitofp i32 %2068 to float
  %2075 = fmul fast float %2073, %2045
  %2076 = fmul fast float %2074, %2045
  %2077 = fmul fast float %2071, %2046
  %2078 = fmul fast float %2072, %2046
  %2079 = fadd fast float %2077, %2047
  %2080 = fadd fast float %2078, %2047
  %2081 = fadd fast float %2079, %2075
  %2082 = fadd fast float %2080, %2076
  %2083 = icmp ugt i32 %2018, 15
  %2084 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2085 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2086 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2084, %dx.types.Handle %2085, float %2081, float %2082, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2087 = extractvalue %dx.types.ResRet.f32 %2086, 0
  %2088 = extractvalue %dx.types.ResRet.f32 %2086, 1
  %2089 = select i1 %2083, float %2087, float %2056
  %2090 = select i1 %2083, float %2088, float %2052
  %2091 = fmul fast float %2089, 2.000000e+00
  %2092 = fmul fast float %2090, 2.000000e+00
  %2093 = fadd fast float %2091, -1.000000e+00
  %2094 = fadd fast float %2092, -1.000000e+00
  %2095 = call float @dx.op.dot2.f32(i32 54, float %2093, float %2094, float %2093, float %2094)  ; Dot2(ax,ay,bx,by)
  %2096 = fsub fast float 1.000000e+00, %2095
  %2097 = call float @dx.op.unary.f32(i32 7, float %2096)  ; Saturate(value)
  %2098 = call float @dx.op.unary.f32(i32 24, float %2097)  ; Sqrt(value)
  %2099 = fmul fast float %2093, %1906
  %2100 = fmul fast float %2094, %1906
  %2101 = fmul fast float %2098, %1906
  %2102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2103 = extractvalue %dx.types.CBufRet.i32 %2102, 0
  %2104 = extractvalue %dx.types.CBufRet.i32 %2102, 1
  %2105 = extractvalue %dx.types.CBufRet.i32 %2102, 2
  %2106 = extractvalue %dx.types.CBufRet.i32 %2102, 3
  %2107 = bitcast i32 %2106 to float
  %2108 = call float @dx.op.unary.f32(i32 6, float %2107)  ; FAbs(value)
  %2109 = bitcast i32 %2104 to float
  %2110 = bitcast i32 %2105 to float
  %2111 = fcmp fast ogt float %2107, 0.000000e+00
  %2112 = lshr i32 %2103, 8
  %2113 = and i32 %2112, 255
  %2114 = uitofp i32 %2113 to float
  %2115 = fmul fast float %2114, 0x3F70101020000000
  %2116 = lshr i32 %2103, 16
  %2117 = and i32 %2116, 255
  %2118 = uitofp i32 %2117 to float
  %2119 = fmul fast float %2118, 0x3F70101020000000
  %2120 = and i32 %2019, 15
  %2121 = lshr i32 4096, %2120
  %2122 = uitofp i32 %2121 to float
  %2123 = fmul fast float %2122, 0x3F30000000000000
  %2124 = lshr i32 %2019, 4
  %2125 = select i1 %2111, i32 255, i32 63
  %2126 = and i32 %2124, %2125
  %2127 = lshr i32 %2019, 12
  %2128 = and i32 %2127, 255
  %2129 = lshr i32 %2019, 10
  %2130 = and i32 %2129, 63
  %2131 = select i1 %2111, i32 %2128, i32 %2130
  %2132 = fmul fast float %2123, %2005
  %2133 = fmul fast float %2123, %2006
  %2134 = call float @dx.op.unary.f32(i32 22, float %2132)  ; Frc(value)
  %2135 = call float @dx.op.unary.f32(i32 22, float %2133)  ; Frc(value)
  %2136 = uitofp i32 %2126 to float
  %2137 = uitofp i32 %2131 to float
  %2138 = fmul fast float %2136, %2108
  %2139 = fmul fast float %2137, %2108
  %2140 = fmul fast float %2134, %2109
  %2141 = fmul fast float %2135, %2109
  %2142 = fadd fast float %2140, %2110
  %2143 = fadd fast float %2141, %2110
  %2144 = fadd fast float %2142, %2138
  %2145 = fadd fast float %2143, %2139
  %2146 = icmp ugt i32 %2019, 15
  %2147 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2148 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2149 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2147, %dx.types.Handle %2148, float %2144, float %2145, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2150 = extractvalue %dx.types.ResRet.f32 %2149, 0
  %2151 = extractvalue %dx.types.ResRet.f32 %2149, 1
  %2152 = select i1 %2146, float %2150, float %2119
  %2153 = select i1 %2146, float %2151, float %2115
  %2154 = fmul fast float %2152, 2.000000e+00
  %2155 = fmul fast float %2153, 2.000000e+00
  %2156 = fadd fast float %2154, -1.000000e+00
  %2157 = fadd fast float %2155, -1.000000e+00
  %2158 = call float @dx.op.dot2.f32(i32 54, float %2156, float %2157, float %2156, float %2157)  ; Dot2(ax,ay,bx,by)
  %2159 = fsub fast float 1.000000e+00, %2158
  %2160 = call float @dx.op.unary.f32(i32 7, float %2159)  ; Saturate(value)
  %2161 = call float @dx.op.unary.f32(i32 24, float %2160)  ; Sqrt(value)
  %2162 = fmul fast float %2156, %1912
  %2163 = fmul fast float %2157, %1912
  %2164 = fmul fast float %2161, %1912
  %2165 = fadd fast float %2162, %2099
  %2166 = fadd fast float %2163, %2100
  %2167 = fadd fast float %2164, %2101
  %2168 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2169 = extractvalue %dx.types.CBufRet.i32 %2168, 0
  %2170 = extractvalue %dx.types.CBufRet.i32 %2168, 1
  %2171 = extractvalue %dx.types.CBufRet.i32 %2168, 2
  %2172 = extractvalue %dx.types.CBufRet.i32 %2168, 3
  %2173 = bitcast i32 %2172 to float
  %2174 = call float @dx.op.unary.f32(i32 6, float %2173)  ; FAbs(value)
  %2175 = bitcast i32 %2170 to float
  %2176 = bitcast i32 %2171 to float
  %2177 = fcmp fast ogt float %2173, 0.000000e+00
  %2178 = lshr i32 %2169, 8
  %2179 = and i32 %2178, 255
  %2180 = uitofp i32 %2179 to float
  %2181 = fmul fast float %2180, 0x3F70101020000000
  %2182 = lshr i32 %2169, 16
  %2183 = and i32 %2182, 255
  %2184 = uitofp i32 %2183 to float
  %2185 = fmul fast float %2184, 0x3F70101020000000
  %2186 = and i32 %2020, 15
  %2187 = lshr i32 4096, %2186
  %2188 = uitofp i32 %2187 to float
  %2189 = fmul fast float %2188, 0x3F30000000000000
  %2190 = lshr i32 %2020, 4
  %2191 = select i1 %2177, i32 255, i32 63
  %2192 = and i32 %2190, %2191
  %2193 = lshr i32 %2020, 12
  %2194 = and i32 %2193, 255
  %2195 = lshr i32 %2020, 10
  %2196 = and i32 %2195, 63
  %2197 = select i1 %2177, i32 %2194, i32 %2196
  %2198 = fmul fast float %2189, %2005
  %2199 = fmul fast float %2189, %2006
  %2200 = call float @dx.op.unary.f32(i32 22, float %2198)  ; Frc(value)
  %2201 = call float @dx.op.unary.f32(i32 22, float %2199)  ; Frc(value)
  %2202 = uitofp i32 %2192 to float
  %2203 = uitofp i32 %2197 to float
  %2204 = fmul fast float %2202, %2174
  %2205 = fmul fast float %2203, %2174
  %2206 = fmul fast float %2200, %2175
  %2207 = fmul fast float %2201, %2175
  %2208 = fadd fast float %2206, %2176
  %2209 = fadd fast float %2207, %2176
  %2210 = fadd fast float %2208, %2204
  %2211 = fadd fast float %2209, %2205
  %2212 = icmp ugt i32 %2020, 15
  %2213 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2214 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2215 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2213, %dx.types.Handle %2214, float %2210, float %2211, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2216 = extractvalue %dx.types.ResRet.f32 %2215, 0
  %2217 = extractvalue %dx.types.ResRet.f32 %2215, 1
  %2218 = select i1 %2212, float %2216, float %2185
  %2219 = select i1 %2212, float %2217, float %2181
  %2220 = fmul fast float %2218, 2.000000e+00
  %2221 = fmul fast float %2219, 2.000000e+00
  %2222 = fadd fast float %2220, -1.000000e+00
  %2223 = fadd fast float %2221, -1.000000e+00
  %2224 = call float @dx.op.dot2.f32(i32 54, float %2222, float %2223, float %2222, float %2223)  ; Dot2(ax,ay,bx,by)
  %2225 = fsub fast float 1.000000e+00, %2224
  %2226 = call float @dx.op.unary.f32(i32 7, float %2225)  ; Saturate(value)
  %2227 = call float @dx.op.unary.f32(i32 24, float %2226)  ; Sqrt(value)
  %2228 = fmul fast float %2222, %1924
  %2229 = fmul fast float %2223, %1924
  %2230 = fmul fast float %2227, %1924
  %2231 = fadd fast float %2165, %2228
  %2232 = fadd fast float %2166, %2229
  %2233 = fadd fast float %2167, %2230
  %2234 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2235 = extractvalue %dx.types.CBufRet.i32 %2234, 0
  %2236 = extractvalue %dx.types.CBufRet.i32 %2234, 1
  %2237 = extractvalue %dx.types.CBufRet.i32 %2234, 2
  %2238 = extractvalue %dx.types.CBufRet.i32 %2234, 3
  %2239 = bitcast i32 %2238 to float
  %2240 = call float @dx.op.unary.f32(i32 6, float %2239)  ; FAbs(value)
  %2241 = bitcast i32 %2236 to float
  %2242 = bitcast i32 %2237 to float
  %2243 = fcmp fast ogt float %2239, 0.000000e+00
  %2244 = lshr i32 %2235, 8
  %2245 = and i32 %2244, 255
  %2246 = uitofp i32 %2245 to float
  %2247 = fmul fast float %2246, 0x3F70101020000000
  %2248 = lshr i32 %2235, 16
  %2249 = and i32 %2248, 255
  %2250 = uitofp i32 %2249 to float
  %2251 = fmul fast float %2250, 0x3F70101020000000
  %2252 = and i32 %2021, 15
  %2253 = lshr i32 4096, %2252
  %2254 = uitofp i32 %2253 to float
  %2255 = fmul fast float %2254, 0x3F30000000000000
  %2256 = lshr i32 %2021, 4
  %2257 = select i1 %2243, i32 255, i32 63
  %2258 = and i32 %2256, %2257
  %2259 = lshr i32 %2021, 12
  %2260 = and i32 %2259, 255
  %2261 = lshr i32 %2021, 10
  %2262 = and i32 %2261, 63
  %2263 = select i1 %2243, i32 %2260, i32 %2262
  %2264 = fmul fast float %2255, %2005
  %2265 = fmul fast float %2255, %2006
  %2266 = call float @dx.op.unary.f32(i32 22, float %2264)  ; Frc(value)
  %2267 = call float @dx.op.unary.f32(i32 22, float %2265)  ; Frc(value)
  %2268 = uitofp i32 %2258 to float
  %2269 = uitofp i32 %2263 to float
  %2270 = fmul fast float %2268, %2240
  %2271 = fmul fast float %2269, %2240
  %2272 = fmul fast float %2266, %2241
  %2273 = fmul fast float %2267, %2241
  %2274 = fadd fast float %2272, %2242
  %2275 = fadd fast float %2273, %2242
  %2276 = fadd fast float %2274, %2270
  %2277 = fadd fast float %2275, %2271
  %2278 = icmp ugt i32 %2021, 15
  %2279 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2280 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2281 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2279, %dx.types.Handle %2280, float %2276, float %2277, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2282 = extractvalue %dx.types.ResRet.f32 %2281, 0
  %2283 = extractvalue %dx.types.ResRet.f32 %2281, 1
  %2284 = select i1 %2278, float %2282, float %2251
  %2285 = select i1 %2278, float %2283, float %2247
  %2286 = fmul fast float %2284, 2.000000e+00
  %2287 = fmul fast float %2285, 2.000000e+00
  %2288 = fadd fast float %2286, -1.000000e+00
  %2289 = fadd fast float %2287, -1.000000e+00
  %2290 = call float @dx.op.dot2.f32(i32 54, float %2288, float %2289, float %2288, float %2289)  ; Dot2(ax,ay,bx,by)
  %2291 = fsub fast float 1.000000e+00, %2290
  %2292 = call float @dx.op.unary.f32(i32 7, float %2291)  ; Saturate(value)
  %2293 = call float @dx.op.unary.f32(i32 24, float %2292)  ; Sqrt(value)
  %2294 = fmul fast float %2288, %1930
  %2295 = fmul fast float %2289, %1930
  %2296 = fmul fast float %2293, %1930
  %2297 = fadd fast float %2231, %2294
  %2298 = fadd fast float %2232, %2295
  %2299 = fadd fast float %2233, %2296
  %2300 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2301 = extractvalue %dx.types.CBufRet.i32 %2300, 0
  %2302 = extractvalue %dx.types.CBufRet.i32 %2300, 1
  %2303 = extractvalue %dx.types.CBufRet.i32 %2300, 2
  %2304 = extractvalue %dx.types.CBufRet.i32 %2300, 3
  %2305 = bitcast i32 %2304 to float
  %2306 = call float @dx.op.unary.f32(i32 6, float %2305)  ; FAbs(value)
  %2307 = bitcast i32 %2302 to float
  %2308 = bitcast i32 %2303 to float
  %2309 = fcmp fast ogt float %2305, 0.000000e+00
  %2310 = lshr i32 %2301, 8
  %2311 = and i32 %2310, 255
  %2312 = uitofp i32 %2311 to float
  %2313 = fmul fast float %2312, 0x3F70101020000000
  %2314 = lshr i32 %2301, 16
  %2315 = and i32 %2314, 255
  %2316 = uitofp i32 %2315 to float
  %2317 = fmul fast float %2316, 0x3F70101020000000
  %2318 = and i32 %2024, 15
  %2319 = lshr i32 4096, %2318
  %2320 = uitofp i32 %2319 to float
  %2321 = fmul fast float %2320, 0x3F30000000000000
  %2322 = lshr i32 %2024, 4
  %2323 = select i1 %2309, i32 255, i32 63
  %2324 = and i32 %2322, %2323
  %2325 = lshr i32 %2024, 12
  %2326 = and i32 %2325, 255
  %2327 = lshr i32 %2024, 10
  %2328 = and i32 %2327, 63
  %2329 = select i1 %2309, i32 %2326, i32 %2328
  %2330 = fmul fast float %2321, %2005
  %2331 = fmul fast float %2321, %2006
  %2332 = call float @dx.op.unary.f32(i32 22, float %2330)  ; Frc(value)
  %2333 = call float @dx.op.unary.f32(i32 22, float %2331)  ; Frc(value)
  %2334 = uitofp i32 %2324 to float
  %2335 = uitofp i32 %2329 to float
  %2336 = fmul fast float %2334, %2306
  %2337 = fmul fast float %2335, %2306
  %2338 = fmul fast float %2332, %2307
  %2339 = fmul fast float %2333, %2307
  %2340 = fadd fast float %2338, %2308
  %2341 = fadd fast float %2339, %2308
  %2342 = fadd fast float %2340, %2336
  %2343 = fadd fast float %2341, %2337
  %2344 = icmp ugt i32 %2024, 15
  %2345 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2346 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2347 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2345, %dx.types.Handle %2346, float %2342, float %2343, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2348 = extractvalue %dx.types.ResRet.f32 %2347, 0
  %2349 = extractvalue %dx.types.ResRet.f32 %2347, 1
  %2350 = select i1 %2344, float %2348, float %2317
  %2351 = select i1 %2344, float %2349, float %2313
  %2352 = fmul fast float %2350, 2.000000e+00
  %2353 = fmul fast float %2351, 2.000000e+00
  %2354 = fadd fast float %2352, -1.000000e+00
  %2355 = fadd fast float %2353, -1.000000e+00
  %2356 = call float @dx.op.dot2.f32(i32 54, float %2354, float %2355, float %2354, float %2355)  ; Dot2(ax,ay,bx,by)
  %2357 = fsub fast float 1.000000e+00, %2356
  %2358 = call float @dx.op.unary.f32(i32 7, float %2357)  ; Saturate(value)
  %2359 = call float @dx.op.unary.f32(i32 24, float %2358)  ; Sqrt(value)
  %2360 = fmul fast float %2354, %1936
  %2361 = fmul fast float %2355, %1936
  %2362 = fmul fast float %2359, %1936
  %2363 = fadd fast float %2297, %2360
  %2364 = fadd fast float %2298, %2361
  %2365 = fadd fast float %2299, %2362
  %2366 = fmul fast float %2363, %75
  %2367 = fmul fast float %2364, %75
  %2368 = fmul fast float %2365, %75
  %2369 = fadd fast float %2366, %72
  %2370 = fadd fast float %2367, %73
  %2371 = fadd fast float %2368, %74
  %2372 = call float @dx.op.dot3.f32(i32 55, float %2369, float %2370, float %2371, float %2369, float %2370, float %2371)  ; Dot3(ax,ay,az,bx,by,bz)
  %2373 = call float @dx.op.unary.f32(i32 25, float %2372)  ; Rsqrt(value)
  %2374 = fmul fast float %2369, %2373
  %2375 = fmul fast float %2370, %2373
  %2376 = fmul fast float %2371, %2373
  %2377 = fmul fast float %2374, %1863
  %2378 = call float @dx.op.tertiary.f32(i32 46, float %2375, float %1866, float %2377)  ; FMad(a,b,c)
  %2379 = call float @dx.op.tertiary.f32(i32 46, float %2376, float %1869, float %2378)  ; FMad(a,b,c)
  %2380 = fmul fast float %2374, %1864
  %2381 = call float @dx.op.tertiary.f32(i32 46, float %2375, float %1867, float %2380)  ; FMad(a,b,c)
  %2382 = call float @dx.op.tertiary.f32(i32 46, float %2376, float %1870, float %2381)  ; FMad(a,b,c)
  %2383 = fmul fast float %2374, %1865
  %2384 = call float @dx.op.tertiary.f32(i32 46, float %2375, float %1868, float %2383)  ; FMad(a,b,c)
  %2385 = call float @dx.op.tertiary.f32(i32 46, float %2376, float %1871, float %2384)  ; FMad(a,b,c)
  %2386 = call float @dx.op.dot3.f32(i32 55, float %2379, float %2382, float %2385, float %2379, float %2382, float %2385)  ; Dot3(ax,ay,az,bx,by,bz)
  %2387 = call float @dx.op.unary.f32(i32 25, float %2386)  ; Rsqrt(value)
  %2388 = fmul fast float %2387, %2379
  %2389 = fmul fast float %2387, %2382
  %2390 = fmul fast float %2387, %2385
  %2391 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %2392 = extractvalue %dx.types.CBufRet.f32 %2391, 0
  %2393 = extractvalue %dx.types.CBufRet.f32 %2391, 1
  %2394 = extractvalue %dx.types.CBufRet.f32 %2391, 2
  %2395 = extractvalue %dx.types.CBufRet.f32 %2391, 3
  %2396 = fmul fast float %2393, %2392
  %2397 = fmul fast float %2394, %2392
  %2398 = fmul fast float %2395, %2392
  %2399 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2400 = extractvalue %dx.types.CBufRet.i32 %2399, 0
  %2401 = extractvalue %dx.types.CBufRet.i32 %2399, 1
  %2402 = extractvalue %dx.types.CBufRet.i32 %2399, 2
  %2403 = extractvalue %dx.types.CBufRet.i32 %2399, 3
  %2404 = bitcast i32 %2403 to float
  %2405 = call float @dx.op.unary.f32(i32 6, float %2404)  ; FAbs(value)
  %2406 = bitcast i32 %2401 to float
  %2407 = bitcast i32 %2402 to float
  %2408 = fcmp fast ogt float %2404, 0.000000e+00
  %2409 = and i32 %2400, 255
  %2410 = uitofp i32 %2409 to float
  %2411 = fmul fast float %2410, 0x3F70101020000000
  %2412 = lshr i32 %2400, 8
  %2413 = and i32 %2412, 255
  %2414 = uitofp i32 %2413 to float
  %2415 = fmul fast float %2414, 0x3F70101020000000
  %2416 = lshr i32 %2400, 16
  %2417 = and i32 %2416, 255
  %2418 = uitofp i32 %2417 to float
  %2419 = fmul fast float %2418, 0x3F70101020000000
  %2420 = and i32 %2025, 15
  %2421 = lshr i32 4096, %2420
  %2422 = uitofp i32 %2421 to float
  %2423 = fmul fast float %2422, 0x3F30000000000000
  %2424 = lshr i32 %2025, 4
  %2425 = select i1 %2408, i32 255, i32 63
  %2426 = and i32 %2424, %2425
  %2427 = lshr i32 %2025, 12
  %2428 = and i32 %2427, 255
  %2429 = lshr i32 %2025, 10
  %2430 = and i32 %2429, 63
  %2431 = select i1 %2408, i32 %2428, i32 %2430
  %2432 = fmul fast float %2423, %2005
  %2433 = fmul fast float %2423, %2006
  %2434 = call float @dx.op.unary.f32(i32 22, float %2432)  ; Frc(value)
  %2435 = call float @dx.op.unary.f32(i32 22, float %2433)  ; Frc(value)
  %2436 = uitofp i32 %2426 to float
  %2437 = uitofp i32 %2431 to float
  %2438 = fmul fast float %2436, %2405
  %2439 = fmul fast float %2437, %2405
  %2440 = fmul fast float %2434, %2406
  %2441 = fmul fast float %2435, %2406
  %2442 = fadd fast float %2440, %2407
  %2443 = fadd fast float %2441, %2407
  %2444 = fadd fast float %2442, %2438
  %2445 = fadd fast float %2443, %2439
  %2446 = icmp ugt i32 %2025, 15
  %2447 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2448 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2449 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2447, %dx.types.Handle %2448, float %2444, float %2445, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2450 = extractvalue %dx.types.ResRet.f32 %2449, 0
  %2451 = extractvalue %dx.types.ResRet.f32 %2449, 1
  %2452 = extractvalue %dx.types.ResRet.f32 %2449, 2
  %2453 = select i1 %2446, float %2450, float %2419
  %2454 = select i1 %2446, float %2451, float %2415
  %2455 = select i1 %2446, float %2452, float %2411
  %2456 = fmul fast float %2453, %1906
  %2457 = fmul fast float %2454, %1906
  %2458 = fmul fast float %2455, %1906
  %2459 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2460 = extractvalue %dx.types.CBufRet.i32 %2459, 0
  %2461 = extractvalue %dx.types.CBufRet.i32 %2459, 1
  %2462 = extractvalue %dx.types.CBufRet.i32 %2459, 2
  %2463 = extractvalue %dx.types.CBufRet.i32 %2459, 3
  %2464 = bitcast i32 %2463 to float
  %2465 = call float @dx.op.unary.f32(i32 6, float %2464)  ; FAbs(value)
  %2466 = bitcast i32 %2461 to float
  %2467 = bitcast i32 %2462 to float
  %2468 = fcmp fast ogt float %2464, 0.000000e+00
  %2469 = and i32 %2460, 255
  %2470 = uitofp i32 %2469 to float
  %2471 = fmul fast float %2470, 0x3F70101020000000
  %2472 = lshr i32 %2460, 8
  %2473 = and i32 %2472, 255
  %2474 = uitofp i32 %2473 to float
  %2475 = fmul fast float %2474, 0x3F70101020000000
  %2476 = lshr i32 %2460, 16
  %2477 = and i32 %2476, 255
  %2478 = uitofp i32 %2477 to float
  %2479 = fmul fast float %2478, 0x3F70101020000000
  %2480 = and i32 %2026, 15
  %2481 = lshr i32 4096, %2480
  %2482 = uitofp i32 %2481 to float
  %2483 = fmul fast float %2482, 0x3F30000000000000
  %2484 = lshr i32 %2026, 4
  %2485 = select i1 %2468, i32 255, i32 63
  %2486 = and i32 %2484, %2485
  %2487 = lshr i32 %2026, 12
  %2488 = and i32 %2487, 255
  %2489 = lshr i32 %2026, 10
  %2490 = and i32 %2489, 63
  %2491 = select i1 %2468, i32 %2488, i32 %2490
  %2492 = fmul fast float %2483, %2005
  %2493 = fmul fast float %2483, %2006
  %2494 = call float @dx.op.unary.f32(i32 22, float %2492)  ; Frc(value)
  %2495 = call float @dx.op.unary.f32(i32 22, float %2493)  ; Frc(value)
  %2496 = uitofp i32 %2486 to float
  %2497 = uitofp i32 %2491 to float
  %2498 = fmul fast float %2496, %2465
  %2499 = fmul fast float %2497, %2465
  %2500 = fmul fast float %2494, %2466
  %2501 = fmul fast float %2495, %2466
  %2502 = fadd fast float %2500, %2467
  %2503 = fadd fast float %2501, %2467
  %2504 = fadd fast float %2502, %2498
  %2505 = fadd fast float %2503, %2499
  %2506 = icmp ugt i32 %2026, 15
  %2507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2508 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2509 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2507, %dx.types.Handle %2508, float %2504, float %2505, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2510 = extractvalue %dx.types.ResRet.f32 %2509, 0
  %2511 = extractvalue %dx.types.ResRet.f32 %2509, 1
  %2512 = extractvalue %dx.types.ResRet.f32 %2509, 2
  %2513 = select i1 %2506, float %2510, float %2479
  %2514 = select i1 %2506, float %2511, float %2475
  %2515 = select i1 %2506, float %2512, float %2471
  %2516 = fmul fast float %2513, %1912
  %2517 = fmul fast float %2514, %1912
  %2518 = fmul fast float %2515, %1912
  %2519 = fadd fast float %2516, %2456
  %2520 = fadd fast float %2517, %2457
  %2521 = fadd fast float %2518, %2458
  %2522 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %2523 = extractvalue %dx.types.CBufRet.i32 %2522, 0
  %2524 = extractvalue %dx.types.CBufRet.i32 %2522, 1
  %2525 = extractvalue %dx.types.CBufRet.i32 %2522, 2
  %2526 = extractvalue %dx.types.CBufRet.i32 %2522, 3
  %2527 = bitcast i32 %2526 to float
  %2528 = call float @dx.op.unary.f32(i32 6, float %2527)  ; FAbs(value)
  %2529 = bitcast i32 %2524 to float
  %2530 = bitcast i32 %2525 to float
  %2531 = fcmp fast ogt float %2527, 0.000000e+00
  %2532 = and i32 %2523, 255
  %2533 = uitofp i32 %2532 to float
  %2534 = fmul fast float %2533, 0x3F70101020000000
  %2535 = lshr i32 %2523, 8
  %2536 = and i32 %2535, 255
  %2537 = uitofp i32 %2536 to float
  %2538 = fmul fast float %2537, 0x3F70101020000000
  %2539 = lshr i32 %2523, 16
  %2540 = and i32 %2539, 255
  %2541 = uitofp i32 %2540 to float
  %2542 = fmul fast float %2541, 0x3F70101020000000
  %2543 = and i32 %2027, 15
  %2544 = lshr i32 4096, %2543
  %2545 = uitofp i32 %2544 to float
  %2546 = fmul fast float %2545, 0x3F30000000000000
  %2547 = lshr i32 %2027, 4
  %2548 = select i1 %2531, i32 255, i32 63
  %2549 = and i32 %2547, %2548
  %2550 = lshr i32 %2027, 12
  %2551 = and i32 %2550, 255
  %2552 = lshr i32 %2027, 10
  %2553 = and i32 %2552, 63
  %2554 = select i1 %2531, i32 %2551, i32 %2553
  %2555 = fmul fast float %2546, %2005
  %2556 = fmul fast float %2546, %2006
  %2557 = call float @dx.op.unary.f32(i32 22, float %2555)  ; Frc(value)
  %2558 = call float @dx.op.unary.f32(i32 22, float %2556)  ; Frc(value)
  %2559 = uitofp i32 %2549 to float
  %2560 = uitofp i32 %2554 to float
  %2561 = fmul fast float %2559, %2528
  %2562 = fmul fast float %2560, %2528
  %2563 = fmul fast float %2557, %2529
  %2564 = fmul fast float %2558, %2529
  %2565 = fadd fast float %2563, %2530
  %2566 = fadd fast float %2564, %2530
  %2567 = fadd fast float %2565, %2561
  %2568 = fadd fast float %2566, %2562
  %2569 = icmp ugt i32 %2027, 15
  %2570 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2571 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2572 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2570, %dx.types.Handle %2571, float %2567, float %2568, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2573 = extractvalue %dx.types.ResRet.f32 %2572, 0
  %2574 = extractvalue %dx.types.ResRet.f32 %2572, 1
  %2575 = extractvalue %dx.types.ResRet.f32 %2572, 2
  %2576 = select i1 %2569, float %2573, float %2542
  %2577 = select i1 %2569, float %2574, float %2538
  %2578 = select i1 %2569, float %2575, float %2534
  %2579 = fmul fast float %2576, %1924
  %2580 = fmul fast float %2577, %1924
  %2581 = fmul fast float %2578, %1924
  %2582 = fadd fast float %2519, %2579
  %2583 = fadd fast float %2520, %2580
  %2584 = fadd fast float %2521, %2581
  %2585 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2586 = extractvalue %dx.types.CBufRet.i32 %2585, 0
  %2587 = extractvalue %dx.types.CBufRet.i32 %2585, 1
  %2588 = extractvalue %dx.types.CBufRet.i32 %2585, 2
  %2589 = extractvalue %dx.types.CBufRet.i32 %2585, 3
  %2590 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2591 = extractvalue %dx.types.CBufRet.i32 %2590, 0
  %2592 = extractvalue %dx.types.CBufRet.i32 %2590, 1
  %2593 = extractvalue %dx.types.CBufRet.i32 %2590, 2
  %2594 = extractvalue %dx.types.CBufRet.i32 %2590, 3
  %2595 = bitcast i32 %2591 to float
  %2596 = bitcast i32 %2592 to float
  %2597 = bitcast i32 %2593 to float
  %2598 = bitcast i32 %2594 to float
  %2599 = bitcast i32 %2586 to float
  %2600 = and i32 %2587, 4095
  %2601 = lshr i32 %2587, 12
  %2602 = and i32 %2601, 4095
  %2603 = lshr i32 %2587, 24
  %2604 = and i32 %2588, 15
  %2605 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %2606 = extractvalue %dx.types.CBufRet.f32 %2605, 0
  %2607 = call float @dx.op.unary.f32(i32 21, float %2606)  ; Exp(value)
  %2608 = fmul fast float %2607, %1857
  %2609 = fmul fast float %2607, %1855
  %2610 = fmul fast float %2608, %2595
  %2611 = fmul fast float %2609, %2596
  %2612 = fmul fast float %2595, %1853
  %2613 = fmul fast float %2612, %2597
  %2614 = fmul fast float %2613, %2607
  %2615 = fmul fast float %2596, %1851
  %2616 = fmul fast float %2615, %2598
  %2617 = fmul fast float %2616, %2607
  %2618 = fmul fast float %2610, %2597
  %2619 = fmul fast float %2611, %2598
  %2620 = call float @dx.op.dot2.f32(i32 54, float %2614, float %2617, float %2614, float %2617)  ; Dot2(ax,ay,bx,by)
  %2621 = call float @dx.op.dot2.f32(i32 54, float %2618, float %2619, float %2618, float %2619)  ; Dot2(ax,ay,bx,by)
  %2622 = call float @dx.op.binary.f32(i32 36, float %2620, float %2621)  ; FMin(a,b)
  %2623 = call float @dx.op.unary.f32(i32 23, float %2622)  ; Log(value)
  %2624 = call float @dx.op.binary.f32(i32 35, float %2620, float %2621)  ; FMax(a,b)
  %2625 = call float @dx.op.unary.f32(i32 23, float %2624)  ; Log(value)
  %2626 = fmul fast float %2625, 5.000000e-01
  %2627 = fsub fast float %2625, %2623
  %2628 = fmul fast float %2627, 5.000000e-01
  %2629 = call float @dx.op.binary.f32(i32 36, float %2628, float %2599)  ; FMin(a,b)
  %2630 = fsub fast float %2626, %2629
  %2631 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %2632 = extractvalue %dx.types.CBufRet.f32 %2631, 0
  %2633 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2634 = extractvalue %dx.types.CBufRet.i32 %2633, 1
  %2635 = uitofp i32 %2634 to float
  %2636 = fmul fast float %2635, 0x4040551EC0000000
  %2637 = fmul fast float %2635, 0x4027A147A0000000
  %2638 = fadd fast float %2636, %58
  %2639 = fadd fast float %2637, %59
  %2640 = call float @dx.op.dot2.f32(i32 54, float %2638, float %2639, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %2641 = call float @dx.op.unary.f32(i32 22, float %2640)  ; Frc(value)
  %2642 = fmul fast float %2641, 0x404A7DD040000000
  %2643 = call float @dx.op.unary.f32(i32 22, float %2642)  ; Frc(value)
  %2644 = fadd fast float %2630, %2632
  %2645 = fadd fast float %2644, %2643
  %2646 = call float @dx.op.unary.f32(i32 27, float %2645)  ; Round_ni(value)
  %2647 = fptosi float %2646 to i32
  %2648 = add nsw i32 %2647, %2603
  %2649 = fmul fast float %2595, %1861
  %2650 = fmul fast float %2596, %1859
  %2651 = call float @dx.op.unary.f32(i32 22, float %2649)  ; Frc(value)
  %2652 = call float @dx.op.unary.f32(i32 22, float %2650)  ; Frc(value)
  %2653 = fmul fast float %2651, %2597
  %2654 = fmul fast float %2652, %2598
  %2655 = call i32 @dx.op.binary.i32(i32 37, i32 %2648, i32 0)  ; IMax(a,b)
  %2656 = call i32 @dx.op.binary.i32(i32 38, i32 %2655, i32 %2604)  ; IMin(a,b)
  %2657 = fptoui float %2653 to i32
  %2658 = add i32 %2657, %2600
  %2659 = and i32 %2656, 31
  %2660 = lshr i32 %2658, %2659
  %2661 = fptoui float %2654 to i32
  %2662 = add i32 %2661, %2602
  %2663 = lshr i32 %2662, %2659
  %2664 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2665 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2664, i32 %2656, i32 %2660, i32 %2663, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2666 = extractvalue %dx.types.ResRet.i32 %2665, 0
  %2667 = extractvalue %dx.types.ResRet.i32 %2665, 1
  %2668 = extractvalue %dx.types.ResRet.i32 %2665, 2
  %2669 = extractvalue %dx.types.ResRet.i32 %2665, 3
  %2670 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2671 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2670, i32 %2656, i32 %2660, i32 %2663, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2672 = extractvalue %dx.types.ResRet.i32 %2671, 0
  %2673 = extractvalue %dx.types.ResRet.i32 %2671, 1
  %2674 = extractvalue %dx.types.ResRet.i32 %2671, 2
  %2675 = or i32 %2660, %2589
  %2676 = shl i32 %2663, 12
  %2677 = or i32 %2675, %2676
  %2678 = add nuw nsw i32 %2604, 1
  %2679 = add nsw i32 %2648, 1
  %2680 = call i32 @dx.op.binary.i32(i32 37, i32 %2679, i32 0)  ; IMax(a,b)
  %2681 = call i32 @dx.op.binary.i32(i32 38, i32 %2680, i32 %2678)  ; IMin(a,b)
  %2682 = shl i32 %2681, 24
  %2683 = or i32 %2677, %2682
  %2684 = icmp ne i32 %1893, 0
  %2685 = select i1 %2684, i32 %2683, i32 %2038
  %2686 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %2687 = extractvalue %dx.types.CBufRet.i32 %2686, 0
  %2688 = extractvalue %dx.types.CBufRet.i32 %2686, 1
  %2689 = extractvalue %dx.types.CBufRet.i32 %2686, 2
  %2690 = extractvalue %dx.types.CBufRet.i32 %2686, 3
  %2691 = bitcast i32 %2690 to float
  %2692 = call float @dx.op.unary.f32(i32 6, float %2691)  ; FAbs(value)
  %2693 = bitcast i32 %2688 to float
  %2694 = bitcast i32 %2689 to float
  %2695 = fcmp fast ogt float %2691, 0.000000e+00
  %2696 = and i32 %2687, 255
  %2697 = uitofp i32 %2696 to float
  %2698 = fmul fast float %2697, 0x3F70101020000000
  %2699 = lshr i32 %2687, 8
  %2700 = and i32 %2699, 255
  %2701 = uitofp i32 %2700 to float
  %2702 = fmul fast float %2701, 0x3F70101020000000
  %2703 = lshr i32 %2687, 16
  %2704 = and i32 %2703, 255
  %2705 = uitofp i32 %2704 to float
  %2706 = fmul fast float %2705, 0x3F70101020000000
  %2707 = and i32 %2666, 15
  %2708 = lshr i32 4096, %2707
  %2709 = uitofp i32 %2708 to float
  %2710 = fmul fast float %2709, 0x3F30000000000000
  %2711 = lshr i32 %2666, 4
  %2712 = select i1 %2695, i32 255, i32 63
  %2713 = and i32 %2711, %2712
  %2714 = lshr i32 %2666, 12
  %2715 = and i32 %2714, 255
  %2716 = lshr i32 %2666, 10
  %2717 = and i32 %2716, 63
  %2718 = select i1 %2695, i32 %2715, i32 %2717
  %2719 = fmul fast float %2710, %2653
  %2720 = fmul fast float %2710, %2654
  %2721 = call float @dx.op.unary.f32(i32 22, float %2719)  ; Frc(value)
  %2722 = call float @dx.op.unary.f32(i32 22, float %2720)  ; Frc(value)
  %2723 = uitofp i32 %2713 to float
  %2724 = uitofp i32 %2718 to float
  %2725 = fmul fast float %2723, %2692
  %2726 = fmul fast float %2724, %2692
  %2727 = fmul fast float %2721, %2693
  %2728 = fmul fast float %2722, %2693
  %2729 = fadd fast float %2727, %2694
  %2730 = fadd fast float %2728, %2694
  %2731 = fadd fast float %2729, %2725
  %2732 = fadd fast float %2730, %2726
  %2733 = icmp ugt i32 %2666, 15
  %2734 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2735 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2736 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2734, %dx.types.Handle %2735, float %2731, float %2732, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2737 = extractvalue %dx.types.ResRet.f32 %2736, 0
  %2738 = extractvalue %dx.types.ResRet.f32 %2736, 1
  %2739 = extractvalue %dx.types.ResRet.f32 %2736, 2
  %2740 = select i1 %2733, float %2737, float %2706
  %2741 = select i1 %2733, float %2738, float %2702
  %2742 = select i1 %2733, float %2739, float %2698
  %2743 = fmul fast float %2740, %1930
  %2744 = fmul fast float %2741, %1930
  %2745 = fmul fast float %2742, %1930
  %2746 = fadd fast float %2582, %2743
  %2747 = fadd fast float %2583, %2744
  %2748 = fadd fast float %2584, %2745
  %2749 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %2750 = extractvalue %dx.types.CBufRet.i32 %2749, 0
  %2751 = extractvalue %dx.types.CBufRet.i32 %2749, 1
  %2752 = extractvalue %dx.types.CBufRet.i32 %2749, 2
  %2753 = extractvalue %dx.types.CBufRet.i32 %2749, 3
  %2754 = bitcast i32 %2753 to float
  %2755 = call float @dx.op.unary.f32(i32 6, float %2754)  ; FAbs(value)
  %2756 = bitcast i32 %2751 to float
  %2757 = bitcast i32 %2752 to float
  %2758 = fcmp fast ogt float %2754, 0.000000e+00
  %2759 = and i32 %2750, 255
  %2760 = uitofp i32 %2759 to float
  %2761 = fmul fast float %2760, 0x3F70101020000000
  %2762 = lshr i32 %2750, 8
  %2763 = and i32 %2762, 255
  %2764 = uitofp i32 %2763 to float
  %2765 = fmul fast float %2764, 0x3F70101020000000
  %2766 = lshr i32 %2750, 16
  %2767 = and i32 %2766, 255
  %2768 = uitofp i32 %2767 to float
  %2769 = fmul fast float %2768, 0x3F70101020000000
  %2770 = and i32 %2667, 15
  %2771 = lshr i32 4096, %2770
  %2772 = uitofp i32 %2771 to float
  %2773 = fmul fast float %2772, 0x3F30000000000000
  %2774 = lshr i32 %2667, 4
  %2775 = select i1 %2758, i32 255, i32 63
  %2776 = and i32 %2774, %2775
  %2777 = lshr i32 %2667, 12
  %2778 = and i32 %2777, 255
  %2779 = lshr i32 %2667, 10
  %2780 = and i32 %2779, 63
  %2781 = select i1 %2758, i32 %2778, i32 %2780
  %2782 = fmul fast float %2773, %2653
  %2783 = fmul fast float %2773, %2654
  %2784 = call float @dx.op.unary.f32(i32 22, float %2782)  ; Frc(value)
  %2785 = call float @dx.op.unary.f32(i32 22, float %2783)  ; Frc(value)
  %2786 = uitofp i32 %2776 to float
  %2787 = uitofp i32 %2781 to float
  %2788 = fmul fast float %2786, %2755
  %2789 = fmul fast float %2787, %2755
  %2790 = fmul fast float %2784, %2756
  %2791 = fmul fast float %2785, %2756
  %2792 = fadd fast float %2790, %2757
  %2793 = fadd fast float %2791, %2757
  %2794 = fadd fast float %2792, %2788
  %2795 = fadd fast float %2793, %2789
  %2796 = icmp ugt i32 %2667, 15
  %2797 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2798 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2799 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2797, %dx.types.Handle %2798, float %2794, float %2795, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2800 = extractvalue %dx.types.ResRet.f32 %2799, 0
  %2801 = extractvalue %dx.types.ResRet.f32 %2799, 1
  %2802 = extractvalue %dx.types.ResRet.f32 %2799, 2
  %2803 = select i1 %2796, float %2800, float %2769
  %2804 = select i1 %2796, float %2801, float %2765
  %2805 = select i1 %2796, float %2802, float %2761
  %2806 = fmul fast float %2803, %1936
  %2807 = fmul fast float %2804, %1936
  %2808 = fmul fast float %2805, %1936
  %2809 = fadd fast float %2746, %2806
  %2810 = fadd fast float %2747, %2807
  %2811 = fadd fast float %2748, %2808
  %2812 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %2813 = extractvalue %dx.types.CBufRet.i32 %2812, 0
  %2814 = extractvalue %dx.types.CBufRet.i32 %2812, 1
  %2815 = extractvalue %dx.types.CBufRet.i32 %2812, 2
  %2816 = extractvalue %dx.types.CBufRet.i32 %2812, 3
  %2817 = bitcast i32 %2816 to float
  %2818 = call float @dx.op.unary.f32(i32 6, float %2817)  ; FAbs(value)
  %2819 = bitcast i32 %2814 to float
  %2820 = bitcast i32 %2815 to float
  %2821 = fcmp fast ogt float %2817, 0.000000e+00
  %2822 = lshr i32 %2813, 16
  %2823 = and i32 %2822, 255
  %2824 = uitofp i32 %2823 to float
  %2825 = fmul fast float %2824, 0x3F70101020000000
  %2826 = and i32 %2668, 15
  %2827 = lshr i32 4096, %2826
  %2828 = uitofp i32 %2827 to float
  %2829 = fmul fast float %2828, 0x3F30000000000000
  %2830 = lshr i32 %2668, 4
  %2831 = select i1 %2821, i32 255, i32 63
  %2832 = and i32 %2830, %2831
  %2833 = lshr i32 %2668, 12
  %2834 = and i32 %2833, 255
  %2835 = lshr i32 %2668, 10
  %2836 = and i32 %2835, 63
  %2837 = select i1 %2821, i32 %2834, i32 %2836
  %2838 = fmul fast float %2829, %2653
  %2839 = fmul fast float %2829, %2654
  %2840 = call float @dx.op.unary.f32(i32 22, float %2838)  ; Frc(value)
  %2841 = call float @dx.op.unary.f32(i32 22, float %2839)  ; Frc(value)
  %2842 = uitofp i32 %2832 to float
  %2843 = uitofp i32 %2837 to float
  %2844 = fmul fast float %2842, %2818
  %2845 = fmul fast float %2843, %2818
  %2846 = fmul fast float %2840, %2819
  %2847 = fmul fast float %2841, %2819
  %2848 = fadd fast float %2846, %2820
  %2849 = fadd fast float %2847, %2820
  %2850 = fadd fast float %2848, %2844
  %2851 = fadd fast float %2849, %2845
  %2852 = icmp ugt i32 %2668, 15
  %2853 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2854 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2855 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2853, %dx.types.Handle %2854, float %2850, float %2851, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2856 = extractvalue %dx.types.ResRet.f32 %2855, 0
  %2857 = select i1 %2852, float %2856, float %2825
  %2858 = fmul fast float %2857, %1906
  %2859 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %2860 = extractvalue %dx.types.CBufRet.i32 %2859, 0
  %2861 = extractvalue %dx.types.CBufRet.i32 %2859, 1
  %2862 = extractvalue %dx.types.CBufRet.i32 %2859, 2
  %2863 = extractvalue %dx.types.CBufRet.i32 %2859, 3
  %2864 = bitcast i32 %2863 to float
  %2865 = call float @dx.op.unary.f32(i32 6, float %2864)  ; FAbs(value)
  %2866 = bitcast i32 %2861 to float
  %2867 = bitcast i32 %2862 to float
  %2868 = fcmp fast ogt float %2864, 0.000000e+00
  %2869 = lshr i32 %2860, 16
  %2870 = and i32 %2869, 255
  %2871 = uitofp i32 %2870 to float
  %2872 = fmul fast float %2871, 0x3F70101020000000
  %2873 = and i32 %2669, 15
  %2874 = lshr i32 4096, %2873
  %2875 = uitofp i32 %2874 to float
  %2876 = fmul fast float %2875, 0x3F30000000000000
  %2877 = lshr i32 %2669, 4
  %2878 = select i1 %2868, i32 255, i32 63
  %2879 = and i32 %2877, %2878
  %2880 = lshr i32 %2669, 12
  %2881 = and i32 %2880, 255
  %2882 = lshr i32 %2669, 10
  %2883 = and i32 %2882, 63
  %2884 = select i1 %2868, i32 %2881, i32 %2883
  %2885 = fmul fast float %2876, %2653
  %2886 = fmul fast float %2876, %2654
  %2887 = call float @dx.op.unary.f32(i32 22, float %2885)  ; Frc(value)
  %2888 = call float @dx.op.unary.f32(i32 22, float %2886)  ; Frc(value)
  %2889 = uitofp i32 %2879 to float
  %2890 = uitofp i32 %2884 to float
  %2891 = fmul fast float %2889, %2865
  %2892 = fmul fast float %2890, %2865
  %2893 = fmul fast float %2887, %2866
  %2894 = fmul fast float %2888, %2866
  %2895 = fadd fast float %2893, %2867
  %2896 = fadd fast float %2894, %2867
  %2897 = fadd fast float %2895, %2891
  %2898 = fadd fast float %2896, %2892
  %2899 = icmp ugt i32 %2669, 15
  %2900 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2901 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2902 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2900, %dx.types.Handle %2901, float %2897, float %2898, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2903 = extractvalue %dx.types.ResRet.f32 %2902, 0
  %2904 = select i1 %2899, float %2903, float %2872
  %2905 = fmul fast float %2904, %1912
  %2906 = fadd fast float %2905, %2858
  %2907 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %2908 = extractvalue %dx.types.CBufRet.i32 %2907, 0
  %2909 = extractvalue %dx.types.CBufRet.i32 %2907, 1
  %2910 = extractvalue %dx.types.CBufRet.i32 %2907, 2
  %2911 = extractvalue %dx.types.CBufRet.i32 %2907, 3
  %2912 = bitcast i32 %2911 to float
  %2913 = call float @dx.op.unary.f32(i32 6, float %2912)  ; FAbs(value)
  %2914 = bitcast i32 %2909 to float
  %2915 = bitcast i32 %2910 to float
  %2916 = fcmp fast ogt float %2912, 0.000000e+00
  %2917 = lshr i32 %2908, 16
  %2918 = and i32 %2917, 255
  %2919 = uitofp i32 %2918 to float
  %2920 = fmul fast float %2919, 0x3F70101020000000
  %2921 = and i32 %2672, 15
  %2922 = lshr i32 4096, %2921
  %2923 = uitofp i32 %2922 to float
  %2924 = fmul fast float %2923, 0x3F30000000000000
  %2925 = lshr i32 %2672, 4
  %2926 = select i1 %2916, i32 255, i32 63
  %2927 = and i32 %2925, %2926
  %2928 = lshr i32 %2672, 12
  %2929 = and i32 %2928, 255
  %2930 = lshr i32 %2672, 10
  %2931 = and i32 %2930, 63
  %2932 = select i1 %2916, i32 %2929, i32 %2931
  %2933 = fmul fast float %2924, %2653
  %2934 = fmul fast float %2924, %2654
  %2935 = call float @dx.op.unary.f32(i32 22, float %2933)  ; Frc(value)
  %2936 = call float @dx.op.unary.f32(i32 22, float %2934)  ; Frc(value)
  %2937 = uitofp i32 %2927 to float
  %2938 = uitofp i32 %2932 to float
  %2939 = fmul fast float %2937, %2913
  %2940 = fmul fast float %2938, %2913
  %2941 = fmul fast float %2935, %2914
  %2942 = fmul fast float %2936, %2914
  %2943 = fadd fast float %2941, %2915
  %2944 = fadd fast float %2942, %2915
  %2945 = fadd fast float %2943, %2939
  %2946 = fadd fast float %2944, %2940
  %2947 = icmp ugt i32 %2672, 15
  %2948 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2949 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2950 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2948, %dx.types.Handle %2949, float %2945, float %2946, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2951 = extractvalue %dx.types.ResRet.f32 %2950, 0
  %2952 = select i1 %2947, float %2951, float %2920
  %2953 = fmul fast float %2952, %1924
  %2954 = fadd fast float %2906, %2953
  %2955 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %2956 = extractvalue %dx.types.CBufRet.i32 %2955, 0
  %2957 = extractvalue %dx.types.CBufRet.i32 %2955, 1
  %2958 = extractvalue %dx.types.CBufRet.i32 %2955, 2
  %2959 = extractvalue %dx.types.CBufRet.i32 %2955, 3
  %2960 = bitcast i32 %2959 to float
  %2961 = call float @dx.op.unary.f32(i32 6, float %2960)  ; FAbs(value)
  %2962 = bitcast i32 %2957 to float
  %2963 = bitcast i32 %2958 to float
  %2964 = fcmp fast ogt float %2960, 0.000000e+00
  %2965 = lshr i32 %2956, 16
  %2966 = and i32 %2965, 255
  %2967 = uitofp i32 %2966 to float
  %2968 = fmul fast float %2967, 0x3F70101020000000
  %2969 = and i32 %2673, 15
  %2970 = lshr i32 4096, %2969
  %2971 = uitofp i32 %2970 to float
  %2972 = fmul fast float %2971, 0x3F30000000000000
  %2973 = lshr i32 %2673, 4
  %2974 = select i1 %2964, i32 255, i32 63
  %2975 = and i32 %2973, %2974
  %2976 = lshr i32 %2673, 12
  %2977 = and i32 %2976, 255
  %2978 = lshr i32 %2673, 10
  %2979 = and i32 %2978, 63
  %2980 = select i1 %2964, i32 %2977, i32 %2979
  %2981 = fmul fast float %2972, %2653
  %2982 = fmul fast float %2972, %2654
  %2983 = call float @dx.op.unary.f32(i32 22, float %2981)  ; Frc(value)
  %2984 = call float @dx.op.unary.f32(i32 22, float %2982)  ; Frc(value)
  %2985 = uitofp i32 %2975 to float
  %2986 = uitofp i32 %2980 to float
  %2987 = fmul fast float %2985, %2961
  %2988 = fmul fast float %2986, %2961
  %2989 = fmul fast float %2983, %2962
  %2990 = fmul fast float %2984, %2962
  %2991 = fadd fast float %2989, %2963
  %2992 = fadd fast float %2990, %2963
  %2993 = fadd fast float %2991, %2987
  %2994 = fadd fast float %2992, %2988
  %2995 = icmp ugt i32 %2673, 15
  %2996 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2997 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2998 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2996, %dx.types.Handle %2997, float %2993, float %2994, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2999 = extractvalue %dx.types.ResRet.f32 %2998, 0
  %3000 = select i1 %2995, float %2999, float %2968
  %3001 = fmul fast float %3000, %1930
  %3002 = fadd fast float %2954, %3001
  %3003 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %3004 = extractvalue %dx.types.CBufRet.i32 %3003, 0
  %3005 = extractvalue %dx.types.CBufRet.i32 %3003, 1
  %3006 = extractvalue %dx.types.CBufRet.i32 %3003, 2
  %3007 = extractvalue %dx.types.CBufRet.i32 %3003, 3
  %3008 = bitcast i32 %3007 to float
  %3009 = call float @dx.op.unary.f32(i32 6, float %3008)  ; FAbs(value)
  %3010 = bitcast i32 %3005 to float
  %3011 = bitcast i32 %3006 to float
  %3012 = fcmp fast ogt float %3008, 0.000000e+00
  %3013 = lshr i32 %3004, 16
  %3014 = and i32 %3013, 255
  %3015 = uitofp i32 %3014 to float
  %3016 = fmul fast float %3015, 0x3F70101020000000
  %3017 = and i32 %2674, 15
  %3018 = lshr i32 4096, %3017
  %3019 = uitofp i32 %3018 to float
  %3020 = fmul fast float %3019, 0x3F30000000000000
  %3021 = lshr i32 %2674, 4
  %3022 = select i1 %3012, i32 255, i32 63
  %3023 = and i32 %3021, %3022
  %3024 = lshr i32 %2674, 12
  %3025 = and i32 %3024, 255
  %3026 = lshr i32 %2674, 10
  %3027 = and i32 %3026, 63
  %3028 = select i1 %3012, i32 %3025, i32 %3027
  %3029 = fmul fast float %3020, %2653
  %3030 = fmul fast float %3020, %2654
  %3031 = call float @dx.op.unary.f32(i32 22, float %3029)  ; Frc(value)
  %3032 = call float @dx.op.unary.f32(i32 22, float %3030)  ; Frc(value)
  %3033 = uitofp i32 %3023 to float
  %3034 = uitofp i32 %3028 to float
  %3035 = fmul fast float %3033, %3009
  %3036 = fmul fast float %3034, %3009
  %3037 = fmul fast float %3031, %3010
  %3038 = fmul fast float %3032, %3010
  %3039 = fadd fast float %3037, %3011
  %3040 = fadd fast float %3038, %3011
  %3041 = fadd fast float %3039, %3035
  %3042 = fadd fast float %3040, %3036
  %3043 = icmp ugt i32 %2674, 15
  %3044 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3045 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3046 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3044, %dx.types.Handle %3045, float %3041, float %3042, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3047 = extractvalue %dx.types.ResRet.f32 %3046, 0
  %3048 = select i1 %3043, float %3047, float %3016
  %3049 = fmul fast float %3048, %1936
  %3050 = fadd fast float %3002, %3049
  %3051 = call float @dx.op.unary.f32(i32 7, float %2809)  ; Saturate(value)
  %3052 = call float @dx.op.unary.f32(i32 7, float %2810)  ; Saturate(value)
  %3053 = call float @dx.op.unary.f32(i32 7, float %2811)  ; Saturate(value)
  %3054 = call float @dx.op.unary.f32(i32 7, float %3050)  ; Saturate(value)
  %3055 = fmul fast float %3054, %78
  %3056 = fadd fast float %3055, %77
  %3057 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3058 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %1875, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3059 = extractvalue %dx.types.ResRet.f32 %3058, 0
  %3060 = bitcast float %3059 to i32
  %3061 = and i32 %3060, 8
  %3062 = icmp ne i32 %3061, 0
  %3063 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 192)  ; CBufferLoadLegacy(handle,regIndex)
  %3064 = extractvalue %dx.types.CBufRet.f32 %3063, 3
  %3065 = fcmp fast ogt float %3064, 0.000000e+00
  %3066 = and i1 %3065, %3062
  br i1 %3066, label %3067, label %3122, !dx.controlflow.hints !93

; <label>:3067                                    ; preds = %1850
  %3068 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %3069 = extractvalue %dx.types.CBufRet.f32 %3068, 2
  %3070 = extractvalue %dx.types.CBufRet.f32 %3068, 3
  %3071 = fmul fast float %3069, %58
  %3072 = fmul fast float %3070, %59
  %3073 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3074 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %48, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3075 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3073, %dx.types.Handle %3074, float %3071, float %3072, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3076 = extractvalue %dx.types.ResRet.f32 %3075, 0
  %3077 = extractvalue %dx.types.ResRet.f32 %3075, 1
  %3078 = extractvalue %dx.types.ResRet.f32 %3075, 2
  %3079 = extractvalue %dx.types.ResRet.f32 %3075, 3
  %3080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3081 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3080, %dx.types.Handle %3074, float %3071, float %3072, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3082 = extractvalue %dx.types.ResRet.f32 %3081, 0
  %3083 = extractvalue %dx.types.ResRet.f32 %3081, 1
  %3084 = extractvalue %dx.types.ResRet.f32 %3081, 2
  %3085 = extractvalue %dx.types.ResRet.f32 %3081, 3
  %3086 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3087 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3086, %dx.types.Handle %3074, float %3071, float %3072, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3088 = extractvalue %dx.types.ResRet.f32 %3087, 0
  %3089 = extractvalue %dx.types.ResRet.f32 %3087, 1
  %3090 = extractvalue %dx.types.ResRet.f32 %3087, 2
  %3091 = extractvalue %dx.types.ResRet.f32 %3087, 3
  %3092 = fmul fast float %3082, 2.000000e+00
  %3093 = fmul fast float %3083, 2.000000e+00
  %3094 = fmul fast float %3084, 2.000000e+00
  %3095 = fadd fast float %3092, 0xBFF0101020000000
  %3096 = fadd fast float %3093, 0xBFF0101020000000
  %3097 = fadd fast float %3094, 0xBFF0101020000000
  %3098 = fmul fast float %3079, %3051
  %3099 = fmul fast float %3079, %3052
  %3100 = fmul fast float %3079, %3053
  %3101 = fadd fast float %3098, %3076
  %3102 = fadd fast float %3099, %3077
  %3103 = fadd fast float %3100, %3078
  %3104 = fmul fast float %3085, %2388
  %3105 = fmul fast float %3085, %2389
  %3106 = fmul fast float %3085, %2390
  %3107 = fadd fast float %3095, %3104
  %3108 = fadd fast float %3096, %3105
  %3109 = fadd fast float %3097, %3106
  %3110 = call float @dx.op.dot3.f32(i32 55, float %3107, float %3108, float %3109, float %3107, float %3108, float %3109)  ; Dot3(ax,ay,az,bx,by,bz)
  %3111 = call float @dx.op.unary.f32(i32 25, float %3110)  ; Rsqrt(value)
  %3112 = fmul fast float %3111, %3107
  %3113 = fmul fast float %3111, %3108
  %3114 = fmul fast float %3111, %3109
  %3115 = fmul fast float %3091, %3056
  %3116 = fadd fast float %3115, %3090
  %3117 = fmul fast float %3091, 5.000000e-01
  %3118 = fadd fast float %3117, %3089
  %3119 = fadd fast float %3085, %3079
  %3120 = fadd fast float %3119, %3091
  %3121 = fmul fast float %3120, 0x3FD5555560000000
  br label %3122

; <label>:3122                                    ; preds = %3067, %1850
  %3123 = phi float [ %3112, %3067 ], [ %2388, %1850 ]
  %3124 = phi float [ %3113, %3067 ], [ %2389, %1850 ]
  %3125 = phi float [ %3114, %3067 ], [ %2390, %1850 ]
  %3126 = phi float [ %3101, %3067 ], [ %3051, %1850 ]
  %3127 = phi float [ %3102, %3067 ], [ %3052, %1850 ]
  %3128 = phi float [ %3103, %3067 ], [ %3053, %1850 ]
  %3129 = phi float [ %3088, %3067 ], [ 0.000000e+00, %1850 ]
  %3130 = phi float [ %3118, %3067 ], [ 5.000000e-01, %1850 ]
  %3131 = phi float [ %3116, %3067 ], [ %3056, %1850 ]
  %3132 = phi float [ %3121, %3067 ], [ 1.000000e+00, %1850 ]
  %3133 = and i32 %3060, 256
  %3134 = icmp ne i32 %3133, 0
  %3135 = and i32 %3060, 512
  %3136 = icmp ne i32 %3135, 0
  %3137 = select i1 %3136, float 1.000000e+00, float 0.000000e+00
  %3138 = select i1 %3134, float 2.000000e+00, float 0.000000e+00
  %3139 = fadd fast float %3138, %3137
  %3140 = fmul fast float %3139, 0x3FD5555560000000
  %3141 = and i32 %3060, 4
  %3142 = icmp eq i32 %3141, 0
  br i1 %3142, label %3221, label %3143, !dx.controlflow.hints !94

; <label>:3143                                    ; preds = %3122
  %3144 = fmul fast float %64, 2.097152e+06
  %3145 = fmul fast float %65, 2.097152e+06
  %3146 = fmul fast float %66, 2.097152e+06
  %3147 = fadd fast float %1877, %3144
  %3148 = fadd fast float %1878, %3145
  %3149 = fadd fast float %1879, %3146
  %3150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %3151 = extractvalue %dx.types.CBufRet.f32 %3150, 0
  %3152 = extractvalue %dx.types.CBufRet.f32 %3150, 1
  %3153 = extractvalue %dx.types.CBufRet.f32 %3150, 2
  %3154 = fmul fast float %3151, %3147
  %3155 = fmul fast float %3152, %3148
  %3156 = fmul fast float %3153, %3149
  %3157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 232)  ; CBufferLoadLegacy(handle,regIndex)
  %3158 = extractvalue %dx.types.CBufRet.f32 %3157, 0
  %3159 = extractvalue %dx.types.CBufRet.f32 %3157, 1
  %3160 = extractvalue %dx.types.CBufRet.f32 %3157, 2
  %3161 = fadd fast float %3154, %3158
  %3162 = fadd fast float %3155, %3159
  %3163 = fadd fast float %3156, %3160
  %3164 = call float @dx.op.binary.f32(i32 35, float %3161, float 0.000000e+00)  ; FMax(a,b)
  %3165 = call float @dx.op.binary.f32(i32 35, float %3162, float 0.000000e+00)  ; FMax(a,b)
  %3166 = call float @dx.op.binary.f32(i32 35, float %3163, float 0.000000e+00)  ; FMax(a,b)
  %3167 = call float @dx.op.binary.f32(i32 36, float %3164, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %3168 = call float @dx.op.binary.f32(i32 36, float %3165, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %3169 = call float @dx.op.binary.f32(i32 36, float %3166, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %3170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %3171 = extractvalue %dx.types.CBufRet.f32 %3170, 0
  %3172 = extractvalue %dx.types.CBufRet.f32 %3170, 1
  %3173 = extractvalue %dx.types.CBufRet.f32 %3170, 2
  %3174 = fmul fast float %3171, %3167
  %3175 = fmul fast float %3172, %3168
  %3176 = fmul fast float %3173, %3169
  %3177 = fptosi float %3174 to i32
  %3178 = fptosi float %3175 to i32
  %3179 = fptosi float %3176 to i32
  %3180 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %3181 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3180, i32 0, i32 %3177, i32 %3178, i32 %3179, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3182 = extractvalue %dx.types.ResRet.i32 %3181, 0
  %3183 = extractvalue %dx.types.ResRet.i32 %3181, 1
  %3184 = extractvalue %dx.types.ResRet.i32 %3181, 2
  %3185 = extractvalue %dx.types.ResRet.i32 %3181, 3
  %3186 = uitofp i32 %3182 to float
  %3187 = uitofp i32 %3183 to float
  %3188 = uitofp i32 %3184 to float
  %3189 = uitofp i32 %3185 to float
  %3190 = extractvalue %dx.types.CBufRet.f32 %3170, 3
  %3191 = fadd fast float %3190, 1.000000e+00
  %3192 = fmul fast float %3191, %3186
  %3193 = fmul fast float %3191, %3187
  %3194 = fmul fast float %3191, %3188
  %3195 = fdiv fast float %3174, %3189
  %3196 = fdiv fast float %3175, %3189
  %3197 = fdiv fast float %3176, %3189
  %3198 = call float @dx.op.unary.f32(i32 22, float %3195)  ; Frc(value)
  %3199 = call float @dx.op.unary.f32(i32 22, float %3196)  ; Frc(value)
  %3200 = call float @dx.op.unary.f32(i32 22, float %3197)  ; Frc(value)
  %3201 = fmul fast float %3190, %3198
  %3202 = fmul fast float %3190, %3199
  %3203 = fmul fast float %3190, %3200
  %3204 = fadd fast float %3192, 5.000000e-01
  %3205 = fadd fast float %3204, %3201
  %3206 = fadd fast float %3193, 5.000000e-01
  %3207 = fadd fast float %3206, %3202
  %3208 = fadd fast float %3194, 5.000000e-01
  %3209 = fadd fast float %3208, %3203
  %3210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %3211 = extractvalue %dx.types.CBufRet.f32 %3210, 0
  %3212 = extractvalue %dx.types.CBufRet.f32 %3210, 1
  %3213 = extractvalue %dx.types.CBufRet.f32 %3210, 2
  %3214 = fmul fast float %3205, %3211
  %3215 = fmul fast float %3207, %3212
  %3216 = fmul fast float %3209, %3213
  %3217 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3218 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %50, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3219 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3217, %dx.types.Handle %3218, float %3214, float %3215, float %3216, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3220 = extractvalue %dx.types.ResRet.f32 %3219, 0
  br label %3221

; <label>:3221                                    ; preds = %3143, %3122
  %3222 = phi float [ %3220, %3143 ], [ 1.000000e+00, %3122 ]
  %3223 = fmul fast float %3130, 0x3FB47AE140000000
  %3224 = fsub fast float %3126, %3223
  %3225 = fsub fast float %3127, %3223
  %3226 = fsub fast float %3128, %3223
  %3227 = fmul fast float %3224, %3129
  %3228 = fmul fast float %3225, %3129
  %3229 = fmul fast float %3226, %3129
  %3230 = fadd fast float %3227, %3223
  %3231 = fadd fast float %3228, %3223
  %3232 = fadd fast float %3229, %3223
  %3233 = fmul fast float %3129, %3126
  %3234 = fmul fast float %3129, %3127
  %3235 = fmul fast float %3129, %3128
  %3236 = fsub fast float %3126, %3233
  %3237 = fsub fast float %3127, %3234
  %3238 = fsub fast float %3128, %3235
  %3239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %3240 = extractvalue %dx.types.CBufRet.f32 %3239, 3
  %3241 = fmul fast float %3240, %3236
  %3242 = fmul fast float %3240, %3237
  %3243 = fmul fast float %3240, %3238
  %3244 = extractvalue %dx.types.CBufRet.f32 %3239, 0
  %3245 = extractvalue %dx.types.CBufRet.f32 %3239, 1
  %3246 = extractvalue %dx.types.CBufRet.f32 %3239, 2
  %3247 = fadd fast float %3241, %3244
  %3248 = fadd fast float %3242, %3245
  %3249 = fadd fast float %3243, %3246
  %3250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %3251 = extractvalue %dx.types.CBufRet.f32 %3250, 3
  %3252 = fmul fast float %3251, %3230
  %3253 = fmul fast float %3251, %3231
  %3254 = fmul fast float %3251, %3232
  %3255 = extractvalue %dx.types.CBufRet.f32 %3250, 0
  %3256 = extractvalue %dx.types.CBufRet.f32 %3250, 1
  %3257 = extractvalue %dx.types.CBufRet.f32 %3250, 2
  %3258 = fadd fast float %3252, %3255
  %3259 = fadd fast float %3253, %3256
  %3260 = fadd fast float %3254, %3257
  %3261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %3262 = extractvalue %dx.types.CBufRet.f32 %3261, 3
  %3263 = fcmp fast une float %3262, 0.000000e+00
  %3264 = fmul fast float %3258, 0x3FDCCCCCC0000000
  %3265 = fmul fast float %3259, 0x3FDCCCCCC0000000
  %3266 = fmul fast float %3260, 0x3FDCCCCCC0000000
  %3267 = fadd fast float %3264, %3247
  %3268 = fadd fast float %3265, %3248
  %3269 = fadd fast float %3266, %3249
  %3270 = select i1 %3263, float %3267, float %3247
  %3271 = select i1 %3263, float %3268, float %3248
  %3272 = select i1 %3263, float %3269, float %3249
  %3273 = select i1 %3263, float 0.000000e+00, float %3264
  %3274 = select i1 %3263, float 0.000000e+00, float %3265
  %3275 = select i1 %3263, float 0.000000e+00, float %3266
  %3276 = fadd fast float %3270, %3273
  %3277 = fadd fast float %3271, %3274
  %3278 = fadd fast float %3272, %3275
  %3279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %3280 = extractvalue %dx.types.CBufRet.f32 %3279, 2
  %3281 = fmul fast float %3276, %3280
  %3282 = fmul fast float %3277, %3280
  %3283 = fmul fast float %3278, %3280
  %3284 = call float @dx.op.binary.f32(i32 35, float %2396, float 0.000000e+00)  ; FMax(a,b)
  %3285 = call float @dx.op.binary.f32(i32 35, float %2397, float 0.000000e+00)  ; FMax(a,b)
  %3286 = call float @dx.op.binary.f32(i32 35, float %2398, float 0.000000e+00)  ; FMax(a,b)
  %3287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %3288 = extractvalue %dx.types.CBufRet.f32 %3287, 0
  %3289 = fcmp fast ogt float %3288, 0.000000e+00
  br i1 %3289, label %3290, label %3363, !dx.controlflow.hints !95

; <label>:3290                                    ; preds = %3221
  %3291 = add nsw i32 %1875, 1
  %3292 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %3291, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3293 = extractvalue %dx.types.ResRet.f32 %3292, 0
  %3294 = extractvalue %dx.types.ResRet.f32 %3292, 1
  %3295 = extractvalue %dx.types.ResRet.f32 %3292, 2
  %3296 = add nsw i32 %1875, 18
  %3297 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %3296, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3298 = extractvalue %dx.types.ResRet.f32 %3297, 0
  %3299 = extractvalue %dx.types.ResRet.f32 %3297, 1
  %3300 = extractvalue %dx.types.ResRet.f32 %3297, 2
  %3301 = add nsw i32 %1875, 17
  %3302 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %3301, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3303 = extractvalue %dx.types.ResRet.f32 %3302, 3
  %3304 = add nsw i32 %1875, 24
  %3305 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %3304, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3306 = extractvalue %dx.types.ResRet.f32 %3305, 3
  %3307 = add nsw i32 %1875, 25
  %3308 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %3307, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3309 = extractvalue %dx.types.ResRet.f32 %3308, 3
  %3310 = add nsw i32 %1875, 31
  %3311 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3057, i32 %3310, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3312 = extractvalue %dx.types.ResRet.f32 %3311, 0
  %3313 = fsub fast float %64, %3293
  %3314 = fsub fast float %65, %3294
  %3315 = fsub fast float %66, %3295
  %3316 = fmul fast float %3313, 2.097152e+06
  %3317 = fmul fast float %3314, 2.097152e+06
  %3318 = fmul fast float %3315, 2.097152e+06
  %3319 = fadd fast float %3316, %1877
  %3320 = fsub fast float %3319, %3298
  %3321 = fadd fast float %3317, %1878
  %3322 = fsub fast float %3321, %3299
  %3323 = fadd fast float %3318, %1879
  %3324 = fsub fast float %3323, %3300
  %3325 = call float @dx.op.unary.f32(i32 6, float %3320)  ; FAbs(value)
  %3326 = call float @dx.op.unary.f32(i32 6, float %3322)  ; FAbs(value)
  %3327 = call float @dx.op.unary.f32(i32 6, float %3324)  ; FAbs(value)
  %3328 = fadd fast float %3303, 1.000000e+00
  %3329 = fadd fast float %3306, 1.000000e+00
  %3330 = fadd fast float %3309, 1.000000e+00
  %3331 = fcmp fast ogt float %3325, %3328
  %3332 = fcmp fast ogt float %3326, %3329
  %3333 = fcmp fast ogt float %3327, %3330
  %3334 = or i1 %3331, %3332
  %3335 = or i1 %3334, %3333
  br i1 %3335, label %3336, label %3349

; <label>:3336                                    ; preds = %3290
  %3337 = fadd fast float %1878, %1877
  %3338 = fadd fast float %64, %65
  %3339 = fadd fast float %3337, %1879
  %3340 = fadd fast float %3338, %66
  %3341 = fmul fast float %3339, 0x3F52E83A20000000
  %3342 = fmul fast float %3340, 0x40A2E83A20000000
  %3343 = call float @dx.op.unary.f32(i32 22, float %3342)  ; Frc(value)
  %3344 = fadd fast float %3343, %3341
  %3345 = call float @dx.op.unary.f32(i32 22, float %3344)  ; Frc(value)
  %3346 = fcmp fast ogt float %3345, 5.000000e-01
  %3347 = uitofp i1 %3346 to float
  %3348 = fsub fast float 1.000000e+00, %3347
  br label %3363

; <label>:3349                                    ; preds = %3290
  %3350 = fcmp fast ogt float %3312, 0.000000e+00
  br i1 %3350, label %3351, label %3363

; <label>:3351                                    ; preds = %3349
  %3352 = fsub fast float -0.000000e+00, %3312
  %3353 = call float @dx.op.unary.f32(i32 6, float %3352)  ; FAbs(value)
  %3354 = fmul fast float %3353, 2.000000e+01
  %3355 = call float @dx.op.unary.f32(i32 7, float %3354)  ; Saturate(value)
  %3356 = fsub fast float 1.000000e+00, %3355
  %3357 = fcmp fast ogt float %3356, 0.000000e+00
  %3358 = fcmp fast olt float %3356, 0.000000e+00
  %3359 = zext i1 %3357 to i32
  %3360 = zext i1 %3358 to i32
  %3361 = sub nsw i32 %3359, %3360
  %3362 = sitofp i32 %3361 to float
  br label %3363

; <label>:3363                                    ; preds = %3351, %3349, %3336, %3221
  %3364 = phi float [ 1.000000e+00, %3336 ], [ %3362, %3351 ], [ 1.000000e+00, %3349 ], [ 1.000000e+00, %3221 ]
  %3365 = phi float [ %3348, %3336 ], [ %3356, %3351 ], [ %3284, %3349 ], [ %3284, %3221 ]
  %3366 = phi float [ 1.000000e+00, %3336 ], [ 0.000000e+00, %3351 ], [ %3285, %3349 ], [ %3285, %3221 ]
  %3367 = phi float [ %3347, %3336 ], [ %3356, %3351 ], [ %3286, %3349 ], [ %3286, %3221 ]
  %3368 = fadd fast float %3365, %3281
  %3369 = fadd fast float %3366, %3282
  %3370 = fadd fast float %3367, %3283
  %3371 = fmul fast float %58, 7.812500e-03
  %3372 = fmul fast float %59, 7.812500e-03
  %3373 = call float @dx.op.unary.f32(i32 22, float %3371)  ; Frc(value)
  %3374 = call float @dx.op.unary.f32(i32 22, float %3372)  ; Frc(value)
  %3375 = fmul fast float %3373, 1.280000e+02
  %3376 = fmul fast float %3374, 1.280000e+02
  %3377 = fadd fast float %3375, 0xC05015CCC0000000
  %3378 = fadd fast float %3376, 0xC0521DCCC0000000
  %3379 = fmul fast float %3377, %3377
  %3380 = fmul fast float %3378, %3378
  %3381 = fmul fast float %3378, %3377
  %3382 = call float @dx.op.dot3.f32(i32 55, float %3379, float %3380, float %3381, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3383 = call float @dx.op.unary.f32(i32 22, float %3382)  ; Frc(value)
  %3384 = fadd fast float %3383, -5.000000e-01
  %3385 = fmul fast float %3384, 0x3F70101020000000
  %3386 = fmul fast float %3123, 5.000000e-01
  %3387 = fmul fast float %3124, 5.000000e-01
  %3388 = fmul fast float %3125, 5.000000e-01
  %3389 = fadd fast float %3386, 5.000000e-01
  %3390 = fadd fast float %3387, 5.000000e-01
  %3391 = fadd fast float %3388, 5.000000e-01
  %3392 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3393 = extractvalue %dx.types.CBufRet.f32 %3392, 2
  %3394 = fmul fast float %3393, %3368
  %3395 = fmul fast float %3393, %3369
  %3396 = fmul fast float %3393, %3370
  %3397 = call float @dx.op.binary.f32(i32 36, float %3394, float 3.225600e+04)  ; FMin(a,b)
  %3398 = call float @dx.op.binary.f32(i32 36, float %3395, float 3.225600e+04)  ; FMin(a,b)
  %3399 = call float @dx.op.binary.f32(i32 36, float %3396, float 3.225600e+04)  ; FMin(a,b)
  %3400 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %3401 = extractvalue %dx.types.CBufRet.i32 %3400, 3
  %3402 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %3403 = extractvalue %dx.types.CBufRet.i32 %3402, 2
  %3404 = and i32 %3403, %1880
  %3405 = and i32 %3403, %1881
  %3406 = extractvalue %dx.types.CBufRet.i32 %3402, 1
  %3407 = and i32 %3406, 31
  %3408 = shl i32 %3405, %3407
  %3409 = add i32 %3408, %3404
  %3410 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 239)  ; CBufferLoadLegacy(handle,regIndex)
  %3411 = extractvalue %dx.types.CBufRet.i32 %3410, 0
  %3412 = icmp eq i32 %3409, %3411
  br i1 %3412, label %3413, label %3444, !dx.controlflow.hints !96

; <label>:3413                                    ; preds = %3363
  %3414 = fmul fast float %3364, %3132
  %3415 = lshr i32 %1880, %3407
  %3416 = lshr i32 %1881, %3407
  %3417 = call float @dx.op.binary.f32(i32 35, float %3414, float 0x3F947AE140000000)  ; FMax(a,b)
  %3418 = call float @dx.op.binary.f32(i32 36, float %3417, float 1.000000e+00)  ; FMin(a,b)
  %3419 = add i32 %3415, %3401
  %3420 = add i32 %3416, %3401
  %3421 = uitofp i32 %3419 to float
  %3422 = uitofp i32 %3420 to float
  %3423 = fmul fast float %3421, 7.812500e-03
  %3424 = fmul fast float %3422, 7.812500e-03
  %3425 = call float @dx.op.unary.f32(i32 22, float %3423)  ; Frc(value)
  %3426 = call float @dx.op.unary.f32(i32 22, float %3424)  ; Frc(value)
  %3427 = fmul fast float %3425, 1.280000e+02
  %3428 = fmul fast float %3426, 1.280000e+02
  %3429 = fadd fast float %3427, 0xC05015CCC0000000
  %3430 = fadd fast float %3428, 0xC0521DCCC0000000
  %3431 = fmul fast float %3429, %3429
  %3432 = fmul fast float %3430, %3430
  %3433 = fmul fast float %3430, %3429
  %3434 = call float @dx.op.dot3.f32(i32 55, float %3431, float %3432, float %3433, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3435 = call float @dx.op.unary.f32(i32 22, float %3434)  ; Frc(value)
  %3436 = fadd fast float %3435, %1876
  %3437 = call float @dx.op.unary.f32(i32 22, float %3436)  ; Frc(value)
  %3438 = fcmp fast ogt float %3418, %3437
  br i1 %3438, label %3439, label %3444, !dx.controlflow.hints !97

; <label>:3439                                    ; preds = %3413
  %3440 = extractvalue %dx.types.CBufRet.i32 %3402, 3
  %3441 = mul i32 %3440, %3416
  %3442 = add i32 %3441, %3415
  %3443 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %3443, i32 %3442, i32 0, i32 %2685, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %3444

; <label>:3444                                    ; preds = %3439, %3413, %3363
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %3397)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3398)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %3399)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %3389)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %3390)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %3391)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %3140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %3129)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %3130)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %3131)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3FE0303040000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %3126)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %3127)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %3128)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %3385)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %3222)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!67}
!dx.entryPoints = !{!68}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, !40, !43, !48}
!5 = !{!6, !8, !10, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 16}
!12 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !11}
!13 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !9}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 8, i32 1, i32 11, i32 0, null}
!18 = !{i32 9, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!24 = !{i32 15, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!35 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!36 = !{i32 27, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 27, i32 1, i32 2, i32 0, !9}
!37 = !{i32 28, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 28, i32 1, i32 2, i32 0, !9}
!38 = !{i32 29, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 29, i32 1, i32 2, i32 0, !9}
!39 = !{i32 30, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 30, i32 1, i32 2, i32 0, !9}
!40 = !{!41}
!41 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !42}
!42 = !{i32 1, i32 4}
!43 = !{!44, !45, !46, !47}
!44 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!45 = !{i32 1, %UniformBufferConstants_Scene* undef, !"", i32 0, i32 1, i32 1, i32 56, null}
!46 = !{i32 2, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 2, i32 1, i32 188, null}
!47 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 748, null}
!48 = !{!49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66}
!49 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!50 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!51 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!52 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!53 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!54 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!55 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!56 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!57 = !{i32 8, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!58 = !{i32 9, %struct.SamplerState* undef, !"", i32 0, i32 9, i32 1, i32 0, null}
!59 = !{i32 10, %struct.SamplerState* undef, !"", i32 0, i32 10, i32 1, i32 0, null}
!60 = !{i32 11, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!61 = !{i32 12, %struct.SamplerState* undef, !"", i32 0, i32 12, i32 1, i32 0, null}
!62 = !{i32 13, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!63 = !{i32 14, %struct.SamplerState* undef, !"", i32 0, i32 14, i32 1, i32 0, null}
!64 = !{i32 15, %struct.SamplerState* undef, !"", i32 0, i32 15, i32 1, i32 0, null}
!65 = !{i32 16, %struct.SamplerState* undef, !"", i32 0, i32 16, i32 1, i32 0, null}
!66 = !{i32 17, %struct.SamplerState* undef, !"", i32 0, i32 17, i32 1, i32 0, null}
!67 = !{[10 x i32] [i32 8, i32 24, i32 0, i32 0, i32 0, i32 0, i32 1112055, i32 1112055, i32 0, i32 1078391]}
!68 = !{void ()* @MainPS, !"MainPS", !69, !4, !88}
!69 = !{!70, !77, null}
!70 = !{!71, !73, !74, !76}
!71 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !72, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!72 = !{i32 0}
!73 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !72, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!74 = !{i32 2, !"SV_Position", i8 9, i8 3, !72, i8 4, i32 1, i8 4, i32 1, i8 0, !75}
!75 = !{i32 3, i32 11}
!76 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !72, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!77 = !{!78, !80, !82, !84, !86}
!78 = !{i32 0, !"SV_Target", i8 9, i8 16, !72, i8 0, i32 1, i8 4, i32 0, i8 0, !79}
!79 = !{i32 3, i32 15}
!80 = !{i32 1, !"SV_Target", i8 9, i8 16, !81, i8 0, i32 1, i8 4, i32 1, i8 0, !79}
!81 = !{i32 1}
!82 = !{i32 2, !"SV_Target", i8 9, i8 16, !83, i8 0, i32 1, i8 4, i32 2, i8 0, !79}
!83 = !{i32 2}
!84 = !{i32 3, !"SV_Target", i8 9, i8 16, !85, i8 0, i32 1, i8 4, i32 3, i8 0, !79}
!85 = !{i32 3}
!86 = !{i32 4, !"SV_Target", i8 9, i8 16, !87, i8 0, i32 1, i8 4, i32 5, i8 0, !79}
!87 = !{i32 5}
!88 = !{i32 0, i64 24, i32 5, !72}
!89 = distinct !{!89, !"dx.controlflow.hints", i32 1}
!90 = distinct !{!90, !"dx.controlflow.hints", i32 1}
!91 = distinct !{!91, !"dx.controlflow.hints", i32 1}
!92 = distinct !{!92, !"dx.controlflow.hints", i32 1}
!93 = distinct !{!93, !"dx.controlflow.hints", i32 2}
!94 = distinct !{!94, !"dx.controlflow.hints", i32 1}
!95 = distinct !{!95, !"dx.controlflow.hints", i32 1}
!96 = distinct !{!96, !"dx.controlflow.hints", i32 1}
!97 = distinct !{!97, !"dx.controlflow.hints", i32 1}
