;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyzw        2     NONE   float       
; PRIMITIVE_ID             0   x           3     NONE    uint   x   
; SV_IsFrontFace           0    y          3    FFACE    uint       
; TEXCOORD                 9   xyz         4     NONE   float   xyz 
; SV_Position              0   xyzw        5      POS   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                5   xyzw        5   TARGET   float   xyzw
;
; shader hash: 52dddebe03696c98b94ec5955db01ee3
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; PRIMITIVE_ID             0        nointerpolation       
; TEXCOORD                 9                 linear       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                5                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LandscapeParameters
; {
;
;   struct hostlayout.UniformBufferConstants_LandscapeParameters
;   {
;
;       int LandscapeParameters_ComponentBaseX;       ; Offset:    0
;       int LandscapeParameters_ComponentBaseY;       ; Offset:    4
;       int LandscapeParameters_SubsectionSizeVerts;  ; Offset:    8
;       int LandscapeParameters_NumSubsections;       ; Offset:   12
;       int LandscapeParameters_LastLOD;              ; Offset:   16
;       uint LandscapeParameters_VirtualTexturePerPixelHeight;; Offset:   20
;       uint PrePadding_LandscapeParameters_24;       ; Offset:   24
;       uint PrePadding_LandscapeParameters_28;       ; Offset:   28
;       float4 LandscapeParameters_HeightmapTextureSize;; Offset:   32
;       float4 LandscapeParameters_HeightmapUVScaleBias;; Offset:   48
;       float4 LandscapeParameters_WeightmapUVScaleBias;; Offset:   64
;       float4 LandscapeParameters_LandscapeLightmapScaleBias;; Offset:   80
;       float4 LandscapeParameters_SubsectionSizeVertsLayerUVPan;; Offset:   96
;       float4 LandscapeParameters_SubsectionOffsetParams;; Offset:  112
;       float4 LandscapeParameters_LightmapSubsectionOffsetParams;; Offset:  128
;       row_major float4x4 LandscapeParameters_LocalToWorldNoScaling;; Offset:  144
;       uint BindlessResource_LandscapeParameters_HeightmapTexture;; Offset:  208
;       uint PrePadding_LandscapeParameters_212;      ; Offset:  212
;       uint BindlessSampler_LandscapeParameters_HeightmapTextureSampler;; Offset:  216
;       uint PrePadding_LandscapeParameters_220;      ; Offset:  220
;       uint BindlessResource_LandscapeParameters_NormalmapTexture;; Offset:  224
;       uint PrePadding_LandscapeParameters_228;      ; Offset:  228
;       uint BindlessSampler_LandscapeParameters_NormalmapTextureSampler;; Offset:  232
;       uint PrePadding_LandscapeParameters_236;      ; Offset:  236
;       uint BindlessResource_LandscapeParameters_XYOffsetmapTexture;; Offset:  240
;       uint PrePadding_LandscapeParameters_244;      ; Offset:  244
;       uint BindlessSampler_LandscapeParameters_XYOffsetmapTextureSampler;; Offset:  248
;   
;   } UniformBufferConstants_LandscapeParameters;     ; Offset:    0 Size:   252
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       uint4 Material_VTPackedPageTableUniform[6];   ; Offset:    0
;       uint4 Material_VTPackedUniform[18];           ; Offset:   96
;       float4 Material_PreshaderBuffer[8];           ; Offset:  384
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  512
;       uint PrePadding_Material_516;                 ; Offset:  516
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  520
;       uint PrePadding_Material_524;                 ; Offset:  524
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  528
;       uint PrePadding_Material_532;                 ; Offset:  532
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  536
;       uint PrePadding_Material_540;                 ; Offset:  540
;       uint BindlessResource_Material_VirtualTexturePageTable0_0;; Offset:  544
;       uint PrePadding_Material_548;                 ; Offset:  548
;       uint BindlessResource_Material_VirtualTexturePageTable1_0;; Offset:  552
;       uint PrePadding_Material_556;                 ; Offset:  556
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_0;; Offset:  560
;       uint PrePadding_Material_564;                 ; Offset:  564
;       uint BindlessResource_Material_VirtualTexturePageTable0_1;; Offset:  568
;       uint PrePadding_Material_572;                 ; Offset:  572
;       uint BindlessResource_Material_VirtualTexturePageTable1_1;; Offset:  576
;       uint PrePadding_Material_580;                 ; Offset:  580
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_1;; Offset:  584
;       uint PrePadding_Material_588;                 ; Offset:  588
;       uint BindlessResource_Material_VirtualTexturePageTable0_2;; Offset:  592
;       uint PrePadding_Material_596;                 ; Offset:  596
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_2;; Offset:  600
;       uint PrePadding_Material_604;                 ; Offset:  604
;       uint BindlessResource_Material_VirtualTexturePhysical_0;; Offset:  608
;       uint PrePadding_Material_612;                 ; Offset:  612
;       uint BindlessSampler_Material_VirtualTexturePhysical_0Sampler;; Offset:  616
;       uint PrePadding_Material_620;                 ; Offset:  620
;       uint BindlessResource_Material_VirtualTexturePhysical_1;; Offset:  624
;       uint PrePadding_Material_628;                 ; Offset:  628
;       uint BindlessSampler_Material_VirtualTexturePhysical_1Sampler;; Offset:  632
;       uint PrePadding_Material_636;                 ; Offset:  636
;       uint BindlessResource_Material_VirtualTexturePhysical_2;; Offset:  640
;       uint PrePadding_Material_644;                 ; Offset:  644
;       uint BindlessSampler_Material_VirtualTexturePhysical_2Sampler;; Offset:  648
;       uint PrePadding_Material_652;                 ; Offset:  652
;       uint BindlessResource_Material_VirtualTexturePhysical_3;; Offset:  656
;       uint PrePadding_Material_660;                 ; Offset:  660
;       uint BindlessSampler_Material_VirtualTexturePhysical_3Sampler;; Offset:  664
;       uint PrePadding_Material_668;                 ; Offset:  668
;       uint BindlessResource_Material_VirtualTexturePhysical_4;; Offset:  672
;       uint PrePadding_Material_676;                 ; Offset:  676
;       uint BindlessSampler_Material_VirtualTexturePhysical_4Sampler;; Offset:  680
;       uint PrePadding_Material_684;                 ; Offset:  684
;       uint BindlessResource_Material_VirtualTexturePhysical_5;; Offset:  688
;       uint PrePadding_Material_692;                 ; Offset:  692
;       uint BindlessSampler_Material_VirtualTexturePhysical_5Sampler;; Offset:  696
;       uint PrePadding_Material_700;                 ; Offset:  700
;       uint BindlessResource_Material_VirtualTexturePhysical_6;; Offset:  704
;       uint PrePadding_Material_708;                 ; Offset:  708
;       uint BindlessSampler_Material_VirtualTexturePhysical_6Sampler;; Offset:  712
;       uint PrePadding_Material_716;                 ; Offset:  716
;       uint BindlessResource_Material_VirtualTexturePhysical_7;; Offset:  720
;       uint PrePadding_Material_724;                 ; Offset:  724
;       uint BindlessSampler_Material_VirtualTexturePhysical_7Sampler;; Offset:  728
;       uint PrePadding_Material_732;                 ; Offset:  732
;       uint BindlessResource_Material_VirtualTexturePhysical_8;; Offset:  736
;       uint PrePadding_Material_740;                 ; Offset:  740
;       uint BindlessSampler_Material_VirtualTexturePhysical_8Sampler;; Offset:  744
;       uint PrePadding_Material_748;                 ; Offset:  748
;       uint BindlessResource_Material_VirtualTexturePhysical_9;; Offset:  752
;       uint PrePadding_Material_756;                 ; Offset:  756
;       uint BindlessSampler_Material_VirtualTexturePhysical_9Sampler;; Offset:  760
;       uint PrePadding_Material_764;                 ; Offset:  764
;       uint BindlessResource_Material_VirtualTexturePhysical_10;; Offset:  768
;       uint PrePadding_Material_772;                 ; Offset:  772
;       uint BindlessSampler_Material_VirtualTexturePhysical_10Sampler;; Offset:  776
;       uint PrePadding_Material_780;                 ; Offset:  780
;       uint BindlessResource_Material_VirtualTexturePhysical_11;; Offset:  784
;       uint PrePadding_Material_788;                 ; Offset:  788
;       uint BindlessSampler_Material_VirtualTexturePhysical_11Sampler;; Offset:  792
;       uint PrePadding_Material_796;                 ; Offset:  796
;       uint BindlessResource_Material_VirtualTexturePhysical_12;; Offset:  800
;       uint PrePadding_Material_804;                 ; Offset:  804
;       uint BindlessSampler_Material_VirtualTexturePhysical_12Sampler;; Offset:  808
;       uint PrePadding_Material_812;                 ; Offset:  812
;       uint BindlessResource_Material_VirtualTexturePhysical_13;; Offset:  816
;       uint PrePadding_Material_820;                 ; Offset:  820
;       uint BindlessSampler_Material_VirtualTexturePhysical_13Sampler;; Offset:  824
;       uint PrePadding_Material_828;                 ; Offset:  828
;       uint BindlessResource_Material_VirtualTexturePhysical_14;; Offset:  832
;       uint PrePadding_Material_836;                 ; Offset:  836
;       uint BindlessSampler_Material_VirtualTexturePhysical_14Sampler;; Offset:  840
;       uint PrePadding_Material_844;                 ; Offset:  844
;       uint BindlessResource_Material_VirtualTexturePhysical_15;; Offset:  848
;       uint PrePadding_Material_852;                 ; Offset:  852
;       uint BindlessSampler_Material_VirtualTexturePhysical_15Sampler;; Offset:  856
;       uint PrePadding_Material_860;                 ; Offset:  860
;       uint BindlessResource_Material_VirtualTexturePhysical_16;; Offset:  864
;       uint PrePadding_Material_868;                 ; Offset:  868
;       uint BindlessSampler_Material_VirtualTexturePhysical_16Sampler;; Offset:  872
;       uint PrePadding_Material_876;                 ; Offset:  876
;       uint BindlessResource_Material_VirtualTexturePhysical_17;; Offset:  880
;       uint PrePadding_Material_884;                 ; Offset:  884
;       uint BindlessSampler_Material_VirtualTexturePhysical_17Sampler;; Offset:  888
;       uint PrePadding_Material_892;                 ; Offset:  892
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  896
;       uint PrePadding_Material_900;                 ; Offset:  900
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  904
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   908
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_VTFeedbackBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_LandscapeParameters   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB2            cb2     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_LandscapeWeightmapSampler    sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S2             s2     1
; LandscapeParameters_NormalmapTextureSampler   sampler      NA          NA      S3             s3     1
; Material_VirtualTexturePhysical_0Sampler   sampler      NA          NA      S4             s4     1
; Material_VirtualTexturePhysical_1Sampler   sampler      NA          NA      S5             s5     1
; Material_VirtualTexturePhysical_2Sampler   sampler      NA          NA      S6             s6     1
; Material_VirtualTexturePhysical_3Sampler   sampler      NA          NA      S7             s7     1
; Material_VirtualTexturePhysical_4Sampler   sampler      NA          NA      S8             s8     1
; Material_VirtualTexturePhysical_5Sampler   sampler      NA          NA      S9             s9     1
; Material_VirtualTexturePhysical_6Sampler   sampler      NA          NA     S10            s10     1
; Material_VirtualTexturePhysical_7Sampler   sampler      NA          NA     S11            s11     1
; Material_VirtualTexturePhysical_8Sampler   sampler      NA          NA     S12            s12     1
; Material_VirtualTexturePhysical_9Sampler   sampler      NA          NA     S13            s13     1
; Material_VirtualTexturePhysical_10Sampler   sampler      NA          NA     S14            s14     1
; Material_VirtualTexturePhysical_11Sampler   sampler      NA          NA     S15            s15     1
; Material_VirtualTexturePhysical_12Sampler   sampler      NA          NA     S16            s16     1
; Material_VirtualTexturePhysical_13Sampler   sampler      NA          NA     S17            s17     1
; Material_VirtualTexturePhysical_14Sampler   sampler      NA          NA     S18            s18     1
; Material_VirtualTexturePhysical_15Sampler   sampler      NA          NA     S19            s19     1
; Material_VirtualTexturePhysical_16Sampler   sampler      NA          NA     S20            s20     1
; Material_VirtualTexturePhysical_17Sampler   sampler      NA          NA     S21            s21     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T1             t1     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T2             t2     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T3             t3     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T4             t4     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T5             t5     1
; LandscapeParameters_NormalmapTexture   texture     f32          2d      T6             t6     1
; Material_Texture2D_0              texture     f32          2d      T7             t7     1
; Material_Texture2D_1              texture     f32          2d      T8             t8     1
; Material_VirtualTexturePageTable0_0   texture     u32          2d      T9             t9     1
; Material_VirtualTexturePageTable1_0   texture     u32          2d     T10            t10     1
; Material_VirtualTexturePageTable0_1   texture     u32          2d     T11            t11     1
; Material_VirtualTexturePageTable1_1   texture     u32          2d     T12            t12     1
; Material_VirtualTexturePageTable0_2   texture     u32          2d     T13            t13     1
; Material_VirtualTexturePhysical_0   texture     f32          2d     T14            t14     1
; Material_VirtualTexturePhysical_1   texture     f32          2d     T15            t15     1
; Material_VirtualTexturePhysical_2   texture     f32          2d     T16            t16     1
; Material_VirtualTexturePhysical_3   texture     f32          2d     T17            t17     1
; Material_VirtualTexturePhysical_4   texture     f32          2d     T18            t18     1
; Material_VirtualTexturePhysical_5   texture     f32          2d     T19            t19     1
; Material_VirtualTexturePhysical_6   texture     f32          2d     T20            t20     1
; Material_VirtualTexturePhysical_7   texture     f32          2d     T21            t21     1
; Material_VirtualTexturePhysical_8   texture     f32          2d     T22            t22     1
; Material_VirtualTexturePhysical_9   texture     f32          2d     T23            t23     1
; Material_VirtualTexturePhysical_10   texture     f32          2d     T24            t24     1
; Material_VirtualTexturePhysical_11   texture     f32          2d     T25            t25     1
; Material_VirtualTexturePhysical_12   texture     f32          2d     T26            t26     1
; Material_VirtualTexturePhysical_13   texture     f32          2d     T27            t27     1
; Material_VirtualTexturePhysical_14   texture     f32          2d     T28            t28     1
; Material_VirtualTexturePhysical_15   texture     f32          2d     T29            t29     1
; Material_VirtualTexturePhysical_16   texture     f32          2d     T30            t30     1
; Material_VirtualTexturePhysical_17   texture     f32          2d     T31            t31     1
; View_VTFeedbackBuffer                 UAV  struct         r/w      U0             u0     1
;
;
; ViewId state:
;
; Number of inputs: 24, outputs: 24
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 12, 16, 17, 18, 20, 21, 22 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 12, 20, 21, 22 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 12, 16, 17, 18, 20, 21, 22 }
;   output 4 depends on inputs: { 0, 1, 4, 5, 6, 7, 12, 20, 21 }
;   output 5 depends on inputs: { 0, 1, 4, 5, 6, 7, 12, 20, 21 }
;   output 6 depends on inputs: { 0, 1, 4, 5, 6, 7, 12, 20, 21 }
;   output 7 depends on inputs: { 12 }
;   output 8 depends on inputs: { 12, 20, 21 }
;   output 9 depends on inputs: { 12, 20, 21 }
;   output 10 depends on inputs: { 0, 1, 4, 5, 12, 20, 21 }
;   output 12 depends on inputs: { 0, 1, 4, 5, 12, 20, 21 }
;   output 13 depends on inputs: { 0, 1, 4, 5, 12, 20, 21 }
;   output 14 depends on inputs: { 0, 1, 4, 5, 12, 20, 21 }
;   output 15 depends on inputs: { 20, 21 }
;   output 20 depends on inputs: { 12, 20, 21, 22 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture2D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture2D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_LandscapeParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [4 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [6 x <4 x i32>], [18 x <4 x i32>], [8 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 31, i32 31, i32 0, i8 0 }, i32 31, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 30, i32 30, i32 0, i8 0 }, i32 30, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 29, i32 29, i32 0, i8 0 }, i32 29, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 28, i32 28, i32 0, i8 0 }, i32 28, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 27, i32 27, i32 0, i8 0 }, i32 27, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 3 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 3 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 3 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 3 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 3 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 3 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 3 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 3 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 3 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 3 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 3 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 3 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 3 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 3 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %49 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %50 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %51 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %52 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %53 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %54 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %55 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %56 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %57 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %58 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %56, %dx.types.ResourceProperties { i32 13, i32 908 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %60 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %57, %dx.types.ResourceProperties { i32 13, i32 252 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %61 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %58, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %62 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %63 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %64 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %65 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %66 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %67 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %68 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %69 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %70 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %71 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %72 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %73 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %74 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %75 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = extractvalue %dx.types.CBufRet.f32 %76, 3
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = extractvalue %dx.types.CBufRet.f32 %81, 3
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %91 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.f32 %91, 0
  %93 = extractvalue %dx.types.CBufRet.f32 %91, 1
  %94 = extractvalue %dx.types.CBufRet.f32 %91, 2
  %95 = extractvalue %dx.types.CBufRet.f32 %91, 3
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %99 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %100, 1
  %103 = extractvalue %dx.types.CBufRet.f32 %100, 2
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 135)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = extractvalue %dx.types.CBufRet.f32 %104, 3
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %113 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %52, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %114 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %112, %dx.types.Handle %113, float %72, float %73, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %115 = extractvalue %dx.types.ResRet.f32 %114, 2
  %116 = extractvalue %dx.types.ResRet.f32 %114, 3
  %117 = fmul fast float %115, 2.000000e+00
  %118 = fmul fast float %116, 2.000000e+00
  %119 = fadd fast float %117, -1.000000e+00
  %120 = fadd fast float %118, -1.000000e+00
  %121 = call float @dx.op.dot2.f32(i32 54, float %119, float %120, float %119, float %120)  ; Dot2(ax,ay,bx,by)
  %122 = fsub fast float 1.000000e+00, %121
  %123 = call float @dx.op.binary.f32(i32 35, float %122, float 0.000000e+00)  ; FMax(a,b)
  %124 = call float @dx.op.unary.f32(i32 24, float %123)  ; Sqrt(value)
  %125 = fsub fast float -0.000000e+00, %119
  %126 = call float @dx.op.dot3.f32(i32 55, float %124, float 0.000000e+00, float %125, float %124, float 0.000000e+00, float %125)  ; Dot3(ax,ay,az,bx,by,bz)
  %127 = call float @dx.op.unary.f32(i32 25, float %126)  ; Rsqrt(value)
  %128 = fmul fast float %127, %124
  %129 = fmul fast float %127, %125
  %130 = fmul fast float %129, %120
  %131 = fmul fast float %128, %124
  %132 = fmul fast float %129, %119
  %133 = fsub fast float %131, %132
  %134 = fmul fast float %120, %128
  %135 = fsub fast float -0.000000e+00, %134
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = fmul fast float %137, %128
  %149 = call float @dx.op.tertiary.f32(i32 46, float %129, float %145, float %148)  ; FMad(a,b,c)
  %150 = fmul fast float %138, %128
  %151 = call float @dx.op.tertiary.f32(i32 46, float %129, float %146, float %150)  ; FMad(a,b,c)
  %152 = fmul fast float %139, %128
  %153 = call float @dx.op.tertiary.f32(i32 46, float %129, float %147, float %152)  ; FMad(a,b,c)
  %154 = fmul fast float %130, %137
  %155 = call float @dx.op.tertiary.f32(i32 46, float %133, float %141, float %154)  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %135, float %145, float %155)  ; FMad(a,b,c)
  %157 = fmul fast float %130, %138
  %158 = call float @dx.op.tertiary.f32(i32 46, float %133, float %142, float %157)  ; FMad(a,b,c)
  %159 = call float @dx.op.tertiary.f32(i32 46, float %135, float %146, float %158)  ; FMad(a,b,c)
  %160 = fmul fast float %130, %139
  %161 = call float @dx.op.tertiary.f32(i32 46, float %133, float %143, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %135, float %147, float %161)  ; FMad(a,b,c)
  %163 = fmul fast float %137, %119
  %164 = call float @dx.op.tertiary.f32(i32 46, float %120, float %141, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %124, float %145, float %164)  ; FMad(a,b,c)
  %166 = fmul fast float %138, %119
  %167 = call float @dx.op.tertiary.f32(i32 46, float %120, float %142, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %124, float %146, float %167)  ; FMad(a,b,c)
  %169 = fmul fast float %139, %119
  %170 = call float @dx.op.tertiary.f32(i32 46, float %120, float %143, float %169)  ; FMad(a,b,c)
  %171 = call float @dx.op.tertiary.f32(i32 46, float %124, float %147, float %170)  ; FMad(a,b,c)
  %172 = fmul fast float %77, %62
  %173 = call float @dx.op.tertiary.f32(i32 46, float %63, float %82, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %64, float %87, float %173)  ; FMad(a,b,c)
  %175 = fadd fast float %174, %92
  %176 = fmul fast float %78, %62
  %177 = call float @dx.op.tertiary.f32(i32 46, float %63, float %83, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %64, float %88, float %177)  ; FMad(a,b,c)
  %179 = fadd fast float %178, %93
  %180 = fmul fast float %79, %62
  %181 = call float @dx.op.tertiary.f32(i32 46, float %63, float %84, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %64, float %89, float %181)  ; FMad(a,b,c)
  %183 = fadd fast float %182, %94
  %184 = fmul fast float %80, %62
  %185 = call float @dx.op.tertiary.f32(i32 46, float %63, float %85, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %64, float %90, float %185)  ; FMad(a,b,c)
  %187 = fadd fast float %186, %95
  %188 = fdiv fast float %175, %187
  %189 = fdiv fast float %179, %187
  %190 = fdiv fast float %183, %187
  %191 = fsub fast float %188, %101
  %192 = fsub fast float %189, %102
  %193 = fsub fast float %190, %103
  %194 = fptoui float %62 to i32
  %195 = fptoui float %63 to i32
  %196 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.i32 %196, 1
  %198 = and i32 %197, 31
  %199 = lshr i32 %194, %198
  %200 = lshr i32 %195, %198
  %201 = extractvalue %dx.types.CBufRet.i32 %196, 3
  %202 = mul i32 %200, %201
  %203 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 239)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.i32 %203, 1
  %205 = add i32 %204, %199
  %206 = add i32 %205, %202
  %207 = urem i32 %206, 3
  %208 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %209 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %54, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %210 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %208, %dx.types.Handle %209, float %70, float %71, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %211 = extractvalue %dx.types.ResRet.f32 %210, 0
  %212 = extractvalue %dx.types.ResRet.f32 %210, 1
  %213 = extractvalue %dx.types.ResRet.f32 %210, 2
  %214 = extractvalue %dx.types.ResRet.f32 %210, 3
  %215 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %216 = extractvalue %dx.types.CBufRet.f32 %215, 0
  %217 = extractvalue %dx.types.CBufRet.f32 %215, 1
  %218 = extractvalue %dx.types.CBufRet.f32 %215, 2
  %219 = extractvalue %dx.types.CBufRet.f32 %215, 3
  %220 = call float @dx.op.dot4.f32(i32 56, float %211, float %212, float %213, float %214, float %216, float %217, float %218, float %219)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %221 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %222 = extractvalue %dx.types.CBufRet.f32 %221, 0
  %223 = extractvalue %dx.types.CBufRet.f32 %221, 1
  %224 = extractvalue %dx.types.CBufRet.f32 %221, 2
  %225 = extractvalue %dx.types.CBufRet.f32 %221, 3
  %226 = call float @dx.op.dot4.f32(i32 56, float %211, float %212, float %213, float %214, float %222, float %223, float %224, float %225)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 27)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 0
  %229 = extractvalue %dx.types.CBufRet.f32 %227, 1
  %230 = extractvalue %dx.types.CBufRet.f32 %227, 2
  %231 = extractvalue %dx.types.CBufRet.f32 %227, 3
  %232 = call float @dx.op.dot4.f32(i32 56, float %211, float %212, float %213, float %214, float %228, float %229, float %230, float %231)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 2
  %237 = extractvalue %dx.types.CBufRet.f32 %233, 3
  %238 = call float @dx.op.dot4.f32(i32 56, float %211, float %212, float %213, float %214, float %234, float %235, float %236, float %237)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %239 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %240 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %239, %dx.types.Handle %209, float %70, float %71, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %241 = extractvalue %dx.types.ResRet.f32 %240, 0
  %242 = extractvalue %dx.types.ResRet.f32 %240, 1
  %243 = extractvalue %dx.types.ResRet.f32 %240, 2
  %244 = extractvalue %dx.types.ResRet.f32 %240, 3
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 2
  %249 = extractvalue %dx.types.CBufRet.f32 %245, 3
  %250 = call float @dx.op.dot4.f32(i32 56, float %241, float %242, float %243, float %244, float %246, float %247, float %248, float %249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %251 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.f32 %251, 0
  %253 = extractvalue %dx.types.CBufRet.f32 %251, 1
  %254 = extractvalue %dx.types.CBufRet.f32 %251, 2
  %255 = extractvalue %dx.types.CBufRet.f32 %251, 3
  %256 = call float @dx.op.dot4.f32(i32 56, float %241, float %242, float %243, float %244, float %252, float %253, float %254, float %255)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %257 = fmul fast float %74, 5.000000e-01
  %258 = fmul fast float %75, 5.000000e-01
  %259 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.i32 %259, 0
  %261 = extractvalue %dx.types.CBufRet.i32 %259, 1
  %262 = extractvalue %dx.types.CBufRet.i32 %259, 2
  %263 = extractvalue %dx.types.CBufRet.i32 %259, 3
  %264 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.i32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.i32 %264, 1
  %267 = extractvalue %dx.types.CBufRet.i32 %264, 2
  %268 = extractvalue %dx.types.CBufRet.i32 %264, 3
  %269 = bitcast i32 %265 to float
  %270 = bitcast i32 %266 to float
  %271 = bitcast i32 %267 to float
  %272 = bitcast i32 %268 to float
  %273 = bitcast i32 %260 to float
  %274 = and i32 %261, 4095
  %275 = lshr i32 %261, 12
  %276 = and i32 %275, 4095
  %277 = lshr i32 %261, 24
  %278 = and i32 %262, 15
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = fmul fast float %269, %257
  %282 = fmul fast float %270, %258
  %283 = call float @dx.op.unary.f32(i32 84, float %281)  ; DerivCoarseY(value)
  %284 = call float @dx.op.unary.f32(i32 84, float %282)  ; DerivCoarseY(value)
  %285 = call float @dx.op.unary.f32(i32 83, float %281)  ; DerivCoarseX(value)
  %286 = call float @dx.op.unary.f32(i32 83, float %282)  ; DerivCoarseX(value)
  %287 = fmul fast float %285, %271
  %288 = fmul fast float %286, %272
  %289 = fmul fast float %283, %271
  %290 = fmul fast float %284, %272
  %291 = call float @dx.op.dot2.f32(i32 54, float %287, float %288, float %287, float %288)  ; Dot2(ax,ay,bx,by)
  %292 = call float @dx.op.dot2.f32(i32 54, float %289, float %290, float %289, float %290)  ; Dot2(ax,ay,bx,by)
  %293 = call float @dx.op.binary.f32(i32 36, float %291, float %292)  ; FMin(a,b)
  %294 = call float @dx.op.unary.f32(i32 23, float %293)  ; Log(value)
  %295 = call float @dx.op.binary.f32(i32 35, float %291, float %292)  ; FMax(a,b)
  %296 = call float @dx.op.unary.f32(i32 23, float %295)  ; Log(value)
  %297 = fmul fast float %296, 5.000000e-01
  %298 = fsub fast float %296, %294
  %299 = fmul fast float %298, 5.000000e-01
  %300 = call float @dx.op.binary.f32(i32 36, float %299, float %273)  ; FMin(a,b)
  %301 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %302 = extractvalue %dx.types.CBufRet.f32 %301, 0
  %303 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %304 = extractvalue %dx.types.CBufRet.i32 %303, 1
  %305 = uitofp i32 %304 to float
  %306 = fmul fast float %305, 0x4040551EC0000000
  %307 = fmul fast float %305, 0x4027A147A0000000
  %308 = fadd fast float %306, %62
  %309 = fadd fast float %307, %63
  %310 = call float @dx.op.dot2.f32(i32 54, float %308, float %309, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %311 = call float @dx.op.unary.f32(i32 22, float %310)  ; Frc(value)
  %312 = fmul fast float %311, 0x404A7DD040000000
  %313 = call float @dx.op.unary.f32(i32 22, float %312)  ; Frc(value)
  %314 = fsub fast float %280, %300
  %315 = fadd fast float %314, %297
  %316 = fadd fast float %315, %302
  %317 = fadd fast float %316, %313
  %318 = call float @dx.op.unary.f32(i32 27, float %317)  ; Round_ni(value)
  %319 = fptosi float %318 to i32
  %320 = add nsw i32 %319, %277
  %321 = call float @dx.op.unary.f32(i32 22, float %281)  ; Frc(value)
  %322 = call float @dx.op.unary.f32(i32 22, float %282)  ; Frc(value)
  %323 = fmul fast float %321, %271
  %324 = fmul fast float %322, %272
  %325 = call i32 @dx.op.binary.i32(i32 37, i32 %320, i32 0)  ; IMax(a,b)
  %326 = call i32 @dx.op.binary.i32(i32 38, i32 %325, i32 %278)  ; IMin(a,b)
  %327 = fptoui float %323 to i32
  %328 = add i32 %327, %274
  %329 = and i32 %326, 31
  %330 = lshr i32 %328, %329
  %331 = fptoui float %324 to i32
  %332 = add i32 %331, %276
  %333 = lshr i32 %332, %329
  %334 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %335 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %334, i32 %326, i32 %330, i32 %333, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %336 = extractvalue %dx.types.ResRet.i32 %335, 0
  %337 = extractvalue %dx.types.ResRet.i32 %335, 1
  %338 = extractvalue %dx.types.ResRet.i32 %335, 2
  %339 = extractvalue %dx.types.ResRet.i32 %335, 3
  %340 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %341 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %340, i32 %326, i32 %330, i32 %333, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %342 = extractvalue %dx.types.ResRet.i32 %341, 0
  %343 = extractvalue %dx.types.ResRet.i32 %341, 1
  %344 = extractvalue %dx.types.ResRet.i32 %341, 2
  %345 = extractvalue %dx.types.ResRet.i32 %341, 3
  %346 = or i32 %330, %263
  %347 = shl i32 %333, 12
  %348 = or i32 %346, %347
  %349 = add nuw nsw i32 %278, 1
  %350 = add nsw i32 %320, 1
  %351 = call i32 @dx.op.binary.i32(i32 37, i32 %350, i32 0)  ; IMax(a,b)
  %352 = call i32 @dx.op.binary.i32(i32 38, i32 %351, i32 %349)  ; IMin(a,b)
  %353 = shl i32 %352, 24
  %354 = or i32 %348, %353
  %355 = icmp eq i32 %207, 0
  %356 = select i1 %355, i32 %354, i32 -1
  %357 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %358 = extractvalue %dx.types.CBufRet.i32 %357, 0
  %359 = extractvalue %dx.types.CBufRet.i32 %357, 1
  %360 = extractvalue %dx.types.CBufRet.i32 %357, 2
  %361 = extractvalue %dx.types.CBufRet.i32 %357, 3
  %362 = bitcast i32 %361 to float
  %363 = call float @dx.op.unary.f32(i32 6, float %362)  ; FAbs(value)
  %364 = bitcast i32 %359 to float
  %365 = bitcast i32 %360 to float
  %366 = fcmp fast ogt float %362, 0.000000e+00
  %367 = lshr i32 %358, 8
  %368 = and i32 %367, 255
  %369 = uitofp i32 %368 to float
  %370 = fmul fast float %369, 0x3F70101020000000
  %371 = lshr i32 %358, 16
  %372 = and i32 %371, 255
  %373 = uitofp i32 %372 to float
  %374 = fmul fast float %373, 0x3F70101020000000
  %375 = and i32 %336, 15
  %376 = lshr i32 4096, %375
  %377 = uitofp i32 %376 to float
  %378 = fmul fast float %377, 0x3F30000000000000
  %379 = lshr i32 %336, 4
  %380 = select i1 %366, i32 255, i32 63
  %381 = and i32 %379, %380
  %382 = lshr i32 %336, 12
  %383 = and i32 %382, 255
  %384 = lshr i32 %336, 10
  %385 = and i32 %384, 63
  %386 = select i1 %366, i32 %383, i32 %385
  %387 = fmul fast float %378, %323
  %388 = fmul fast float %378, %324
  %389 = call float @dx.op.unary.f32(i32 22, float %387)  ; Frc(value)
  %390 = call float @dx.op.unary.f32(i32 22, float %388)  ; Frc(value)
  %391 = uitofp i32 %381 to float
  %392 = uitofp i32 %386 to float
  %393 = fmul fast float %391, %363
  %394 = fmul fast float %392, %363
  %395 = fmul fast float %389, %364
  %396 = fmul fast float %390, %364
  %397 = fadd fast float %395, %365
  %398 = fadd fast float %396, %365
  %399 = fadd fast float %397, %393
  %400 = fadd fast float %398, %394
  %401 = icmp ugt i32 %336, 15
  %402 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %403 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %51, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %404 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %402, %dx.types.Handle %403, float %399, float %400, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %405 = extractvalue %dx.types.ResRet.f32 %404, 0
  %406 = extractvalue %dx.types.ResRet.f32 %404, 1
  %407 = select i1 %401, float %405, float %374
  %408 = select i1 %401, float %406, float %370
  %409 = fmul fast float %407, 2.000000e+00
  %410 = fmul fast float %408, 2.000000e+00
  %411 = fadd fast float %409, -1.000000e+00
  %412 = fadd fast float %410, -1.000000e+00
  %413 = call float @dx.op.dot2.f32(i32 54, float %411, float %412, float %411, float %412)  ; Dot2(ax,ay,bx,by)
  %414 = fsub fast float 1.000000e+00, %413
  %415 = call float @dx.op.unary.f32(i32 7, float %414)  ; Saturate(value)
  %416 = call float @dx.op.unary.f32(i32 24, float %415)  ; Sqrt(value)
  %417 = fmul fast float %411, %220
  %418 = fmul fast float %412, %220
  %419 = fmul fast float %416, %220
  %420 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %421 = extractvalue %dx.types.CBufRet.i32 %420, 0
  %422 = extractvalue %dx.types.CBufRet.i32 %420, 1
  %423 = extractvalue %dx.types.CBufRet.i32 %420, 2
  %424 = extractvalue %dx.types.CBufRet.i32 %420, 3
  %425 = bitcast i32 %424 to float
  %426 = call float @dx.op.unary.f32(i32 6, float %425)  ; FAbs(value)
  %427 = bitcast i32 %422 to float
  %428 = bitcast i32 %423 to float
  %429 = fcmp fast ogt float %425, 0.000000e+00
  %430 = lshr i32 %421, 8
  %431 = and i32 %430, 255
  %432 = uitofp i32 %431 to float
  %433 = fmul fast float %432, 0x3F70101020000000
  %434 = lshr i32 %421, 16
  %435 = and i32 %434, 255
  %436 = uitofp i32 %435 to float
  %437 = fmul fast float %436, 0x3F70101020000000
  %438 = and i32 %337, 15
  %439 = lshr i32 4096, %438
  %440 = uitofp i32 %439 to float
  %441 = fmul fast float %440, 0x3F30000000000000
  %442 = lshr i32 %337, 4
  %443 = select i1 %429, i32 255, i32 63
  %444 = and i32 %442, %443
  %445 = lshr i32 %337, 12
  %446 = and i32 %445, 255
  %447 = lshr i32 %337, 10
  %448 = and i32 %447, 63
  %449 = select i1 %429, i32 %446, i32 %448
  %450 = fmul fast float %441, %323
  %451 = fmul fast float %441, %324
  %452 = call float @dx.op.unary.f32(i32 22, float %450)  ; Frc(value)
  %453 = call float @dx.op.unary.f32(i32 22, float %451)  ; Frc(value)
  %454 = uitofp i32 %444 to float
  %455 = uitofp i32 %449 to float
  %456 = fmul fast float %454, %426
  %457 = fmul fast float %455, %426
  %458 = fmul fast float %452, %427
  %459 = fmul fast float %453, %427
  %460 = fadd fast float %458, %428
  %461 = fadd fast float %459, %428
  %462 = fadd fast float %460, %456
  %463 = fadd fast float %461, %457
  %464 = icmp ugt i32 %337, 15
  %465 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %466 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %50, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %467 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %465, %dx.types.Handle %466, float %462, float %463, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %468 = extractvalue %dx.types.ResRet.f32 %467, 0
  %469 = extractvalue %dx.types.ResRet.f32 %467, 1
  %470 = select i1 %464, float %468, float %437
  %471 = select i1 %464, float %469, float %433
  %472 = fmul fast float %470, 2.000000e+00
  %473 = fmul fast float %471, 2.000000e+00
  %474 = fadd fast float %472, -1.000000e+00
  %475 = fadd fast float %473, -1.000000e+00
  %476 = call float @dx.op.dot2.f32(i32 54, float %474, float %475, float %474, float %475)  ; Dot2(ax,ay,bx,by)
  %477 = fsub fast float 1.000000e+00, %476
  %478 = call float @dx.op.unary.f32(i32 7, float %477)  ; Saturate(value)
  %479 = call float @dx.op.unary.f32(i32 24, float %478)  ; Sqrt(value)
  %480 = fmul fast float %474, %226
  %481 = fmul fast float %475, %226
  %482 = fmul fast float %479, %226
  %483 = fadd fast float %480, %417
  %484 = fadd fast float %481, %418
  %485 = fadd fast float %482, %419
  %486 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %487 = extractvalue %dx.types.CBufRet.i32 %486, 0
  %488 = extractvalue %dx.types.CBufRet.i32 %486, 1
  %489 = extractvalue %dx.types.CBufRet.i32 %486, 2
  %490 = extractvalue %dx.types.CBufRet.i32 %486, 3
  %491 = bitcast i32 %490 to float
  %492 = call float @dx.op.unary.f32(i32 6, float %491)  ; FAbs(value)
  %493 = bitcast i32 %488 to float
  %494 = bitcast i32 %489 to float
  %495 = fcmp fast ogt float %491, 0.000000e+00
  %496 = lshr i32 %487, 8
  %497 = and i32 %496, 255
  %498 = uitofp i32 %497 to float
  %499 = fmul fast float %498, 0x3F70101020000000
  %500 = lshr i32 %487, 16
  %501 = and i32 %500, 255
  %502 = uitofp i32 %501 to float
  %503 = fmul fast float %502, 0x3F70101020000000
  %504 = and i32 %338, 15
  %505 = lshr i32 4096, %504
  %506 = uitofp i32 %505 to float
  %507 = fmul fast float %506, 0x3F30000000000000
  %508 = lshr i32 %338, 4
  %509 = select i1 %495, i32 255, i32 63
  %510 = and i32 %508, %509
  %511 = lshr i32 %338, 12
  %512 = and i32 %511, 255
  %513 = lshr i32 %338, 10
  %514 = and i32 %513, 63
  %515 = select i1 %495, i32 %512, i32 %514
  %516 = fmul fast float %507, %323
  %517 = fmul fast float %507, %324
  %518 = call float @dx.op.unary.f32(i32 22, float %516)  ; Frc(value)
  %519 = call float @dx.op.unary.f32(i32 22, float %517)  ; Frc(value)
  %520 = uitofp i32 %510 to float
  %521 = uitofp i32 %515 to float
  %522 = fmul fast float %520, %492
  %523 = fmul fast float %521, %492
  %524 = fmul fast float %518, %493
  %525 = fmul fast float %519, %493
  %526 = fadd fast float %524, %494
  %527 = fadd fast float %525, %494
  %528 = fadd fast float %526, %522
  %529 = fadd fast float %527, %523
  %530 = icmp ugt i32 %338, 15
  %531 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %532 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %533 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %531, %dx.types.Handle %532, float %528, float %529, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %534 = extractvalue %dx.types.ResRet.f32 %533, 0
  %535 = extractvalue %dx.types.ResRet.f32 %533, 1
  %536 = select i1 %530, float %534, float %503
  %537 = select i1 %530, float %535, float %499
  %538 = fmul fast float %536, 2.000000e+00
  %539 = fmul fast float %537, 2.000000e+00
  %540 = fadd fast float %538, -1.000000e+00
  %541 = fadd fast float %539, -1.000000e+00
  %542 = call float @dx.op.dot2.f32(i32 54, float %540, float %541, float %540, float %541)  ; Dot2(ax,ay,bx,by)
  %543 = fsub fast float 1.000000e+00, %542
  %544 = call float @dx.op.unary.f32(i32 7, float %543)  ; Saturate(value)
  %545 = call float @dx.op.unary.f32(i32 24, float %544)  ; Sqrt(value)
  %546 = fmul fast float %540, %232
  %547 = fmul fast float %541, %232
  %548 = fmul fast float %545, %232
  %549 = fadd fast float %483, %546
  %550 = fadd fast float %484, %547
  %551 = fadd fast float %485, %548
  %552 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %553 = extractvalue %dx.types.CBufRet.i32 %552, 0
  %554 = extractvalue %dx.types.CBufRet.i32 %552, 1
  %555 = extractvalue %dx.types.CBufRet.i32 %552, 2
  %556 = extractvalue %dx.types.CBufRet.i32 %552, 3
  %557 = bitcast i32 %556 to float
  %558 = call float @dx.op.unary.f32(i32 6, float %557)  ; FAbs(value)
  %559 = bitcast i32 %554 to float
  %560 = bitcast i32 %555 to float
  %561 = fcmp fast ogt float %557, 0.000000e+00
  %562 = lshr i32 %553, 8
  %563 = and i32 %562, 255
  %564 = uitofp i32 %563 to float
  %565 = fmul fast float %564, 0x3F70101020000000
  %566 = lshr i32 %553, 16
  %567 = and i32 %566, 255
  %568 = uitofp i32 %567 to float
  %569 = fmul fast float %568, 0x3F70101020000000
  %570 = and i32 %339, 15
  %571 = lshr i32 4096, %570
  %572 = uitofp i32 %571 to float
  %573 = fmul fast float %572, 0x3F30000000000000
  %574 = lshr i32 %339, 4
  %575 = select i1 %561, i32 255, i32 63
  %576 = and i32 %574, %575
  %577 = lshr i32 %339, 12
  %578 = and i32 %577, 255
  %579 = lshr i32 %339, 10
  %580 = and i32 %579, 63
  %581 = select i1 %561, i32 %578, i32 %580
  %582 = fmul fast float %573, %323
  %583 = fmul fast float %573, %324
  %584 = call float @dx.op.unary.f32(i32 22, float %582)  ; Frc(value)
  %585 = call float @dx.op.unary.f32(i32 22, float %583)  ; Frc(value)
  %586 = uitofp i32 %576 to float
  %587 = uitofp i32 %581 to float
  %588 = fmul fast float %586, %558
  %589 = fmul fast float %587, %558
  %590 = fmul fast float %584, %559
  %591 = fmul fast float %585, %559
  %592 = fadd fast float %590, %560
  %593 = fadd fast float %591, %560
  %594 = fadd fast float %592, %588
  %595 = fadd fast float %593, %589
  %596 = icmp ugt i32 %339, 15
  %597 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %598 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %48, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %599 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %597, %dx.types.Handle %598, float %594, float %595, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %600 = extractvalue %dx.types.ResRet.f32 %599, 0
  %601 = extractvalue %dx.types.ResRet.f32 %599, 1
  %602 = select i1 %596, float %600, float %569
  %603 = select i1 %596, float %601, float %565
  %604 = fmul fast float %602, 2.000000e+00
  %605 = fmul fast float %603, 2.000000e+00
  %606 = fadd fast float %604, -1.000000e+00
  %607 = fadd fast float %605, -1.000000e+00
  %608 = call float @dx.op.dot2.f32(i32 54, float %606, float %607, float %606, float %607)  ; Dot2(ax,ay,bx,by)
  %609 = fsub fast float 1.000000e+00, %608
  %610 = call float @dx.op.unary.f32(i32 7, float %609)  ; Saturate(value)
  %611 = call float @dx.op.unary.f32(i32 24, float %610)  ; Sqrt(value)
  %612 = fmul fast float %606, %238
  %613 = fmul fast float %607, %238
  %614 = fmul fast float %611, %238
  %615 = fadd fast float %549, %612
  %616 = fadd fast float %550, %613
  %617 = fadd fast float %551, %614
  %618 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %619 = extractvalue %dx.types.CBufRet.i32 %618, 0
  %620 = extractvalue %dx.types.CBufRet.i32 %618, 1
  %621 = extractvalue %dx.types.CBufRet.i32 %618, 2
  %622 = extractvalue %dx.types.CBufRet.i32 %618, 3
  %623 = bitcast i32 %622 to float
  %624 = call float @dx.op.unary.f32(i32 6, float %623)  ; FAbs(value)
  %625 = bitcast i32 %620 to float
  %626 = bitcast i32 %621 to float
  %627 = fcmp fast ogt float %623, 0.000000e+00
  %628 = lshr i32 %619, 8
  %629 = and i32 %628, 255
  %630 = uitofp i32 %629 to float
  %631 = fmul fast float %630, 0x3F70101020000000
  %632 = lshr i32 %619, 16
  %633 = and i32 %632, 255
  %634 = uitofp i32 %633 to float
  %635 = fmul fast float %634, 0x3F70101020000000
  %636 = and i32 %342, 15
  %637 = lshr i32 4096, %636
  %638 = uitofp i32 %637 to float
  %639 = fmul fast float %638, 0x3F30000000000000
  %640 = lshr i32 %342, 4
  %641 = select i1 %627, i32 255, i32 63
  %642 = and i32 %640, %641
  %643 = lshr i32 %342, 12
  %644 = and i32 %643, 255
  %645 = lshr i32 %342, 10
  %646 = and i32 %645, 63
  %647 = select i1 %627, i32 %644, i32 %646
  %648 = fmul fast float %639, %323
  %649 = fmul fast float %639, %324
  %650 = call float @dx.op.unary.f32(i32 22, float %648)  ; Frc(value)
  %651 = call float @dx.op.unary.f32(i32 22, float %649)  ; Frc(value)
  %652 = uitofp i32 %642 to float
  %653 = uitofp i32 %647 to float
  %654 = fmul fast float %652, %624
  %655 = fmul fast float %653, %624
  %656 = fmul fast float %650, %625
  %657 = fmul fast float %651, %625
  %658 = fadd fast float %656, %626
  %659 = fadd fast float %657, %626
  %660 = fadd fast float %658, %654
  %661 = fadd fast float %659, %655
  %662 = icmp ugt i32 %342, 15
  %663 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %664 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %665 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %663, %dx.types.Handle %664, float %660, float %661, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %666 = extractvalue %dx.types.ResRet.f32 %665, 0
  %667 = extractvalue %dx.types.ResRet.f32 %665, 1
  %668 = select i1 %662, float %666, float %635
  %669 = select i1 %662, float %667, float %631
  %670 = fmul fast float %668, 2.000000e+00
  %671 = fmul fast float %669, 2.000000e+00
  %672 = fadd fast float %670, -1.000000e+00
  %673 = fadd fast float %671, -1.000000e+00
  %674 = call float @dx.op.dot2.f32(i32 54, float %672, float %673, float %672, float %673)  ; Dot2(ax,ay,bx,by)
  %675 = fsub fast float 1.000000e+00, %674
  %676 = call float @dx.op.unary.f32(i32 7, float %675)  ; Saturate(value)
  %677 = call float @dx.op.unary.f32(i32 24, float %676)  ; Sqrt(value)
  %678 = fmul fast float %672, %250
  %679 = fmul fast float %673, %250
  %680 = fmul fast float %677, %250
  %681 = fadd fast float %615, %678
  %682 = fadd fast float %616, %679
  %683 = fadd fast float %617, %680
  %684 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %685 = extractvalue %dx.types.CBufRet.i32 %684, 0
  %686 = extractvalue %dx.types.CBufRet.i32 %684, 1
  %687 = extractvalue %dx.types.CBufRet.i32 %684, 2
  %688 = extractvalue %dx.types.CBufRet.i32 %684, 3
  %689 = bitcast i32 %688 to float
  %690 = call float @dx.op.unary.f32(i32 6, float %689)  ; FAbs(value)
  %691 = bitcast i32 %686 to float
  %692 = bitcast i32 %687 to float
  %693 = fcmp fast ogt float %689, 0.000000e+00
  %694 = lshr i32 %685, 8
  %695 = and i32 %694, 255
  %696 = uitofp i32 %695 to float
  %697 = fmul fast float %696, 0x3F70101020000000
  %698 = lshr i32 %685, 16
  %699 = and i32 %698, 255
  %700 = uitofp i32 %699 to float
  %701 = fmul fast float %700, 0x3F70101020000000
  %702 = and i32 %343, 15
  %703 = lshr i32 4096, %702
  %704 = uitofp i32 %703 to float
  %705 = fmul fast float %704, 0x3F30000000000000
  %706 = lshr i32 %343, 4
  %707 = select i1 %693, i32 255, i32 63
  %708 = and i32 %706, %707
  %709 = lshr i32 %343, 12
  %710 = and i32 %709, 255
  %711 = lshr i32 %343, 10
  %712 = and i32 %711, 63
  %713 = select i1 %693, i32 %710, i32 %712
  %714 = fmul fast float %705, %323
  %715 = fmul fast float %705, %324
  %716 = call float @dx.op.unary.f32(i32 22, float %714)  ; Frc(value)
  %717 = call float @dx.op.unary.f32(i32 22, float %715)  ; Frc(value)
  %718 = uitofp i32 %708 to float
  %719 = uitofp i32 %713 to float
  %720 = fmul fast float %718, %690
  %721 = fmul fast float %719, %690
  %722 = fmul fast float %716, %691
  %723 = fmul fast float %717, %691
  %724 = fadd fast float %722, %692
  %725 = fadd fast float %723, %692
  %726 = fadd fast float %724, %720
  %727 = fadd fast float %725, %721
  %728 = icmp ugt i32 %343, 15
  %729 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %730 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %731 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %729, %dx.types.Handle %730, float %726, float %727, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %732 = extractvalue %dx.types.ResRet.f32 %731, 0
  %733 = extractvalue %dx.types.ResRet.f32 %731, 1
  %734 = select i1 %728, float %732, float %701
  %735 = select i1 %728, float %733, float %697
  %736 = fmul fast float %734, 2.000000e+00
  %737 = fmul fast float %735, 2.000000e+00
  %738 = fadd fast float %736, -1.000000e+00
  %739 = fadd fast float %737, -1.000000e+00
  %740 = call float @dx.op.dot2.f32(i32 54, float %738, float %739, float %738, float %739)  ; Dot2(ax,ay,bx,by)
  %741 = fsub fast float 1.000000e+00, %740
  %742 = call float @dx.op.unary.f32(i32 7, float %741)  ; Saturate(value)
  %743 = call float @dx.op.unary.f32(i32 24, float %742)  ; Sqrt(value)
  %744 = fmul fast float %738, %256
  %745 = fmul fast float %739, %256
  %746 = fmul fast float %743, %256
  %747 = fadd fast float %681, %744
  %748 = fadd fast float %682, %745
  %749 = fadd fast float %683, %746
  %750 = fmul fast float %747, %108
  %751 = fmul fast float %748, %108
  %752 = fmul fast float %749, %108
  %753 = fadd fast float %750, %105
  %754 = fadd fast float %751, %106
  %755 = fadd fast float %752, %107
  %756 = call float @dx.op.dot3.f32(i32 55, float %753, float %754, float %755, float %753, float %754, float %755)  ; Dot3(ax,ay,az,bx,by,bz)
  %757 = call float @dx.op.unary.f32(i32 25, float %756)  ; Rsqrt(value)
  %758 = fmul fast float %753, %757
  %759 = fmul fast float %754, %757
  %760 = fmul fast float %755, %757
  %761 = fmul fast float %758, %149
  %762 = call float @dx.op.tertiary.f32(i32 46, float %759, float %156, float %761)  ; FMad(a,b,c)
  %763 = call float @dx.op.tertiary.f32(i32 46, float %760, float %165, float %762)  ; FMad(a,b,c)
  %764 = fmul fast float %758, %151
  %765 = call float @dx.op.tertiary.f32(i32 46, float %759, float %159, float %764)  ; FMad(a,b,c)
  %766 = call float @dx.op.tertiary.f32(i32 46, float %760, float %168, float %765)  ; FMad(a,b,c)
  %767 = fmul fast float %758, %153
  %768 = call float @dx.op.tertiary.f32(i32 46, float %759, float %162, float %767)  ; FMad(a,b,c)
  %769 = call float @dx.op.tertiary.f32(i32 46, float %760, float %171, float %768)  ; FMad(a,b,c)
  %770 = call float @dx.op.dot3.f32(i32 55, float %763, float %766, float %769, float %763, float %766, float %769)  ; Dot3(ax,ay,az,bx,by,bz)
  %771 = call float @dx.op.unary.f32(i32 25, float %770)  ; Rsqrt(value)
  %772 = fmul fast float %771, %763
  %773 = fmul fast float %771, %766
  %774 = fmul fast float %771, %769
  %775 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %776 = extractvalue %dx.types.CBufRet.f32 %775, 0
  %777 = extractvalue %dx.types.CBufRet.f32 %775, 1
  %778 = extractvalue %dx.types.CBufRet.f32 %775, 2
  %779 = extractvalue %dx.types.CBufRet.f32 %775, 3
  %780 = fmul fast float %777, %776
  %781 = fmul fast float %778, %776
  %782 = fmul fast float %779, %776
  %783 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %784 = extractvalue %dx.types.CBufRet.i32 %783, 0
  %785 = extractvalue %dx.types.CBufRet.i32 %783, 1
  %786 = extractvalue %dx.types.CBufRet.i32 %783, 2
  %787 = extractvalue %dx.types.CBufRet.i32 %783, 3
  %788 = bitcast i32 %787 to float
  %789 = call float @dx.op.unary.f32(i32 6, float %788)  ; FAbs(value)
  %790 = bitcast i32 %785 to float
  %791 = bitcast i32 %786 to float
  %792 = fcmp fast ogt float %788, 0.000000e+00
  %793 = and i32 %784, 255
  %794 = uitofp i32 %793 to float
  %795 = fmul fast float %794, 0x3F70101020000000
  %796 = lshr i32 %784, 8
  %797 = and i32 %796, 255
  %798 = uitofp i32 %797 to float
  %799 = fmul fast float %798, 0x3F70101020000000
  %800 = lshr i32 %784, 16
  %801 = and i32 %800, 255
  %802 = uitofp i32 %801 to float
  %803 = fmul fast float %802, 0x3F70101020000000
  %804 = and i32 %344, 15
  %805 = lshr i32 4096, %804
  %806 = uitofp i32 %805 to float
  %807 = fmul fast float %806, 0x3F30000000000000
  %808 = lshr i32 %344, 4
  %809 = select i1 %792, i32 255, i32 63
  %810 = and i32 %808, %809
  %811 = lshr i32 %344, 12
  %812 = and i32 %811, 255
  %813 = lshr i32 %344, 10
  %814 = and i32 %813, 63
  %815 = select i1 %792, i32 %812, i32 %814
  %816 = fmul fast float %807, %323
  %817 = fmul fast float %807, %324
  %818 = call float @dx.op.unary.f32(i32 22, float %816)  ; Frc(value)
  %819 = call float @dx.op.unary.f32(i32 22, float %817)  ; Frc(value)
  %820 = uitofp i32 %810 to float
  %821 = uitofp i32 %815 to float
  %822 = fmul fast float %820, %789
  %823 = fmul fast float %821, %789
  %824 = fmul fast float %818, %790
  %825 = fmul fast float %819, %790
  %826 = fadd fast float %824, %791
  %827 = fadd fast float %825, %791
  %828 = fadd fast float %826, %822
  %829 = fadd fast float %827, %823
  %830 = icmp ugt i32 %344, 15
  %831 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %832 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %833 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %831, %dx.types.Handle %832, float %828, float %829, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %834 = extractvalue %dx.types.ResRet.f32 %833, 0
  %835 = extractvalue %dx.types.ResRet.f32 %833, 1
  %836 = extractvalue %dx.types.ResRet.f32 %833, 2
  %837 = select i1 %830, float %834, float %803
  %838 = select i1 %830, float %835, float %799
  %839 = select i1 %830, float %836, float %795
  %840 = fmul fast float %837, %220
  %841 = fmul fast float %838, %220
  %842 = fmul fast float %839, %220
  %843 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %844 = extractvalue %dx.types.CBufRet.i32 %843, 0
  %845 = extractvalue %dx.types.CBufRet.i32 %843, 1
  %846 = extractvalue %dx.types.CBufRet.i32 %843, 2
  %847 = extractvalue %dx.types.CBufRet.i32 %843, 3
  %848 = bitcast i32 %847 to float
  %849 = call float @dx.op.unary.f32(i32 6, float %848)  ; FAbs(value)
  %850 = bitcast i32 %845 to float
  %851 = bitcast i32 %846 to float
  %852 = fcmp fast ogt float %848, 0.000000e+00
  %853 = and i32 %844, 255
  %854 = uitofp i32 %853 to float
  %855 = fmul fast float %854, 0x3F70101020000000
  %856 = lshr i32 %844, 8
  %857 = and i32 %856, 255
  %858 = uitofp i32 %857 to float
  %859 = fmul fast float %858, 0x3F70101020000000
  %860 = lshr i32 %844, 16
  %861 = and i32 %860, 255
  %862 = uitofp i32 %861 to float
  %863 = fmul fast float %862, 0x3F70101020000000
  %864 = and i32 %345, 15
  %865 = lshr i32 4096, %864
  %866 = uitofp i32 %865 to float
  %867 = fmul fast float %866, 0x3F30000000000000
  %868 = lshr i32 %345, 4
  %869 = select i1 %852, i32 255, i32 63
  %870 = and i32 %868, %869
  %871 = lshr i32 %345, 12
  %872 = and i32 %871, 255
  %873 = lshr i32 %345, 10
  %874 = and i32 %873, 63
  %875 = select i1 %852, i32 %872, i32 %874
  %876 = fmul fast float %867, %323
  %877 = fmul fast float %867, %324
  %878 = call float @dx.op.unary.f32(i32 22, float %876)  ; Frc(value)
  %879 = call float @dx.op.unary.f32(i32 22, float %877)  ; Frc(value)
  %880 = uitofp i32 %870 to float
  %881 = uitofp i32 %875 to float
  %882 = fmul fast float %880, %849
  %883 = fmul fast float %881, %849
  %884 = fmul fast float %878, %850
  %885 = fmul fast float %879, %850
  %886 = fadd fast float %884, %851
  %887 = fadd fast float %885, %851
  %888 = fadd fast float %886, %882
  %889 = fadd fast float %887, %883
  %890 = icmp ugt i32 %345, 15
  %891 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %892 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %893 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %891, %dx.types.Handle %892, float %888, float %889, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %894 = extractvalue %dx.types.ResRet.f32 %893, 0
  %895 = extractvalue %dx.types.ResRet.f32 %893, 1
  %896 = extractvalue %dx.types.ResRet.f32 %893, 2
  %897 = select i1 %890, float %894, float %863
  %898 = select i1 %890, float %895, float %859
  %899 = select i1 %890, float %896, float %855
  %900 = fmul fast float %897, %226
  %901 = fmul fast float %898, %226
  %902 = fmul fast float %899, %226
  %903 = fadd fast float %900, %840
  %904 = fadd fast float %901, %841
  %905 = fadd fast float %902, %842
  %906 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %907 = extractvalue %dx.types.CBufRet.i32 %906, 0
  %908 = extractvalue %dx.types.CBufRet.i32 %906, 1
  %909 = extractvalue %dx.types.CBufRet.i32 %906, 2
  %910 = extractvalue %dx.types.CBufRet.i32 %906, 3
  %911 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %912 = extractvalue %dx.types.CBufRet.i32 %911, 0
  %913 = extractvalue %dx.types.CBufRet.i32 %911, 1
  %914 = extractvalue %dx.types.CBufRet.i32 %911, 2
  %915 = extractvalue %dx.types.CBufRet.i32 %911, 3
  %916 = bitcast i32 %912 to float
  %917 = bitcast i32 %913 to float
  %918 = bitcast i32 %914 to float
  %919 = bitcast i32 %915 to float
  %920 = bitcast i32 %907 to float
  %921 = and i32 %908, 4095
  %922 = lshr i32 %908, 12
  %923 = and i32 %922, 4095
  %924 = lshr i32 %908, 24
  %925 = and i32 %909, 15
  %926 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %927 = extractvalue %dx.types.CBufRet.f32 %926, 0
  %928 = fmul fast float %916, %257
  %929 = fmul fast float %917, %258
  %930 = call float @dx.op.unary.f32(i32 84, float %928)  ; DerivCoarseY(value)
  %931 = call float @dx.op.unary.f32(i32 84, float %929)  ; DerivCoarseY(value)
  %932 = call float @dx.op.unary.f32(i32 83, float %928)  ; DerivCoarseX(value)
  %933 = call float @dx.op.unary.f32(i32 83, float %929)  ; DerivCoarseX(value)
  %934 = fmul fast float %932, %918
  %935 = fmul fast float %933, %919
  %936 = fmul fast float %930, %918
  %937 = fmul fast float %931, %919
  %938 = call float @dx.op.dot2.f32(i32 54, float %934, float %935, float %934, float %935)  ; Dot2(ax,ay,bx,by)
  %939 = call float @dx.op.dot2.f32(i32 54, float %936, float %937, float %936, float %937)  ; Dot2(ax,ay,bx,by)
  %940 = call float @dx.op.binary.f32(i32 36, float %938, float %939)  ; FMin(a,b)
  %941 = call float @dx.op.unary.f32(i32 23, float %940)  ; Log(value)
  %942 = call float @dx.op.binary.f32(i32 35, float %938, float %939)  ; FMax(a,b)
  %943 = call float @dx.op.unary.f32(i32 23, float %942)  ; Log(value)
  %944 = fmul fast float %943, 5.000000e-01
  %945 = fsub fast float %943, %941
  %946 = fmul fast float %945, 5.000000e-01
  %947 = call float @dx.op.binary.f32(i32 36, float %946, float %920)  ; FMin(a,b)
  %948 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %949 = extractvalue %dx.types.CBufRet.f32 %948, 0
  %950 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %951 = extractvalue %dx.types.CBufRet.i32 %950, 1
  %952 = uitofp i32 %951 to float
  %953 = fmul fast float %952, 0x4040551EC0000000
  %954 = fmul fast float %952, 0x4027A147A0000000
  %955 = fadd fast float %953, %62
  %956 = fadd fast float %954, %63
  %957 = call float @dx.op.dot2.f32(i32 54, float %955, float %956, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %958 = call float @dx.op.unary.f32(i32 22, float %957)  ; Frc(value)
  %959 = fmul fast float %958, 0x404A7DD040000000
  %960 = call float @dx.op.unary.f32(i32 22, float %959)  ; Frc(value)
  %961 = fsub fast float %927, %947
  %962 = fadd fast float %961, %944
  %963 = fadd fast float %962, %949
  %964 = fadd fast float %963, %960
  %965 = call float @dx.op.unary.f32(i32 27, float %964)  ; Round_ni(value)
  %966 = fptosi float %965 to i32
  %967 = add nsw i32 %966, %924
  %968 = call float @dx.op.unary.f32(i32 22, float %928)  ; Frc(value)
  %969 = call float @dx.op.unary.f32(i32 22, float %929)  ; Frc(value)
  %970 = fmul fast float %968, %918
  %971 = fmul fast float %969, %919
  %972 = call i32 @dx.op.binary.i32(i32 37, i32 %967, i32 0)  ; IMax(a,b)
  %973 = call i32 @dx.op.binary.i32(i32 38, i32 %972, i32 %925)  ; IMin(a,b)
  %974 = fptoui float %970 to i32
  %975 = add i32 %974, %921
  %976 = and i32 %973, 31
  %977 = lshr i32 %975, %976
  %978 = fptoui float %971 to i32
  %979 = add i32 %978, %923
  %980 = lshr i32 %979, %976
  %981 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %982 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %981, i32 %973, i32 %977, i32 %980, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %983 = extractvalue %dx.types.ResRet.i32 %982, 0
  %984 = extractvalue %dx.types.ResRet.i32 %982, 1
  %985 = extractvalue %dx.types.ResRet.i32 %982, 2
  %986 = extractvalue %dx.types.ResRet.i32 %982, 3
  %987 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %988 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %987, i32 %973, i32 %977, i32 %980, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %989 = extractvalue %dx.types.ResRet.i32 %988, 0
  %990 = extractvalue %dx.types.ResRet.i32 %988, 1
  %991 = extractvalue %dx.types.ResRet.i32 %988, 2
  %992 = extractvalue %dx.types.ResRet.i32 %988, 3
  %993 = or i32 %977, %910
  %994 = shl i32 %980, 12
  %995 = or i32 %993, %994
  %996 = add nuw nsw i32 %925, 1
  %997 = add nsw i32 %967, 1
  %998 = call i32 @dx.op.binary.i32(i32 37, i32 %997, i32 0)  ; IMax(a,b)
  %999 = call i32 @dx.op.binary.i32(i32 38, i32 %998, i32 %996)  ; IMin(a,b)
  %1000 = shl i32 %999, 24
  %1001 = or i32 %995, %1000
  %1002 = icmp eq i32 %207, 1
  %1003 = select i1 %1002, i32 %1001, i32 %356
  %1004 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1005 = extractvalue %dx.types.CBufRet.i32 %1004, 0
  %1006 = extractvalue %dx.types.CBufRet.i32 %1004, 1
  %1007 = extractvalue %dx.types.CBufRet.i32 %1004, 2
  %1008 = extractvalue %dx.types.CBufRet.i32 %1004, 3
  %1009 = bitcast i32 %1008 to float
  %1010 = call float @dx.op.unary.f32(i32 6, float %1009)  ; FAbs(value)
  %1011 = bitcast i32 %1006 to float
  %1012 = bitcast i32 %1007 to float
  %1013 = fcmp fast ogt float %1009, 0.000000e+00
  %1014 = and i32 %1005, 255
  %1015 = uitofp i32 %1014 to float
  %1016 = fmul fast float %1015, 0x3F70101020000000
  %1017 = lshr i32 %1005, 8
  %1018 = and i32 %1017, 255
  %1019 = uitofp i32 %1018 to float
  %1020 = fmul fast float %1019, 0x3F70101020000000
  %1021 = lshr i32 %1005, 16
  %1022 = and i32 %1021, 255
  %1023 = uitofp i32 %1022 to float
  %1024 = fmul fast float %1023, 0x3F70101020000000
  %1025 = and i32 %983, 15
  %1026 = lshr i32 4096, %1025
  %1027 = uitofp i32 %1026 to float
  %1028 = fmul fast float %1027, 0x3F30000000000000
  %1029 = lshr i32 %983, 4
  %1030 = select i1 %1013, i32 255, i32 63
  %1031 = and i32 %1029, %1030
  %1032 = lshr i32 %983, 12
  %1033 = and i32 %1032, 255
  %1034 = lshr i32 %983, 10
  %1035 = and i32 %1034, 63
  %1036 = select i1 %1013, i32 %1033, i32 %1035
  %1037 = fmul fast float %1028, %970
  %1038 = fmul fast float %1028, %971
  %1039 = call float @dx.op.unary.f32(i32 22, float %1037)  ; Frc(value)
  %1040 = call float @dx.op.unary.f32(i32 22, float %1038)  ; Frc(value)
  %1041 = uitofp i32 %1031 to float
  %1042 = uitofp i32 %1036 to float
  %1043 = fmul fast float %1041, %1010
  %1044 = fmul fast float %1042, %1010
  %1045 = fmul fast float %1039, %1011
  %1046 = fmul fast float %1040, %1011
  %1047 = fadd fast float %1045, %1012
  %1048 = fadd fast float %1046, %1012
  %1049 = fadd fast float %1047, %1043
  %1050 = fadd fast float %1048, %1044
  %1051 = icmp ugt i32 %983, 15
  %1052 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1053 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1054 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1052, %dx.types.Handle %1053, float %1049, float %1050, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1055 = extractvalue %dx.types.ResRet.f32 %1054, 0
  %1056 = extractvalue %dx.types.ResRet.f32 %1054, 1
  %1057 = extractvalue %dx.types.ResRet.f32 %1054, 2
  %1058 = select i1 %1051, float %1055, float %1024
  %1059 = select i1 %1051, float %1056, float %1020
  %1060 = select i1 %1051, float %1057, float %1016
  %1061 = fmul fast float %1058, %232
  %1062 = fmul fast float %1059, %232
  %1063 = fmul fast float %1060, %232
  %1064 = fadd fast float %903, %1061
  %1065 = fadd fast float %904, %1062
  %1066 = fadd fast float %905, %1063
  %1067 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %1068 = extractvalue %dx.types.CBufRet.i32 %1067, 0
  %1069 = extractvalue %dx.types.CBufRet.i32 %1067, 1
  %1070 = extractvalue %dx.types.CBufRet.i32 %1067, 2
  %1071 = extractvalue %dx.types.CBufRet.i32 %1067, 3
  %1072 = bitcast i32 %1071 to float
  %1073 = call float @dx.op.unary.f32(i32 6, float %1072)  ; FAbs(value)
  %1074 = bitcast i32 %1069 to float
  %1075 = bitcast i32 %1070 to float
  %1076 = fcmp fast ogt float %1072, 0.000000e+00
  %1077 = and i32 %1068, 255
  %1078 = uitofp i32 %1077 to float
  %1079 = fmul fast float %1078, 0x3F70101020000000
  %1080 = lshr i32 %1068, 8
  %1081 = and i32 %1080, 255
  %1082 = uitofp i32 %1081 to float
  %1083 = fmul fast float %1082, 0x3F70101020000000
  %1084 = lshr i32 %1068, 16
  %1085 = and i32 %1084, 255
  %1086 = uitofp i32 %1085 to float
  %1087 = fmul fast float %1086, 0x3F70101020000000
  %1088 = and i32 %984, 15
  %1089 = lshr i32 4096, %1088
  %1090 = uitofp i32 %1089 to float
  %1091 = fmul fast float %1090, 0x3F30000000000000
  %1092 = lshr i32 %984, 4
  %1093 = select i1 %1076, i32 255, i32 63
  %1094 = and i32 %1092, %1093
  %1095 = lshr i32 %984, 12
  %1096 = and i32 %1095, 255
  %1097 = lshr i32 %984, 10
  %1098 = and i32 %1097, 63
  %1099 = select i1 %1076, i32 %1096, i32 %1098
  %1100 = fmul fast float %1091, %970
  %1101 = fmul fast float %1091, %971
  %1102 = call float @dx.op.unary.f32(i32 22, float %1100)  ; Frc(value)
  %1103 = call float @dx.op.unary.f32(i32 22, float %1101)  ; Frc(value)
  %1104 = uitofp i32 %1094 to float
  %1105 = uitofp i32 %1099 to float
  %1106 = fmul fast float %1104, %1073
  %1107 = fmul fast float %1105, %1073
  %1108 = fmul fast float %1102, %1074
  %1109 = fmul fast float %1103, %1074
  %1110 = fadd fast float %1108, %1075
  %1111 = fadd fast float %1109, %1075
  %1112 = fadd fast float %1110, %1106
  %1113 = fadd fast float %1111, %1107
  %1114 = icmp ugt i32 %984, 15
  %1115 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1116 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1117 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1115, %dx.types.Handle %1116, float %1112, float %1113, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1118 = extractvalue %dx.types.ResRet.f32 %1117, 0
  %1119 = extractvalue %dx.types.ResRet.f32 %1117, 1
  %1120 = extractvalue %dx.types.ResRet.f32 %1117, 2
  %1121 = select i1 %1114, float %1118, float %1087
  %1122 = select i1 %1114, float %1119, float %1083
  %1123 = select i1 %1114, float %1120, float %1079
  %1124 = fmul fast float %1121, %238
  %1125 = fmul fast float %1122, %238
  %1126 = fmul fast float %1123, %238
  %1127 = fadd fast float %1064, %1124
  %1128 = fadd fast float %1065, %1125
  %1129 = fadd fast float %1066, %1126
  %1130 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1131 = extractvalue %dx.types.CBufRet.i32 %1130, 0
  %1132 = extractvalue %dx.types.CBufRet.i32 %1130, 1
  %1133 = extractvalue %dx.types.CBufRet.i32 %1130, 2
  %1134 = extractvalue %dx.types.CBufRet.i32 %1130, 3
  %1135 = bitcast i32 %1134 to float
  %1136 = call float @dx.op.unary.f32(i32 6, float %1135)  ; FAbs(value)
  %1137 = bitcast i32 %1132 to float
  %1138 = bitcast i32 %1133 to float
  %1139 = fcmp fast ogt float %1135, 0.000000e+00
  %1140 = and i32 %1131, 255
  %1141 = uitofp i32 %1140 to float
  %1142 = fmul fast float %1141, 0x3F70101020000000
  %1143 = lshr i32 %1131, 8
  %1144 = and i32 %1143, 255
  %1145 = uitofp i32 %1144 to float
  %1146 = fmul fast float %1145, 0x3F70101020000000
  %1147 = lshr i32 %1131, 16
  %1148 = and i32 %1147, 255
  %1149 = uitofp i32 %1148 to float
  %1150 = fmul fast float %1149, 0x3F70101020000000
  %1151 = and i32 %985, 15
  %1152 = lshr i32 4096, %1151
  %1153 = uitofp i32 %1152 to float
  %1154 = fmul fast float %1153, 0x3F30000000000000
  %1155 = lshr i32 %985, 4
  %1156 = select i1 %1139, i32 255, i32 63
  %1157 = and i32 %1155, %1156
  %1158 = lshr i32 %985, 12
  %1159 = and i32 %1158, 255
  %1160 = lshr i32 %985, 10
  %1161 = and i32 %1160, 63
  %1162 = select i1 %1139, i32 %1159, i32 %1161
  %1163 = fmul fast float %1154, %970
  %1164 = fmul fast float %1154, %971
  %1165 = call float @dx.op.unary.f32(i32 22, float %1163)  ; Frc(value)
  %1166 = call float @dx.op.unary.f32(i32 22, float %1164)  ; Frc(value)
  %1167 = uitofp i32 %1157 to float
  %1168 = uitofp i32 %1162 to float
  %1169 = fmul fast float %1167, %1136
  %1170 = fmul fast float %1168, %1136
  %1171 = fmul fast float %1165, %1137
  %1172 = fmul fast float %1166, %1137
  %1173 = fadd fast float %1171, %1138
  %1174 = fadd fast float %1172, %1138
  %1175 = fadd fast float %1173, %1169
  %1176 = fadd fast float %1174, %1170
  %1177 = icmp ugt i32 %985, 15
  %1178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1179 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1180 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1178, %dx.types.Handle %1179, float %1175, float %1176, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1181 = extractvalue %dx.types.ResRet.f32 %1180, 0
  %1182 = extractvalue %dx.types.ResRet.f32 %1180, 1
  %1183 = extractvalue %dx.types.ResRet.f32 %1180, 2
  %1184 = select i1 %1177, float %1181, float %1150
  %1185 = select i1 %1177, float %1182, float %1146
  %1186 = select i1 %1177, float %1183, float %1142
  %1187 = fmul fast float %1184, %250
  %1188 = fmul fast float %1185, %250
  %1189 = fmul fast float %1186, %250
  %1190 = fadd fast float %1127, %1187
  %1191 = fadd fast float %1128, %1188
  %1192 = fadd fast float %1129, %1189
  %1193 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1194 = extractvalue %dx.types.CBufRet.i32 %1193, 0
  %1195 = extractvalue %dx.types.CBufRet.i32 %1193, 1
  %1196 = extractvalue %dx.types.CBufRet.i32 %1193, 2
  %1197 = extractvalue %dx.types.CBufRet.i32 %1193, 3
  %1198 = bitcast i32 %1197 to float
  %1199 = call float @dx.op.unary.f32(i32 6, float %1198)  ; FAbs(value)
  %1200 = bitcast i32 %1195 to float
  %1201 = bitcast i32 %1196 to float
  %1202 = fcmp fast ogt float %1198, 0.000000e+00
  %1203 = and i32 %1194, 255
  %1204 = uitofp i32 %1203 to float
  %1205 = fmul fast float %1204, 0x3F70101020000000
  %1206 = lshr i32 %1194, 8
  %1207 = and i32 %1206, 255
  %1208 = uitofp i32 %1207 to float
  %1209 = fmul fast float %1208, 0x3F70101020000000
  %1210 = lshr i32 %1194, 16
  %1211 = and i32 %1210, 255
  %1212 = uitofp i32 %1211 to float
  %1213 = fmul fast float %1212, 0x3F70101020000000
  %1214 = and i32 %986, 15
  %1215 = lshr i32 4096, %1214
  %1216 = uitofp i32 %1215 to float
  %1217 = fmul fast float %1216, 0x3F30000000000000
  %1218 = lshr i32 %986, 4
  %1219 = select i1 %1202, i32 255, i32 63
  %1220 = and i32 %1218, %1219
  %1221 = lshr i32 %986, 12
  %1222 = and i32 %1221, 255
  %1223 = lshr i32 %986, 10
  %1224 = and i32 %1223, 63
  %1225 = select i1 %1202, i32 %1222, i32 %1224
  %1226 = fmul fast float %1217, %970
  %1227 = fmul fast float %1217, %971
  %1228 = call float @dx.op.unary.f32(i32 22, float %1226)  ; Frc(value)
  %1229 = call float @dx.op.unary.f32(i32 22, float %1227)  ; Frc(value)
  %1230 = uitofp i32 %1220 to float
  %1231 = uitofp i32 %1225 to float
  %1232 = fmul fast float %1230, %1199
  %1233 = fmul fast float %1231, %1199
  %1234 = fmul fast float %1228, %1200
  %1235 = fmul fast float %1229, %1200
  %1236 = fadd fast float %1234, %1201
  %1237 = fadd fast float %1235, %1201
  %1238 = fadd fast float %1236, %1232
  %1239 = fadd fast float %1237, %1233
  %1240 = icmp ugt i32 %986, 15
  %1241 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1243 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1241, %dx.types.Handle %1242, float %1238, float %1239, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1244 = extractvalue %dx.types.ResRet.f32 %1243, 0
  %1245 = extractvalue %dx.types.ResRet.f32 %1243, 1
  %1246 = extractvalue %dx.types.ResRet.f32 %1243, 2
  %1247 = select i1 %1240, float %1244, float %1213
  %1248 = select i1 %1240, float %1245, float %1209
  %1249 = select i1 %1240, float %1246, float %1205
  %1250 = fmul fast float %1247, %256
  %1251 = fmul fast float %1248, %256
  %1252 = fmul fast float %1249, %256
  %1253 = fadd fast float %1190, %1250
  %1254 = fadd fast float %1191, %1251
  %1255 = fadd fast float %1192, %1252
  %1256 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1257 = extractvalue %dx.types.CBufRet.i32 %1256, 0
  %1258 = extractvalue %dx.types.CBufRet.i32 %1256, 1
  %1259 = extractvalue %dx.types.CBufRet.i32 %1256, 2
  %1260 = extractvalue %dx.types.CBufRet.i32 %1256, 3
  %1261 = bitcast i32 %1260 to float
  %1262 = call float @dx.op.unary.f32(i32 6, float %1261)  ; FAbs(value)
  %1263 = bitcast i32 %1258 to float
  %1264 = bitcast i32 %1259 to float
  %1265 = fcmp fast ogt float %1261, 0.000000e+00
  %1266 = lshr i32 %1257, 16
  %1267 = and i32 %1266, 255
  %1268 = uitofp i32 %1267 to float
  %1269 = fmul fast float %1268, 0x3F70101020000000
  %1270 = and i32 %989, 15
  %1271 = lshr i32 4096, %1270
  %1272 = uitofp i32 %1271 to float
  %1273 = fmul fast float %1272, 0x3F30000000000000
  %1274 = lshr i32 %989, 4
  %1275 = select i1 %1265, i32 255, i32 63
  %1276 = and i32 %1274, %1275
  %1277 = lshr i32 %989, 12
  %1278 = and i32 %1277, 255
  %1279 = lshr i32 %989, 10
  %1280 = and i32 %1279, 63
  %1281 = select i1 %1265, i32 %1278, i32 %1280
  %1282 = fmul fast float %1273, %970
  %1283 = fmul fast float %1273, %971
  %1284 = call float @dx.op.unary.f32(i32 22, float %1282)  ; Frc(value)
  %1285 = call float @dx.op.unary.f32(i32 22, float %1283)  ; Frc(value)
  %1286 = uitofp i32 %1276 to float
  %1287 = uitofp i32 %1281 to float
  %1288 = fmul fast float %1286, %1262
  %1289 = fmul fast float %1287, %1262
  %1290 = fmul fast float %1284, %1263
  %1291 = fmul fast float %1285, %1263
  %1292 = fadd fast float %1290, %1264
  %1293 = fadd fast float %1291, %1264
  %1294 = fadd fast float %1292, %1288
  %1295 = fadd fast float %1293, %1289
  %1296 = icmp ugt i32 %989, 15
  %1297 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1298 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1299 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1297, %dx.types.Handle %1298, float %1294, float %1295, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1300 = extractvalue %dx.types.ResRet.f32 %1299, 0
  %1301 = select i1 %1296, float %1300, float %1269
  %1302 = fmul fast float %1301, %220
  %1303 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1304 = extractvalue %dx.types.CBufRet.i32 %1303, 0
  %1305 = extractvalue %dx.types.CBufRet.i32 %1303, 1
  %1306 = extractvalue %dx.types.CBufRet.i32 %1303, 2
  %1307 = extractvalue %dx.types.CBufRet.i32 %1303, 3
  %1308 = bitcast i32 %1307 to float
  %1309 = call float @dx.op.unary.f32(i32 6, float %1308)  ; FAbs(value)
  %1310 = bitcast i32 %1305 to float
  %1311 = bitcast i32 %1306 to float
  %1312 = fcmp fast ogt float %1308, 0.000000e+00
  %1313 = lshr i32 %1304, 16
  %1314 = and i32 %1313, 255
  %1315 = uitofp i32 %1314 to float
  %1316 = fmul fast float %1315, 0x3F70101020000000
  %1317 = and i32 %990, 15
  %1318 = lshr i32 4096, %1317
  %1319 = uitofp i32 %1318 to float
  %1320 = fmul fast float %1319, 0x3F30000000000000
  %1321 = lshr i32 %990, 4
  %1322 = select i1 %1312, i32 255, i32 63
  %1323 = and i32 %1321, %1322
  %1324 = lshr i32 %990, 12
  %1325 = and i32 %1324, 255
  %1326 = lshr i32 %990, 10
  %1327 = and i32 %1326, 63
  %1328 = select i1 %1312, i32 %1325, i32 %1327
  %1329 = fmul fast float %1320, %970
  %1330 = fmul fast float %1320, %971
  %1331 = call float @dx.op.unary.f32(i32 22, float %1329)  ; Frc(value)
  %1332 = call float @dx.op.unary.f32(i32 22, float %1330)  ; Frc(value)
  %1333 = uitofp i32 %1323 to float
  %1334 = uitofp i32 %1328 to float
  %1335 = fmul fast float %1333, %1309
  %1336 = fmul fast float %1334, %1309
  %1337 = fmul fast float %1331, %1310
  %1338 = fmul fast float %1332, %1310
  %1339 = fadd fast float %1337, %1311
  %1340 = fadd fast float %1338, %1311
  %1341 = fadd fast float %1339, %1335
  %1342 = fadd fast float %1340, %1336
  %1343 = icmp ugt i32 %990, 15
  %1344 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1345 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1346 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1344, %dx.types.Handle %1345, float %1341, float %1342, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1347 = extractvalue %dx.types.ResRet.f32 %1346, 0
  %1348 = select i1 %1343, float %1347, float %1316
  %1349 = fmul fast float %1348, %226
  %1350 = fadd fast float %1349, %1302
  %1351 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %1352 = extractvalue %dx.types.CBufRet.i32 %1351, 0
  %1353 = extractvalue %dx.types.CBufRet.i32 %1351, 1
  %1354 = extractvalue %dx.types.CBufRet.i32 %1351, 2
  %1355 = extractvalue %dx.types.CBufRet.i32 %1351, 3
  %1356 = bitcast i32 %1355 to float
  %1357 = call float @dx.op.unary.f32(i32 6, float %1356)  ; FAbs(value)
  %1358 = bitcast i32 %1353 to float
  %1359 = bitcast i32 %1354 to float
  %1360 = fcmp fast ogt float %1356, 0.000000e+00
  %1361 = lshr i32 %1352, 16
  %1362 = and i32 %1361, 255
  %1363 = uitofp i32 %1362 to float
  %1364 = fmul fast float %1363, 0x3F70101020000000
  %1365 = and i32 %991, 15
  %1366 = lshr i32 4096, %1365
  %1367 = uitofp i32 %1366 to float
  %1368 = fmul fast float %1367, 0x3F30000000000000
  %1369 = lshr i32 %991, 4
  %1370 = select i1 %1360, i32 255, i32 63
  %1371 = and i32 %1369, %1370
  %1372 = lshr i32 %991, 12
  %1373 = and i32 %1372, 255
  %1374 = lshr i32 %991, 10
  %1375 = and i32 %1374, 63
  %1376 = select i1 %1360, i32 %1373, i32 %1375
  %1377 = fmul fast float %1368, %970
  %1378 = fmul fast float %1368, %971
  %1379 = call float @dx.op.unary.f32(i32 22, float %1377)  ; Frc(value)
  %1380 = call float @dx.op.unary.f32(i32 22, float %1378)  ; Frc(value)
  %1381 = uitofp i32 %1371 to float
  %1382 = uitofp i32 %1376 to float
  %1383 = fmul fast float %1381, %1357
  %1384 = fmul fast float %1382, %1357
  %1385 = fmul fast float %1379, %1358
  %1386 = fmul fast float %1380, %1358
  %1387 = fadd fast float %1385, %1359
  %1388 = fadd fast float %1386, %1359
  %1389 = fadd fast float %1387, %1383
  %1390 = fadd fast float %1388, %1384
  %1391 = icmp ugt i32 %991, 15
  %1392 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1393 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1394 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1392, %dx.types.Handle %1393, float %1389, float %1390, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1395 = extractvalue %dx.types.ResRet.f32 %1394, 0
  %1396 = select i1 %1391, float %1395, float %1364
  %1397 = fmul fast float %1396, %232
  %1398 = fadd fast float %1350, %1397
  %1399 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %1400 = extractvalue %dx.types.CBufRet.i32 %1399, 0
  %1401 = extractvalue %dx.types.CBufRet.i32 %1399, 1
  %1402 = extractvalue %dx.types.CBufRet.i32 %1399, 2
  %1403 = extractvalue %dx.types.CBufRet.i32 %1399, 3
  %1404 = bitcast i32 %1403 to float
  %1405 = call float @dx.op.unary.f32(i32 6, float %1404)  ; FAbs(value)
  %1406 = bitcast i32 %1401 to float
  %1407 = bitcast i32 %1402 to float
  %1408 = fcmp fast ogt float %1404, 0.000000e+00
  %1409 = lshr i32 %1400, 16
  %1410 = and i32 %1409, 255
  %1411 = uitofp i32 %1410 to float
  %1412 = fmul fast float %1411, 0x3F70101020000000
  %1413 = and i32 %992, 15
  %1414 = lshr i32 4096, %1413
  %1415 = uitofp i32 %1414 to float
  %1416 = fmul fast float %1415, 0x3F30000000000000
  %1417 = lshr i32 %992, 4
  %1418 = select i1 %1408, i32 255, i32 63
  %1419 = and i32 %1417, %1418
  %1420 = lshr i32 %992, 12
  %1421 = and i32 %1420, 255
  %1422 = lshr i32 %992, 10
  %1423 = and i32 %1422, 63
  %1424 = select i1 %1408, i32 %1421, i32 %1423
  %1425 = fmul fast float %1416, %970
  %1426 = fmul fast float %1416, %971
  %1427 = call float @dx.op.unary.f32(i32 22, float %1425)  ; Frc(value)
  %1428 = call float @dx.op.unary.f32(i32 22, float %1426)  ; Frc(value)
  %1429 = uitofp i32 %1419 to float
  %1430 = uitofp i32 %1424 to float
  %1431 = fmul fast float %1429, %1405
  %1432 = fmul fast float %1430, %1405
  %1433 = fmul fast float %1427, %1406
  %1434 = fmul fast float %1428, %1406
  %1435 = fadd fast float %1433, %1407
  %1436 = fadd fast float %1434, %1407
  %1437 = fadd fast float %1435, %1431
  %1438 = fadd fast float %1436, %1432
  %1439 = icmp ugt i32 %992, 15
  %1440 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1441 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1442 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1440, %dx.types.Handle %1441, float %1437, float %1438, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1443 = extractvalue %dx.types.ResRet.f32 %1442, 0
  %1444 = select i1 %1439, float %1443, float %1412
  %1445 = fmul fast float %1444, %238
  %1446 = fadd fast float %1398, %1445
  %1447 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1448 = extractvalue %dx.types.CBufRet.i32 %1447, 0
  %1449 = extractvalue %dx.types.CBufRet.i32 %1447, 1
  %1450 = extractvalue %dx.types.CBufRet.i32 %1447, 2
  %1451 = extractvalue %dx.types.CBufRet.i32 %1447, 3
  %1452 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1453 = extractvalue %dx.types.CBufRet.i32 %1452, 0
  %1454 = extractvalue %dx.types.CBufRet.i32 %1452, 1
  %1455 = extractvalue %dx.types.CBufRet.i32 %1452, 2
  %1456 = extractvalue %dx.types.CBufRet.i32 %1452, 3
  %1457 = bitcast i32 %1453 to float
  %1458 = bitcast i32 %1454 to float
  %1459 = bitcast i32 %1455 to float
  %1460 = bitcast i32 %1456 to float
  %1461 = bitcast i32 %1448 to float
  %1462 = and i32 %1449, 4095
  %1463 = lshr i32 %1449, 12
  %1464 = and i32 %1463, 4095
  %1465 = lshr i32 %1449, 24
  %1466 = and i32 %1450, 15
  %1467 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %1468 = extractvalue %dx.types.CBufRet.f32 %1467, 0
  %1469 = fmul fast float %1457, %257
  %1470 = fmul fast float %1458, %258
  %1471 = call float @dx.op.unary.f32(i32 84, float %1469)  ; DerivCoarseY(value)
  %1472 = call float @dx.op.unary.f32(i32 84, float %1470)  ; DerivCoarseY(value)
  %1473 = call float @dx.op.unary.f32(i32 83, float %1469)  ; DerivCoarseX(value)
  %1474 = call float @dx.op.unary.f32(i32 83, float %1470)  ; DerivCoarseX(value)
  %1475 = fmul fast float %1473, %1459
  %1476 = fmul fast float %1474, %1460
  %1477 = fmul fast float %1471, %1459
  %1478 = fmul fast float %1472, %1460
  %1479 = call float @dx.op.dot2.f32(i32 54, float %1475, float %1476, float %1475, float %1476)  ; Dot2(ax,ay,bx,by)
  %1480 = call float @dx.op.dot2.f32(i32 54, float %1477, float %1478, float %1477, float %1478)  ; Dot2(ax,ay,bx,by)
  %1481 = call float @dx.op.binary.f32(i32 36, float %1479, float %1480)  ; FMin(a,b)
  %1482 = call float @dx.op.unary.f32(i32 23, float %1481)  ; Log(value)
  %1483 = call float @dx.op.binary.f32(i32 35, float %1479, float %1480)  ; FMax(a,b)
  %1484 = call float @dx.op.unary.f32(i32 23, float %1483)  ; Log(value)
  %1485 = fmul fast float %1484, 5.000000e-01
  %1486 = fsub fast float %1484, %1482
  %1487 = fmul fast float %1486, 5.000000e-01
  %1488 = call float @dx.op.binary.f32(i32 36, float %1487, float %1461)  ; FMin(a,b)
  %1489 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %1490 = extractvalue %dx.types.CBufRet.f32 %1489, 0
  %1491 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1492 = extractvalue %dx.types.CBufRet.i32 %1491, 1
  %1493 = uitofp i32 %1492 to float
  %1494 = fmul fast float %1493, 0x4040551EC0000000
  %1495 = fmul fast float %1493, 0x4027A147A0000000
  %1496 = fadd fast float %1494, %62
  %1497 = fadd fast float %1495, %63
  %1498 = call float @dx.op.dot2.f32(i32 54, float %1496, float %1497, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %1499 = call float @dx.op.unary.f32(i32 22, float %1498)  ; Frc(value)
  %1500 = fmul fast float %1499, 0x404A7DD040000000
  %1501 = call float @dx.op.unary.f32(i32 22, float %1500)  ; Frc(value)
  %1502 = fsub fast float %1468, %1488
  %1503 = fadd fast float %1502, %1485
  %1504 = fadd fast float %1503, %1490
  %1505 = fadd fast float %1504, %1501
  %1506 = call float @dx.op.unary.f32(i32 27, float %1505)  ; Round_ni(value)
  %1507 = fptosi float %1506 to i32
  %1508 = add nsw i32 %1507, %1465
  %1509 = call float @dx.op.unary.f32(i32 22, float %1469)  ; Frc(value)
  %1510 = call float @dx.op.unary.f32(i32 22, float %1470)  ; Frc(value)
  %1511 = fmul fast float %1509, %1459
  %1512 = fmul fast float %1510, %1460
  %1513 = call i32 @dx.op.binary.i32(i32 37, i32 %1508, i32 0)  ; IMax(a,b)
  %1514 = call i32 @dx.op.binary.i32(i32 38, i32 %1513, i32 %1466)  ; IMin(a,b)
  %1515 = fptoui float %1511 to i32
  %1516 = add i32 %1515, %1462
  %1517 = and i32 %1514, 31
  %1518 = lshr i32 %1516, %1517
  %1519 = fptoui float %1512 to i32
  %1520 = add i32 %1519, %1464
  %1521 = lshr i32 %1520, %1517
  %1522 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %1523 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1522, i32 %1514, i32 %1518, i32 %1521, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1524 = extractvalue %dx.types.ResRet.i32 %1523, 0
  %1525 = extractvalue %dx.types.ResRet.i32 %1523, 1
  %1526 = or i32 %1518, %1451
  %1527 = shl i32 %1521, 12
  %1528 = or i32 %1526, %1527
  %1529 = add nuw nsw i32 %1466, 1
  %1530 = add nsw i32 %1508, 1
  %1531 = call i32 @dx.op.binary.i32(i32 37, i32 %1530, i32 0)  ; IMax(a,b)
  %1532 = call i32 @dx.op.binary.i32(i32 38, i32 %1531, i32 %1529)  ; IMin(a,b)
  %1533 = shl i32 %1532, 24
  %1534 = or i32 %1528, %1533
  %1535 = icmp eq i32 %207, 2
  %1536 = select i1 %1535, i32 %1534, i32 %1003
  %1537 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %1538 = extractvalue %dx.types.CBufRet.i32 %1537, 0
  %1539 = extractvalue %dx.types.CBufRet.i32 %1537, 1
  %1540 = extractvalue %dx.types.CBufRet.i32 %1537, 2
  %1541 = extractvalue %dx.types.CBufRet.i32 %1537, 3
  %1542 = bitcast i32 %1541 to float
  %1543 = call float @dx.op.unary.f32(i32 6, float %1542)  ; FAbs(value)
  %1544 = bitcast i32 %1539 to float
  %1545 = bitcast i32 %1540 to float
  %1546 = fcmp fast ogt float %1542, 0.000000e+00
  %1547 = lshr i32 %1538, 16
  %1548 = and i32 %1547, 255
  %1549 = uitofp i32 %1548 to float
  %1550 = fmul fast float %1549, 0x3F70101020000000
  %1551 = and i32 %1524, 15
  %1552 = lshr i32 4096, %1551
  %1553 = uitofp i32 %1552 to float
  %1554 = fmul fast float %1553, 0x3F30000000000000
  %1555 = lshr i32 %1524, 4
  %1556 = select i1 %1546, i32 255, i32 63
  %1557 = and i32 %1555, %1556
  %1558 = lshr i32 %1524, 12
  %1559 = and i32 %1558, 255
  %1560 = lshr i32 %1524, 10
  %1561 = and i32 %1560, 63
  %1562 = select i1 %1546, i32 %1559, i32 %1561
  %1563 = fmul fast float %1554, %1511
  %1564 = fmul fast float %1554, %1512
  %1565 = call float @dx.op.unary.f32(i32 22, float %1563)  ; Frc(value)
  %1566 = call float @dx.op.unary.f32(i32 22, float %1564)  ; Frc(value)
  %1567 = uitofp i32 %1557 to float
  %1568 = uitofp i32 %1562 to float
  %1569 = fmul fast float %1567, %1543
  %1570 = fmul fast float %1568, %1543
  %1571 = fmul fast float %1565, %1544
  %1572 = fmul fast float %1566, %1544
  %1573 = fadd fast float %1571, %1545
  %1574 = fadd fast float %1572, %1545
  %1575 = fadd fast float %1573, %1569
  %1576 = fadd fast float %1574, %1570
  %1577 = icmp ugt i32 %1524, 15
  %1578 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1579 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1580 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1578, %dx.types.Handle %1579, float %1575, float %1576, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1581 = extractvalue %dx.types.ResRet.f32 %1580, 0
  %1582 = select i1 %1577, float %1581, float %1550
  %1583 = fmul fast float %1582, %250
  %1584 = fadd fast float %1446, %1583
  %1585 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %1586 = extractvalue %dx.types.CBufRet.i32 %1585, 0
  %1587 = extractvalue %dx.types.CBufRet.i32 %1585, 1
  %1588 = extractvalue %dx.types.CBufRet.i32 %1585, 2
  %1589 = extractvalue %dx.types.CBufRet.i32 %1585, 3
  %1590 = bitcast i32 %1589 to float
  %1591 = call float @dx.op.unary.f32(i32 6, float %1590)  ; FAbs(value)
  %1592 = bitcast i32 %1587 to float
  %1593 = bitcast i32 %1588 to float
  %1594 = fcmp fast ogt float %1590, 0.000000e+00
  %1595 = lshr i32 %1586, 16
  %1596 = and i32 %1595, 255
  %1597 = uitofp i32 %1596 to float
  %1598 = fmul fast float %1597, 0x3F70101020000000
  %1599 = and i32 %1525, 15
  %1600 = lshr i32 4096, %1599
  %1601 = uitofp i32 %1600 to float
  %1602 = fmul fast float %1601, 0x3F30000000000000
  %1603 = lshr i32 %1525, 4
  %1604 = select i1 %1594, i32 255, i32 63
  %1605 = and i32 %1603, %1604
  %1606 = lshr i32 %1525, 12
  %1607 = and i32 %1606, 255
  %1608 = lshr i32 %1525, 10
  %1609 = and i32 %1608, 63
  %1610 = select i1 %1594, i32 %1607, i32 %1609
  %1611 = fmul fast float %1602, %1511
  %1612 = fmul fast float %1602, %1512
  %1613 = call float @dx.op.unary.f32(i32 22, float %1611)  ; Frc(value)
  %1614 = call float @dx.op.unary.f32(i32 22, float %1612)  ; Frc(value)
  %1615 = uitofp i32 %1605 to float
  %1616 = uitofp i32 %1610 to float
  %1617 = fmul fast float %1615, %1591
  %1618 = fmul fast float %1616, %1591
  %1619 = fmul fast float %1613, %1592
  %1620 = fmul fast float %1614, %1592
  %1621 = fadd fast float %1619, %1593
  %1622 = fadd fast float %1620, %1593
  %1623 = fadd fast float %1621, %1617
  %1624 = fadd fast float %1622, %1618
  %1625 = icmp ugt i32 %1525, 15
  %1626 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1627 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1628 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1626, %dx.types.Handle %1627, float %1623, float %1624, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1629 = extractvalue %dx.types.ResRet.f32 %1628, 0
  %1630 = select i1 %1625, float %1629, float %1598
  %1631 = fmul fast float %1630, %256
  %1632 = fadd fast float %1584, %1631
  %1633 = call float @dx.op.unary.f32(i32 7, float %1253)  ; Saturate(value)
  %1634 = call float @dx.op.unary.f32(i32 7, float %1254)  ; Saturate(value)
  %1635 = call float @dx.op.unary.f32(i32 7, float %1255)  ; Saturate(value)
  %1636 = call float @dx.op.unary.f32(i32 7, float %1632)  ; Saturate(value)
  %1637 = fmul fast float %1636, %111
  %1638 = fadd fast float %1637, %110
  %1639 = mul i32 %69, 41
  %1640 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1641 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1639, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1642 = extractvalue %dx.types.ResRet.f32 %1641, 0
  %1643 = bitcast float %1642 to i32
  %1644 = and i32 %1643, 8
  %1645 = icmp ne i32 %1644, 0
  %1646 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 192)  ; CBufferLoadLegacy(handle,regIndex)
  %1647 = extractvalue %dx.types.CBufRet.f32 %1646, 3
  %1648 = fcmp fast ogt float %1647, 0.000000e+00
  %1649 = and i1 %1648, %1645
  br i1 %1649, label %1650, label %1705, !dx.controlflow.hints !99

; <label>:1650                                    ; preds = %0
  %1651 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1652 = extractvalue %dx.types.CBufRet.f32 %1651, 2
  %1653 = extractvalue %dx.types.CBufRet.f32 %1651, 3
  %1654 = fmul fast float %1652, %62
  %1655 = fmul fast float %1653, %63
  %1656 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1657 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %53, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1658 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1656, %dx.types.Handle %1657, float %1654, float %1655, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1659 = extractvalue %dx.types.ResRet.f32 %1658, 0
  %1660 = extractvalue %dx.types.ResRet.f32 %1658, 1
  %1661 = extractvalue %dx.types.ResRet.f32 %1658, 2
  %1662 = extractvalue %dx.types.ResRet.f32 %1658, 3
  %1663 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1664 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1663, %dx.types.Handle %1657, float %1654, float %1655, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1665 = extractvalue %dx.types.ResRet.f32 %1664, 0
  %1666 = extractvalue %dx.types.ResRet.f32 %1664, 1
  %1667 = extractvalue %dx.types.ResRet.f32 %1664, 2
  %1668 = extractvalue %dx.types.ResRet.f32 %1664, 3
  %1669 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1670 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1669, %dx.types.Handle %1657, float %1654, float %1655, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1671 = extractvalue %dx.types.ResRet.f32 %1670, 0
  %1672 = extractvalue %dx.types.ResRet.f32 %1670, 1
  %1673 = extractvalue %dx.types.ResRet.f32 %1670, 2
  %1674 = extractvalue %dx.types.ResRet.f32 %1670, 3
  %1675 = fmul fast float %1665, 2.000000e+00
  %1676 = fmul fast float %1666, 2.000000e+00
  %1677 = fmul fast float %1667, 2.000000e+00
  %1678 = fadd fast float %1675, 0xBFF0101020000000
  %1679 = fadd fast float %1676, 0xBFF0101020000000
  %1680 = fadd fast float %1677, 0xBFF0101020000000
  %1681 = fmul fast float %1662, %1633
  %1682 = fmul fast float %1662, %1634
  %1683 = fmul fast float %1662, %1635
  %1684 = fadd fast float %1681, %1659
  %1685 = fadd fast float %1682, %1660
  %1686 = fadd fast float %1683, %1661
  %1687 = fmul fast float %1668, %772
  %1688 = fmul fast float %1668, %773
  %1689 = fmul fast float %1668, %774
  %1690 = fadd fast float %1678, %1687
  %1691 = fadd fast float %1679, %1688
  %1692 = fadd fast float %1680, %1689
  %1693 = call float @dx.op.dot3.f32(i32 55, float %1690, float %1691, float %1692, float %1690, float %1691, float %1692)  ; Dot3(ax,ay,az,bx,by,bz)
  %1694 = call float @dx.op.unary.f32(i32 25, float %1693)  ; Rsqrt(value)
  %1695 = fmul fast float %1694, %1690
  %1696 = fmul fast float %1694, %1691
  %1697 = fmul fast float %1694, %1692
  %1698 = fmul fast float %1674, %1638
  %1699 = fadd fast float %1698, %1673
  %1700 = fmul fast float %1674, 5.000000e-01
  %1701 = fadd fast float %1700, %1672
  %1702 = fadd fast float %1668, %1662
  %1703 = fadd fast float %1702, %1674
  %1704 = fmul fast float %1703, 0x3FD5555560000000
  br label %1705

; <label>:1705                                    ; preds = %1650, %0
  %1706 = phi float [ %1695, %1650 ], [ %772, %0 ]
  %1707 = phi float [ %1696, %1650 ], [ %773, %0 ]
  %1708 = phi float [ %1697, %1650 ], [ %774, %0 ]
  %1709 = phi float [ %1684, %1650 ], [ %1633, %0 ]
  %1710 = phi float [ %1685, %1650 ], [ %1634, %0 ]
  %1711 = phi float [ %1686, %1650 ], [ %1635, %0 ]
  %1712 = phi float [ %1671, %1650 ], [ 0.000000e+00, %0 ]
  %1713 = phi float [ %1701, %1650 ], [ 5.000000e-01, %0 ]
  %1714 = phi float [ %1699, %1650 ], [ %1638, %0 ]
  %1715 = phi float [ %1704, %1650 ], [ 1.000000e+00, %0 ]
  %1716 = and i32 %1643, 256
  %1717 = icmp ne i32 %1716, 0
  %1718 = and i32 %1643, 512
  %1719 = icmp ne i32 %1718, 0
  %1720 = select i1 %1719, float 1.000000e+00, float 0.000000e+00
  %1721 = select i1 %1717, float 2.000000e+00, float 0.000000e+00
  %1722 = fadd fast float %1721, %1720
  %1723 = fmul fast float %1722, 0x3FD5555560000000
  %1724 = and i32 %1643, 4
  %1725 = icmp eq i32 %1724, 0
  br i1 %1725, label %1804, label %1726, !dx.controlflow.hints !100

; <label>:1726                                    ; preds = %1705
  %1727 = fmul fast float %97, 2.097152e+06
  %1728 = fmul fast float %98, 2.097152e+06
  %1729 = fmul fast float %99, 2.097152e+06
  %1730 = fadd fast float %191, %1727
  %1731 = fadd fast float %192, %1728
  %1732 = fadd fast float %193, %1729
  %1733 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %1734 = extractvalue %dx.types.CBufRet.f32 %1733, 0
  %1735 = extractvalue %dx.types.CBufRet.f32 %1733, 1
  %1736 = extractvalue %dx.types.CBufRet.f32 %1733, 2
  %1737 = fmul fast float %1734, %1730
  %1738 = fmul fast float %1735, %1731
  %1739 = fmul fast float %1736, %1732
  %1740 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 232)  ; CBufferLoadLegacy(handle,regIndex)
  %1741 = extractvalue %dx.types.CBufRet.f32 %1740, 0
  %1742 = extractvalue %dx.types.CBufRet.f32 %1740, 1
  %1743 = extractvalue %dx.types.CBufRet.f32 %1740, 2
  %1744 = fadd fast float %1737, %1741
  %1745 = fadd fast float %1738, %1742
  %1746 = fadd fast float %1739, %1743
  %1747 = call float @dx.op.binary.f32(i32 35, float %1744, float 0.000000e+00)  ; FMax(a,b)
  %1748 = call float @dx.op.binary.f32(i32 35, float %1745, float 0.000000e+00)  ; FMax(a,b)
  %1749 = call float @dx.op.binary.f32(i32 35, float %1746, float 0.000000e+00)  ; FMax(a,b)
  %1750 = call float @dx.op.binary.f32(i32 36, float %1747, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1751 = call float @dx.op.binary.f32(i32 36, float %1748, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1752 = call float @dx.op.binary.f32(i32 36, float %1749, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1753 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1754 = extractvalue %dx.types.CBufRet.f32 %1753, 0
  %1755 = extractvalue %dx.types.CBufRet.f32 %1753, 1
  %1756 = extractvalue %dx.types.CBufRet.f32 %1753, 2
  %1757 = fmul fast float %1754, %1750
  %1758 = fmul fast float %1755, %1751
  %1759 = fmul fast float %1756, %1752
  %1760 = fptosi float %1757 to i32
  %1761 = fptosi float %1758 to i32
  %1762 = fptosi float %1759 to i32
  %1763 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1764 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1763, i32 0, i32 %1760, i32 %1761, i32 %1762, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1765 = extractvalue %dx.types.ResRet.i32 %1764, 0
  %1766 = extractvalue %dx.types.ResRet.i32 %1764, 1
  %1767 = extractvalue %dx.types.ResRet.i32 %1764, 2
  %1768 = extractvalue %dx.types.ResRet.i32 %1764, 3
  %1769 = uitofp i32 %1765 to float
  %1770 = uitofp i32 %1766 to float
  %1771 = uitofp i32 %1767 to float
  %1772 = uitofp i32 %1768 to float
  %1773 = extractvalue %dx.types.CBufRet.f32 %1753, 3
  %1774 = fadd fast float %1773, 1.000000e+00
  %1775 = fmul fast float %1774, %1769
  %1776 = fmul fast float %1774, %1770
  %1777 = fmul fast float %1774, %1771
  %1778 = fdiv fast float %1757, %1772
  %1779 = fdiv fast float %1758, %1772
  %1780 = fdiv fast float %1759, %1772
  %1781 = call float @dx.op.unary.f32(i32 22, float %1778)  ; Frc(value)
  %1782 = call float @dx.op.unary.f32(i32 22, float %1779)  ; Frc(value)
  %1783 = call float @dx.op.unary.f32(i32 22, float %1780)  ; Frc(value)
  %1784 = fmul fast float %1773, %1781
  %1785 = fmul fast float %1773, %1782
  %1786 = fmul fast float %1773, %1783
  %1787 = fadd fast float %1775, 5.000000e-01
  %1788 = fadd fast float %1787, %1784
  %1789 = fadd fast float %1776, 5.000000e-01
  %1790 = fadd fast float %1789, %1785
  %1791 = fadd fast float %1777, 5.000000e-01
  %1792 = fadd fast float %1791, %1786
  %1793 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1794 = extractvalue %dx.types.CBufRet.f32 %1793, 0
  %1795 = extractvalue %dx.types.CBufRet.f32 %1793, 1
  %1796 = extractvalue %dx.types.CBufRet.f32 %1793, 2
  %1797 = fmul fast float %1788, %1794
  %1798 = fmul fast float %1790, %1795
  %1799 = fmul fast float %1792, %1796
  %1800 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1801 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %55, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1802 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1800, %dx.types.Handle %1801, float %1797, float %1798, float %1799, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1803 = extractvalue %dx.types.ResRet.f32 %1802, 0
  br label %1804

; <label>:1804                                    ; preds = %1726, %1705
  %1805 = phi float [ %1803, %1726 ], [ 1.000000e+00, %1705 ]
  %1806 = fmul fast float %1713, 0x3FB47AE140000000
  %1807 = fsub fast float %1709, %1806
  %1808 = fsub fast float %1710, %1806
  %1809 = fsub fast float %1711, %1806
  %1810 = fmul fast float %1807, %1712
  %1811 = fmul fast float %1808, %1712
  %1812 = fmul fast float %1809, %1712
  %1813 = fadd fast float %1810, %1806
  %1814 = fadd fast float %1811, %1806
  %1815 = fadd fast float %1812, %1806
  %1816 = fmul fast float %1712, %1709
  %1817 = fmul fast float %1712, %1710
  %1818 = fmul fast float %1712, %1711
  %1819 = fsub fast float %1709, %1816
  %1820 = fsub fast float %1710, %1817
  %1821 = fsub fast float %1711, %1818
  %1822 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %1823 = extractvalue %dx.types.CBufRet.f32 %1822, 3
  %1824 = fmul fast float %1823, %1819
  %1825 = fmul fast float %1823, %1820
  %1826 = fmul fast float %1823, %1821
  %1827 = extractvalue %dx.types.CBufRet.f32 %1822, 0
  %1828 = extractvalue %dx.types.CBufRet.f32 %1822, 1
  %1829 = extractvalue %dx.types.CBufRet.f32 %1822, 2
  %1830 = fadd fast float %1824, %1827
  %1831 = fadd fast float %1825, %1828
  %1832 = fadd fast float %1826, %1829
  %1833 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %1834 = extractvalue %dx.types.CBufRet.f32 %1833, 3
  %1835 = fmul fast float %1834, %1813
  %1836 = fmul fast float %1834, %1814
  %1837 = fmul fast float %1834, %1815
  %1838 = extractvalue %dx.types.CBufRet.f32 %1833, 0
  %1839 = extractvalue %dx.types.CBufRet.f32 %1833, 1
  %1840 = extractvalue %dx.types.CBufRet.f32 %1833, 2
  %1841 = fadd fast float %1835, %1838
  %1842 = fadd fast float %1836, %1839
  %1843 = fadd fast float %1837, %1840
  %1844 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1845 = extractvalue %dx.types.CBufRet.f32 %1844, 3
  %1846 = fcmp fast une float %1845, 0.000000e+00
  %1847 = fmul fast float %1841, 0x3FDCCCCCC0000000
  %1848 = fmul fast float %1842, 0x3FDCCCCCC0000000
  %1849 = fmul fast float %1843, 0x3FDCCCCCC0000000
  %1850 = fadd fast float %1847, %1830
  %1851 = fadd fast float %1848, %1831
  %1852 = fadd fast float %1849, %1832
  %1853 = select i1 %1846, float %1850, float %1830
  %1854 = select i1 %1846, float %1851, float %1831
  %1855 = select i1 %1846, float %1852, float %1832
  %1856 = select i1 %1846, float 0.000000e+00, float %1847
  %1857 = select i1 %1846, float 0.000000e+00, float %1848
  %1858 = select i1 %1846, float 0.000000e+00, float %1849
  %1859 = fadd fast float %1853, %1856
  %1860 = fadd fast float %1854, %1857
  %1861 = fadd fast float %1855, %1858
  %1862 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %1863 = extractvalue %dx.types.CBufRet.f32 %1862, 2
  %1864 = fmul fast float %1859, %1863
  %1865 = fmul fast float %1860, %1863
  %1866 = fmul fast float %1861, %1863
  %1867 = call float @dx.op.binary.f32(i32 35, float %780, float 0.000000e+00)  ; FMax(a,b)
  %1868 = call float @dx.op.binary.f32(i32 35, float %781, float 0.000000e+00)  ; FMax(a,b)
  %1869 = call float @dx.op.binary.f32(i32 35, float %782, float 0.000000e+00)  ; FMax(a,b)
  %1870 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %1871 = extractvalue %dx.types.CBufRet.f32 %1870, 0
  %1872 = fcmp fast ogt float %1871, 0.000000e+00
  br i1 %1872, label %1873, label %1954, !dx.controlflow.hints !101

; <label>:1873                                    ; preds = %1804
  %1874 = add i32 %1639, 1
  %1875 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1874, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1876 = extractvalue %dx.types.ResRet.f32 %1875, 0
  %1877 = extractvalue %dx.types.ResRet.f32 %1875, 1
  %1878 = extractvalue %dx.types.ResRet.f32 %1875, 2
  %1879 = add i32 %1639, 18
  %1880 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1879, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1881 = extractvalue %dx.types.ResRet.f32 %1880, 0
  %1882 = extractvalue %dx.types.ResRet.f32 %1880, 1
  %1883 = extractvalue %dx.types.ResRet.f32 %1880, 2
  %1884 = add i32 %1639, 17
  %1885 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1884, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1886 = extractvalue %dx.types.ResRet.f32 %1885, 3
  %1887 = add i32 %1639, 24
  %1888 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1887, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1889 = extractvalue %dx.types.ResRet.f32 %1888, 3
  %1890 = add i32 %1639, 25
  %1891 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1890, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1892 = extractvalue %dx.types.ResRet.f32 %1891, 3
  %1893 = add i32 %1639, 31
  %1894 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1640, i32 %1893, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1895 = extractvalue %dx.types.ResRet.f32 %1894, 0
  %1896 = fsub fast float %97, %1876
  %1897 = fsub fast float %98, %1877
  %1898 = fsub fast float %99, %1878
  %1899 = fmul fast float %1896, 2.097152e+06
  %1900 = fmul fast float %1897, 2.097152e+06
  %1901 = fmul fast float %1898, 2.097152e+06
  %1902 = fadd fast float %1899, %191
  %1903 = fsub fast float %1902, %1881
  %1904 = fadd fast float %1900, %192
  %1905 = fsub fast float %1904, %1882
  %1906 = fadd fast float %1901, %193
  %1907 = fsub fast float %1906, %1883
  %1908 = call float @dx.op.unary.f32(i32 6, float %1903)  ; FAbs(value)
  %1909 = call float @dx.op.unary.f32(i32 6, float %1905)  ; FAbs(value)
  %1910 = call float @dx.op.unary.f32(i32 6, float %1907)  ; FAbs(value)
  %1911 = fadd fast float %1886, 1.000000e+00
  %1912 = fadd fast float %1889, 1.000000e+00
  %1913 = fadd fast float %1892, 1.000000e+00
  %1914 = fcmp fast ogt float %1908, %1911
  %1915 = fcmp fast ogt float %1909, %1912
  %1916 = fcmp fast ogt float %1910, %1913
  %1917 = or i1 %1914, %1915
  %1918 = or i1 %1917, %1916
  br i1 %1918, label %1919, label %1932

; <label>:1919                                    ; preds = %1873
  %1920 = fadd fast float %192, %191
  %1921 = fadd fast float %97, %98
  %1922 = fadd fast float %1920, %193
  %1923 = fadd fast float %1921, %99
  %1924 = fmul fast float %1922, 0x3F52E83A20000000
  %1925 = fmul fast float %1923, 0x40A2E83A20000000
  %1926 = call float @dx.op.unary.f32(i32 22, float %1925)  ; Frc(value)
  %1927 = fadd fast float %1926, %1924
  %1928 = call float @dx.op.unary.f32(i32 22, float %1927)  ; Frc(value)
  %1929 = fcmp fast ogt float %1928, 5.000000e-01
  %1930 = uitofp i1 %1929 to float
  %1931 = fsub fast float 1.000000e+00, %1930
  br label %1954

; <label>:1932                                    ; preds = %1873
  %1933 = fcmp fast ogt float %1895, 0.000000e+00
  br i1 %1933, label %1934, label %1954

; <label>:1934                                    ; preds = %1932
  %1935 = fsub fast float %188, %66
  %1936 = fsub fast float %189, %67
  %1937 = fsub fast float %190, %68
  %1938 = call float @dx.op.unary.f32(i32 6, float %1935)  ; FAbs(value)
  %1939 = call float @dx.op.unary.f32(i32 6, float %1936)  ; FAbs(value)
  %1940 = call float @dx.op.unary.f32(i32 6, float %1937)  ; FAbs(value)
  %1941 = call float @dx.op.binary.f32(i32 35, float %1939, float %1940)  ; FMax(a,b)
  %1942 = call float @dx.op.binary.f32(i32 35, float %1938, float %1941)  ; FMax(a,b)
  %1943 = fsub fast float %1942, %1895
  %1944 = call float @dx.op.unary.f32(i32 6, float %1943)  ; FAbs(value)
  %1945 = fmul fast float %1944, 2.000000e+01
  %1946 = call float @dx.op.unary.f32(i32 7, float %1945)  ; Saturate(value)
  %1947 = fsub fast float 1.000000e+00, %1946
  %1948 = fcmp fast ogt float %1947, 0.000000e+00
  %1949 = fcmp fast olt float %1947, 0.000000e+00
  %1950 = zext i1 %1948 to i32
  %1951 = zext i1 %1949 to i32
  %1952 = sub nsw i32 %1950, %1951
  %1953 = sitofp i32 %1952 to float
  br label %1954

; <label>:1954                                    ; preds = %1934, %1932, %1919, %1804
  %1955 = phi float [ 1.000000e+00, %1919 ], [ %1953, %1934 ], [ 1.000000e+00, %1932 ], [ 1.000000e+00, %1804 ]
  %1956 = phi float [ %1931, %1919 ], [ %1947, %1934 ], [ %1867, %1932 ], [ %1867, %1804 ]
  %1957 = phi float [ 1.000000e+00, %1919 ], [ 0.000000e+00, %1934 ], [ %1868, %1932 ], [ %1868, %1804 ]
  %1958 = phi float [ %1930, %1919 ], [ %1947, %1934 ], [ %1869, %1932 ], [ %1869, %1804 ]
  %1959 = fadd fast float %1956, %1864
  %1960 = fadd fast float %1957, %1865
  %1961 = fadd fast float %1958, %1866
  %1962 = fmul fast float %62, 7.812500e-03
  %1963 = fmul fast float %63, 7.812500e-03
  %1964 = call float @dx.op.unary.f32(i32 22, float %1962)  ; Frc(value)
  %1965 = call float @dx.op.unary.f32(i32 22, float %1963)  ; Frc(value)
  %1966 = fmul fast float %1964, 1.280000e+02
  %1967 = fmul fast float %1965, 1.280000e+02
  %1968 = fadd fast float %1966, 0xC05015CCC0000000
  %1969 = fadd fast float %1967, 0xC0521DCCC0000000
  %1970 = fmul fast float %1968, %1968
  %1971 = fmul fast float %1969, %1969
  %1972 = fmul fast float %1969, %1968
  %1973 = call float @dx.op.dot3.f32(i32 55, float %1970, float %1971, float %1972, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1974 = call float @dx.op.unary.f32(i32 22, float %1973)  ; Frc(value)
  %1975 = fadd fast float %1974, -5.000000e-01
  %1976 = fmul fast float %1975, 0x3F70101020000000
  %1977 = fmul fast float %1706, 5.000000e-01
  %1978 = fmul fast float %1707, 5.000000e-01
  %1979 = fmul fast float %1708, 5.000000e-01
  %1980 = fadd fast float %1977, 5.000000e-01
  %1981 = fadd fast float %1978, 5.000000e-01
  %1982 = fadd fast float %1979, 5.000000e-01
  %1983 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1984 = extractvalue %dx.types.CBufRet.f32 %1983, 2
  %1985 = fmul fast float %1984, %1959
  %1986 = fmul fast float %1984, %1960
  %1987 = fmul fast float %1984, %1961
  %1988 = call float @dx.op.binary.f32(i32 36, float %1985, float 3.225600e+04)  ; FMin(a,b)
  %1989 = call float @dx.op.binary.f32(i32 36, float %1986, float 3.225600e+04)  ; FMin(a,b)
  %1990 = call float @dx.op.binary.f32(i32 36, float %1987, float 3.225600e+04)  ; FMin(a,b)
  %1991 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %1992 = extractvalue %dx.types.CBufRet.i32 %1991, 3
  %1993 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %1994 = extractvalue %dx.types.CBufRet.i32 %1993, 2
  %1995 = and i32 %1994, %194
  %1996 = and i32 %1994, %195
  %1997 = extractvalue %dx.types.CBufRet.i32 %1993, 1
  %1998 = and i32 %1997, 31
  %1999 = shl i32 %1996, %1998
  %2000 = add i32 %1999, %1995
  %2001 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 239)  ; CBufferLoadLegacy(handle,regIndex)
  %2002 = extractvalue %dx.types.CBufRet.i32 %2001, 0
  %2003 = icmp eq i32 %2000, %2002
  br i1 %2003, label %2004, label %2035, !dx.controlflow.hints !102

; <label>:2004                                    ; preds = %1954
  %2005 = fmul fast float %1955, %1715
  %2006 = lshr i32 %194, %1998
  %2007 = lshr i32 %195, %1998
  %2008 = call float @dx.op.binary.f32(i32 35, float %2005, float 0x3F947AE140000000)  ; FMax(a,b)
  %2009 = call float @dx.op.binary.f32(i32 36, float %2008, float 1.000000e+00)  ; FMin(a,b)
  %2010 = add i32 %2006, %1992
  %2011 = add i32 %2007, %1992
  %2012 = uitofp i32 %2010 to float
  %2013 = uitofp i32 %2011 to float
  %2014 = fmul fast float %2012, 7.812500e-03
  %2015 = fmul fast float %2013, 7.812500e-03
  %2016 = call float @dx.op.unary.f32(i32 22, float %2014)  ; Frc(value)
  %2017 = call float @dx.op.unary.f32(i32 22, float %2015)  ; Frc(value)
  %2018 = fmul fast float %2016, 1.280000e+02
  %2019 = fmul fast float %2017, 1.280000e+02
  %2020 = fadd fast float %2018, 0xC05015CCC0000000
  %2021 = fadd fast float %2019, 0xC0521DCCC0000000
  %2022 = fmul fast float %2020, %2020
  %2023 = fmul fast float %2021, %2021
  %2024 = fmul fast float %2021, %2020
  %2025 = call float @dx.op.dot3.f32(i32 55, float %2022, float %2023, float %2024, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2026 = call float @dx.op.unary.f32(i32 22, float %2025)  ; Frc(value)
  %2027 = fadd fast float %2026, %65
  %2028 = call float @dx.op.unary.f32(i32 22, float %2027)  ; Frc(value)
  %2029 = fcmp fast ogt float %2009, %2028
  br i1 %2029, label %2030, label %2035, !dx.controlflow.hints !103

; <label>:2030                                    ; preds = %2004
  %2031 = extractvalue %dx.types.CBufRet.i32 %1993, 3
  %2032 = mul i32 %2031, %2007
  %2033 = add i32 %2032, %2006
  %2034 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2034, i32 %2033, i32 0, i32 %1536, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2035

; <label>:2035                                    ; preds = %2030, %2004, %1954
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %1988)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %1989)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %1990)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1980)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1981)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1982)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1723)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1712)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1713)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1714)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3FE0303040000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1709)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1710)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1711)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %1976)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1805)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!71}
!dx.entryPoints = !{!72}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, !41, !44, !48}
!5 = !{!6, !8, !10, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 16}
!12 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !9}
!13 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !9}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !9}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!18 = !{i32 9, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!35 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!36 = !{i32 27, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 27, i32 1, i32 2, i32 0, !9}
!37 = !{i32 28, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 28, i32 1, i32 2, i32 0, !9}
!38 = !{i32 29, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 29, i32 1, i32 2, i32 0, !9}
!39 = !{i32 30, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 30, i32 1, i32 2, i32 0, !9}
!40 = !{i32 31, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 31, i32 1, i32 2, i32 0, !9}
!41 = !{!42}
!42 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !43}
!43 = !{i32 1, i32 4}
!44 = !{!45, !46, !47}
!45 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!46 = !{i32 1, %hostlayout.UniformBufferConstants_LandscapeParameters* undef, !"", i32 0, i32 1, i32 1, i32 252, null}
!47 = !{i32 2, %UniformBufferConstants_Material* undef, !"", i32 0, i32 2, i32 1, i32 908, null}
!48 = !{!49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70}
!49 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!50 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!51 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!52 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!53 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!54 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!55 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!56 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!57 = !{i32 8, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!58 = !{i32 9, %struct.SamplerState* undef, !"", i32 0, i32 9, i32 1, i32 0, null}
!59 = !{i32 10, %struct.SamplerState* undef, !"", i32 0, i32 10, i32 1, i32 0, null}
!60 = !{i32 11, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!61 = !{i32 12, %struct.SamplerState* undef, !"", i32 0, i32 12, i32 1, i32 0, null}
!62 = !{i32 13, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!63 = !{i32 14, %struct.SamplerState* undef, !"", i32 0, i32 14, i32 1, i32 0, null}
!64 = !{i32 15, %struct.SamplerState* undef, !"", i32 0, i32 15, i32 1, i32 0, null}
!65 = !{i32 16, %struct.SamplerState* undef, !"", i32 0, i32 16, i32 1, i32 0, null}
!66 = !{i32 17, %struct.SamplerState* undef, !"", i32 0, i32 17, i32 1, i32 0, null}
!67 = !{i32 18, %struct.SamplerState* undef, !"", i32 0, i32 18, i32 1, i32 0, null}
!68 = !{i32 19, %struct.SamplerState* undef, !"", i32 0, i32 19, i32 1, i32 0, null}
!69 = !{i32 20, %struct.SamplerState* undef, !"", i32 0, i32 20, i32 1, i32 0, null}
!70 = !{i32 21, %struct.SamplerState* undef, !"", i32 0, i32 21, i32 1, i32 0, null}
!71 = !{[26 x i32] [i32 24, i32 24, i32 29815, i32 29815, i32 0, i32 0, i32 29815, i32 29815, i32 112, i32 112, i32 0, i32 0, i32 0, i32 0, i32 1079287, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 1111927, i32 1111927, i32 1048583, i32 0]}
!72 = !{void ()* @MainPS, !"MainPS", !73, !4, !98}
!73 = !{!74, !90, null}
!74 = !{!75, !78, !81, !83, !85, !88, !89}
!75 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !76, i8 2, i32 1, i8 2, i32 0, i8 0, !77}
!76 = !{i32 0}
!77 = !{i32 3, i32 3}
!78 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !79, i8 2, i32 1, i8 4, i32 1, i8 0, !80}
!79 = !{i32 1}
!80 = !{i32 3, i32 15}
!81 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !82, i8 2, i32 1, i8 4, i32 2, i8 0, null}
!82 = !{i32 2}
!83 = !{i32 3, !"PRIMITIVE_ID", i8 5, i8 0, !76, i8 1, i32 1, i8 1, i32 3, i8 0, !84}
!84 = !{i32 3, i32 1}
!85 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !86, i8 2, i32 1, i8 3, i32 4, i8 0, !87}
!86 = !{i32 9}
!87 = !{i32 3, i32 7}
!88 = !{i32 5, !"SV_Position", i8 9, i8 3, !76, i8 4, i32 1, i8 4, i32 5, i8 0, !80}
!89 = !{i32 6, !"SV_IsFrontFace", i8 5, i8 13, !76, i8 1, i32 1, i8 1, i32 3, i8 1, null}
!90 = !{!91, !92, !93, !94, !96}
!91 = !{i32 0, !"SV_Target", i8 9, i8 16, !76, i8 0, i32 1, i8 4, i32 0, i8 0, !80}
!92 = !{i32 1, !"SV_Target", i8 9, i8 16, !79, i8 0, i32 1, i8 4, i32 1, i8 0, !80}
!93 = !{i32 2, !"SV_Target", i8 9, i8 16, !82, i8 0, i32 1, i8 4, i32 2, i8 0, !80}
!94 = !{i32 3, !"SV_Target", i8 9, i8 16, !95, i8 0, i32 1, i8 4, i32 3, i8 0, !80}
!95 = !{i32 3}
!96 = !{i32 4, !"SV_Target", i8 9, i8 16, !97, i8 0, i32 1, i8 4, i32 5, i8 0, !80}
!97 = !{i32 5}
!98 = !{i32 0, i64 24, i32 5, !76}
!99 = distinct !{!99, !"dx.controlflow.hints", i32 2}
!100 = distinct !{!100, !"dx.controlflow.hints", i32 1}
!101 = distinct !{!101, !"dx.controlflow.hints", i32 1}
!102 = distinct !{!102, !"dx.controlflow.hints", i32 1}
!103 = distinct !{!103, !"dx.controlflow.hints", i32 1}
