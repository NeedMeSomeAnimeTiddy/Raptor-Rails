;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy w
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                5   xyzw        5   TARGET   float   xyzw
;
; shader hash: 826196c9ecd01b4fd74d1ae780521c8c
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                5                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_Scene
; {
;
;   struct UniformBufferConstants_Scene
;   {
;
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint PrePadding_Scene_GPUScene_4;             ; Offset:    4
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint PrePadding_Scene_GPUScene_12;            ; Offset:   12
;       uint BindlessResource_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint PrePadding_Scene_GPUScene_20;            ; Offset:   20
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint PrePadding_Scene_GPUScene_28;            ; Offset:   28
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint PrePadding_Scene_GPUScene_36;            ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;   
;   } UniformBufferConstants_Scene;                   ; Offset:    0 Size:    56
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_ShadingMask;     ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_ShadingBinMeta;  ; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint BindlessResource_Nanite_ShadingBinData;  ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint Nanite_MultiViewEnabled;                 ; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  176
;       uint PrePadding_Nanite_180;                   ; Offset:  180
;       uint BindlessResource_Nanite_InViews;         ; Offset:  184
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   188
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       uint4 Material_VTPackedPageTableUniform[6];   ; Offset:    0
;       uint4 Material_VTPackedUniform[18];           ; Offset:   96
;       float4 Material_PreshaderBuffer[8];           ; Offset:  384
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  512
;       uint PrePadding_Material_516;                 ; Offset:  516
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  520
;       uint PrePadding_Material_524;                 ; Offset:  524
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  528
;       uint PrePadding_Material_532;                 ; Offset:  532
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  536
;       uint PrePadding_Material_540;                 ; Offset:  540
;       uint BindlessResource_Material_VirtualTexturePageTable0_0;; Offset:  544
;       uint PrePadding_Material_548;                 ; Offset:  548
;       uint BindlessResource_Material_VirtualTexturePageTable1_0;; Offset:  552
;       uint PrePadding_Material_556;                 ; Offset:  556
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_0;; Offset:  560
;       uint PrePadding_Material_564;                 ; Offset:  564
;       uint BindlessResource_Material_VirtualTexturePageTable0_1;; Offset:  568
;       uint PrePadding_Material_572;                 ; Offset:  572
;       uint BindlessResource_Material_VirtualTexturePageTable1_1;; Offset:  576
;       uint PrePadding_Material_580;                 ; Offset:  580
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_1;; Offset:  584
;       uint PrePadding_Material_588;                 ; Offset:  588
;       uint BindlessResource_Material_VirtualTexturePageTable0_2;; Offset:  592
;       uint PrePadding_Material_596;                 ; Offset:  596
;       uint BindlessResource_Material_VirtualTexturePageTableIndirection_2;; Offset:  600
;       uint PrePadding_Material_604;                 ; Offset:  604
;       uint BindlessResource_Material_VirtualTexturePhysical_0;; Offset:  608
;       uint PrePadding_Material_612;                 ; Offset:  612
;       uint BindlessSampler_Material_VirtualTexturePhysical_0Sampler;; Offset:  616
;       uint PrePadding_Material_620;                 ; Offset:  620
;       uint BindlessResource_Material_VirtualTexturePhysical_1;; Offset:  624
;       uint PrePadding_Material_628;                 ; Offset:  628
;       uint BindlessSampler_Material_VirtualTexturePhysical_1Sampler;; Offset:  632
;       uint PrePadding_Material_636;                 ; Offset:  636
;       uint BindlessResource_Material_VirtualTexturePhysical_2;; Offset:  640
;       uint PrePadding_Material_644;                 ; Offset:  644
;       uint BindlessSampler_Material_VirtualTexturePhysical_2Sampler;; Offset:  648
;       uint PrePadding_Material_652;                 ; Offset:  652
;       uint BindlessResource_Material_VirtualTexturePhysical_3;; Offset:  656
;       uint PrePadding_Material_660;                 ; Offset:  660
;       uint BindlessSampler_Material_VirtualTexturePhysical_3Sampler;; Offset:  664
;       uint PrePadding_Material_668;                 ; Offset:  668
;       uint BindlessResource_Material_VirtualTexturePhysical_4;; Offset:  672
;       uint PrePadding_Material_676;                 ; Offset:  676
;       uint BindlessSampler_Material_VirtualTexturePhysical_4Sampler;; Offset:  680
;       uint PrePadding_Material_684;                 ; Offset:  684
;       uint BindlessResource_Material_VirtualTexturePhysical_5;; Offset:  688
;       uint PrePadding_Material_692;                 ; Offset:  692
;       uint BindlessSampler_Material_VirtualTexturePhysical_5Sampler;; Offset:  696
;       uint PrePadding_Material_700;                 ; Offset:  700
;       uint BindlessResource_Material_VirtualTexturePhysical_6;; Offset:  704
;       uint PrePadding_Material_708;                 ; Offset:  708
;       uint BindlessSampler_Material_VirtualTexturePhysical_6Sampler;; Offset:  712
;       uint PrePadding_Material_716;                 ; Offset:  716
;       uint BindlessResource_Material_VirtualTexturePhysical_7;; Offset:  720
;       uint PrePadding_Material_724;                 ; Offset:  724
;       uint BindlessSampler_Material_VirtualTexturePhysical_7Sampler;; Offset:  728
;       uint PrePadding_Material_732;                 ; Offset:  732
;       uint BindlessResource_Material_VirtualTexturePhysical_8;; Offset:  736
;       uint PrePadding_Material_740;                 ; Offset:  740
;       uint BindlessSampler_Material_VirtualTexturePhysical_8Sampler;; Offset:  744
;       uint PrePadding_Material_748;                 ; Offset:  748
;       uint BindlessResource_Material_VirtualTexturePhysical_9;; Offset:  752
;       uint PrePadding_Material_756;                 ; Offset:  756
;       uint BindlessSampler_Material_VirtualTexturePhysical_9Sampler;; Offset:  760
;       uint PrePadding_Material_764;                 ; Offset:  764
;       uint BindlessResource_Material_VirtualTexturePhysical_10;; Offset:  768
;       uint PrePadding_Material_772;                 ; Offset:  772
;       uint BindlessSampler_Material_VirtualTexturePhysical_10Sampler;; Offset:  776
;       uint PrePadding_Material_780;                 ; Offset:  780
;       uint BindlessResource_Material_VirtualTexturePhysical_11;; Offset:  784
;       uint PrePadding_Material_788;                 ; Offset:  788
;       uint BindlessSampler_Material_VirtualTexturePhysical_11Sampler;; Offset:  792
;       uint PrePadding_Material_796;                 ; Offset:  796
;       uint BindlessResource_Material_VirtualTexturePhysical_12;; Offset:  800
;       uint PrePadding_Material_804;                 ; Offset:  804
;       uint BindlessSampler_Material_VirtualTexturePhysical_12Sampler;; Offset:  808
;       uint PrePadding_Material_812;                 ; Offset:  812
;       uint BindlessResource_Material_VirtualTexturePhysical_13;; Offset:  816
;       uint PrePadding_Material_820;                 ; Offset:  820
;       uint BindlessSampler_Material_VirtualTexturePhysical_13Sampler;; Offset:  824
;       uint PrePadding_Material_828;                 ; Offset:  828
;       uint BindlessResource_Material_VirtualTexturePhysical_14;; Offset:  832
;       uint PrePadding_Material_836;                 ; Offset:  836
;       uint BindlessSampler_Material_VirtualTexturePhysical_14Sampler;; Offset:  840
;       uint PrePadding_Material_844;                 ; Offset:  844
;       uint BindlessResource_Material_VirtualTexturePhysical_15;; Offset:  848
;       uint PrePadding_Material_852;                 ; Offset:  852
;       uint BindlessSampler_Material_VirtualTexturePhysical_15Sampler;; Offset:  856
;       uint PrePadding_Material_860;                 ; Offset:  860
;       uint BindlessResource_Material_VirtualTexturePhysical_16;; Offset:  864
;       uint PrePadding_Material_868;                 ; Offset:  868
;       uint BindlessSampler_Material_VirtualTexturePhysical_16Sampler;; Offset:  872
;       uint PrePadding_Material_876;                 ; Offset:  876
;       uint BindlessResource_Material_VirtualTexturePhysical_17;; Offset:  880
;       uint PrePadding_Material_884;                 ; Offset:  884
;       uint BindlessSampler_Material_VirtualTexturePhysical_17Sampler;; Offset:  888
;       uint PrePadding_Material_892;                 ; Offset:  892
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  896
;       uint PrePadding_Material_900;                 ; Offset:  900
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  904
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   908
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_VTFeedbackBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_Scene      cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_LandscapeWeightmapSampler    sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S2             s2     1
; Material_VirtualTexturePhysical_0Sampler   sampler      NA          NA      S3             s3     1
; Material_VirtualTexturePhysical_1Sampler   sampler      NA          NA      S4             s4     1
; Material_VirtualTexturePhysical_2Sampler   sampler      NA          NA      S5             s5     1
; Material_VirtualTexturePhysical_3Sampler   sampler      NA          NA      S6             s6     1
; Material_VirtualTexturePhysical_4Sampler   sampler      NA          NA      S7             s7     1
; Material_VirtualTexturePhysical_5Sampler   sampler      NA          NA      S8             s8     1
; Material_VirtualTexturePhysical_6Sampler   sampler      NA          NA      S9             s9     1
; Material_VirtualTexturePhysical_7Sampler   sampler      NA          NA     S10            s10     1
; Material_VirtualTexturePhysical_8Sampler   sampler      NA          NA     S11            s11     1
; Material_VirtualTexturePhysical_9Sampler   sampler      NA          NA     S12            s12     1
; Material_VirtualTexturePhysical_10Sampler   sampler      NA          NA     S13            s13     1
; Material_VirtualTexturePhysical_11Sampler   sampler      NA          NA     S14            s14     1
; Material_VirtualTexturePhysical_12Sampler   sampler      NA          NA     S15            s15     1
; Material_VirtualTexturePhysical_13Sampler   sampler      NA          NA     S16            s16     1
; Material_VirtualTexturePhysical_14Sampler   sampler      NA          NA     S17            s17     1
; Material_VirtualTexturePhysical_15Sampler   sampler      NA          NA     S18            s18     1
; Material_VirtualTexturePhysical_16Sampler   sampler      NA          NA     S19            s19     1
; Material_VirtualTexturePhysical_17Sampler   sampler      NA          NA     S20            s20     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T1             t1     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T2             t2     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T3             t3     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T4             t4     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T5             t5     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T6             t6     1
; Nanite_ClusterPageData            texture    byte         r/o      T7             t7     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o      T8             t8     1
; Nanite_VisBuffer64                texture     u32          2d      T9             t9     1
; Material_Texture2D_0              texture     f32          2d     T10            t10     1
; Material_Texture2D_1              texture     f32          2d     T11            t11     1
; Material_VirtualTexturePageTable0_0   texture     u32          2d     T12            t12     1
; Material_VirtualTexturePageTable1_0   texture     u32          2d     T13            t13     1
; Material_VirtualTexturePageTable0_1   texture     u32          2d     T14            t14     1
; Material_VirtualTexturePageTable1_1   texture     u32          2d     T15            t15     1
; Material_VirtualTexturePageTable0_2   texture     u32          2d     T16            t16     1
; Material_VirtualTexturePhysical_0   texture     f32          2d     T17            t17     1
; Material_VirtualTexturePhysical_1   texture     f32          2d     T18            t18     1
; Material_VirtualTexturePhysical_2   texture     f32          2d     T19            t19     1
; Material_VirtualTexturePhysical_3   texture     f32          2d     T20            t20     1
; Material_VirtualTexturePhysical_4   texture     f32          2d     T21            t21     1
; Material_VirtualTexturePhysical_5   texture     f32          2d     T22            t22     1
; Material_VirtualTexturePhysical_6   texture     f32          2d     T23            t23     1
; Material_VirtualTexturePhysical_7   texture     f32          2d     T24            t24     1
; Material_VirtualTexturePhysical_8   texture     f32          2d     T25            t25     1
; Material_VirtualTexturePhysical_9   texture     f32          2d     T26            t26     1
; Material_VirtualTexturePhysical_10   texture     f32          2d     T27            t27     1
; Material_VirtualTexturePhysical_11   texture     f32          2d     T28            t28     1
; Material_VirtualTexturePhysical_12   texture     f32          2d     T29            t29     1
; Material_VirtualTexturePhysical_13   texture     f32          2d     T30            t30     1
; Material_VirtualTexturePhysical_14   texture     f32          2d     T31            t31     1
; Material_VirtualTexturePhysical_15   texture     f32          2d     T32            t32     1
; Material_VirtualTexturePhysical_16   texture     f32          2d     T33            t33     1
; Material_VirtualTexturePhysical_17   texture     f32          2d     T34            t34     1
; View_VTFeedbackBuffer                 UAV  struct         r/w      U0             u0     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 24
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 7 }
;   output 1 depends on inputs: { 4, 5, 7 }
;   output 2 depends on inputs: { 4, 5, 7 }
;   output 4 depends on inputs: { 4, 5, 7 }
;   output 5 depends on inputs: { 4, 5, 7 }
;   output 6 depends on inputs: { 4, 5, 7 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5, 7 }
;   output 12 depends on inputs: { 4, 5, 7 }
;   output 13 depends on inputs: { 4, 5, 7 }
;   output 14 depends on inputs: { 4, 5, 7 }
;   output 15 depends on inputs: { 4, 5 }
;   output 20 depends on inputs: { 4, 5, 7 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%"class.Texture2D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture2D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture2D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [6 x <4 x i32>], [18 x <4 x i32>], [8 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 34, i32 34, i32 0, i8 0 }, i32 34, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 33, i32 33, i32 0, i8 0 }, i32 33, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 32, i32 32, i32 0, i8 0 }, i32 32, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 31, i32 31, i32 0, i8 0 }, i32 31, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 30, i32 30, i32 0, i8 0 }, i32 30, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 29, i32 29, i32 0, i8 0 }, i32 29, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 28, i32 28, i32 0, i8 0 }, i32 28, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 27, i32 27, i32 0, i8 0 }, i32 27, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 3 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 3 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 3 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 3 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 3 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 3 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 3 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 3 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 3 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 3 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 3 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 3 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %49 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 3 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %50 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %51 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %52 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %53 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %54 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %55 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %56 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %57 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %58 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %59 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %60 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %61 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %62 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %58, %dx.types.ResourceProperties { i32 13, i32 908 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %63 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %60, %dx.types.ResourceProperties { i32 13, i32 56 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %64 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %61, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %65 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %66 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %67 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %68 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.i32 %68, 2
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = extractvalue %dx.types.CBufRet.f32 %74, 2
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 135)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = extractvalue %dx.types.CBufRet.f32 %78, 3
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = extractvalue %dx.types.CBufRet.f32 %83, 1
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %94, 3
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %102 = extractvalue %dx.types.CBufRet.f32 %99, 2
  %103 = extractvalue %dx.types.CBufRet.f32 %99, 3
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = extractvalue %dx.types.CBufRet.f32 %104, 3
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = extractvalue %dx.types.CBufRet.f32 %109, 3
  %114 = fadd fast float %65, -5.000000e-01
  %115 = fadd fast float %66, -5.000000e-01
  %116 = fptoui float %114 to i32
  %117 = fptoui float %115 to i32
  %118 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %119 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %118, i32 0, i32 %116, i32 %117, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %120 = extractvalue %dx.types.ResRet.i32 %119, 0
  %121 = extractvalue %dx.types.ResRet.i32 %119, 1
  %122 = lshr i32 %120, 7
  %123 = bitcast i32 %121 to float
  %124 = icmp eq i32 %122, 0
  br i1 %124, label %1857, label %125

; <label>:125                                     ; preds = %0
  %126 = and i32 %120, 127
  %127 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %59, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %128 = shl nuw nsw i32 %122, 3
  %129 = add nsw i32 %128, -8
  %130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %131 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %130, i32 %129, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %132 = extractvalue %dx.types.ResRet.i32 %131, 0
  %133 = extractvalue %dx.types.ResRet.i32 %131, 1
  %134 = lshr i32 %132, 16
  %135 = and i32 %133, 16777215
  %136 = lshr i32 %133, 24
  %137 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %138 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %137, i32 %135, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %139 = extractvalue %dx.types.ResRet.f32 %138, 0
  %140 = bitcast float %139 to i32
  %141 = and i32 %140, 1048575
  %142 = mul nuw nsw i32 %141, 41
  %143 = add nuw nsw i32 %142, 1
  %144 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %145 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %144, i32 %143, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %146 = extractvalue %dx.types.ResRet.f32 %145, 0
  %147 = extractvalue %dx.types.ResRet.f32 %145, 1
  %148 = extractvalue %dx.types.ResRet.f32 %145, 2
  %149 = add i32 %135, %69
  %150 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %137, i32 %149, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %151 = extractvalue %dx.types.ResRet.f32 %150, 0
  %152 = extractvalue %dx.types.ResRet.f32 %150, 1
  %153 = extractvalue %dx.types.ResRet.f32 %150, 2
  %154 = extractvalue %dx.types.ResRet.f32 %150, 3
  %155 = bitcast float %151 to i32
  %156 = bitcast float %152 to i32
  %157 = bitcast float %153 to i32
  %158 = bitcast float %154 to i32
  %159 = shl i32 %69, 1
  %160 = add i32 %135, %159
  %161 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %137, i32 %160, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %162 = extractvalue %dx.types.ResRet.f32 %161, 0
  %163 = extractvalue %dx.types.ResRet.f32 %161, 1
  %164 = extractvalue %dx.types.ResRet.f32 %161, 2
  %165 = and i32 %155, 65535
  %166 = uitofp i32 %165 to float
  %167 = lshr i32 %155, 16
  %168 = uitofp i32 %167 to float
  %169 = and i32 %156, 32767
  %170 = uitofp i32 %169 to float
  %171 = fadd fast float %166, -3.276800e+04
  %172 = fadd fast float %168, -3.276800e+04
  %173 = fadd fast float %170, -1.638400e+04
  %174 = fmul fast float %173, 0x3F06A0F8E0000000
  %175 = and i32 %156, 32768
  %176 = icmp ne i32 %175, 0
  %177 = fadd fast float %171, %172
  %178 = fmul fast float %177, 0x3F00002000000000
  %179 = fsub fast float %171, %172
  %180 = fmul fast float %179, 0x3F00002000000000
  %181 = call float @dx.op.unary.f32(i32 6, float %178)  ; FAbs(value)
  %182 = call float @dx.op.unary.f32(i32 6, float %180)  ; FAbs(value)
  %183 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %181, float %182)  ; Dot2(ax,ay,bx,by)
  %184 = fsub fast float 2.000000e+00, %183
  %185 = call float @dx.op.dot3.f32(i32 55, float %178, float %180, float %184, float %178, float %180, float %184)  ; Dot3(ax,ay,az,bx,by,bz)
  %186 = call float @dx.op.unary.f32(i32 25, float %185)  ; Rsqrt(value)
  %187 = fmul fast float %186, %178
  %188 = fmul fast float %186, %180
  %189 = fmul fast float %186, %184
  %190 = fadd fast float %189, 1.000000e+00
  %191 = fdiv fast float 1.000000e+00, %190
  %192 = fmul fast float %188, %187
  %193 = fmul fast float %192, %191
  %194 = fsub fast float -0.000000e+00, %193
  %195 = fmul fast float %187, %187
  %196 = fmul fast float %195, %191
  %197 = fsub fast float 1.000000e+00, %196
  %198 = fmul fast float %188, %188
  %199 = fmul fast float %198, %191
  %200 = fsub fast float 1.000000e+00, %199
  %201 = fmul fast float %174, %174
  %202 = fsub fast float 1.000000e+00, %201
  %203 = call float @dx.op.unary.f32(i32 24, float %202)  ; Sqrt(value)
  %204 = select i1 %176, float %174, float %203
  %205 = select i1 %176, float %203, float %174
  %206 = fmul fast float %197, %204
  %207 = fmul fast float %204, %194
  %208 = fmul fast float %204, %187
  %209 = fmul fast float %205, %194
  %210 = fmul fast float %200, %205
  %211 = fmul fast float %188, %205
  %212 = fsub fast float -0.000000e+00, %211
  %213 = fadd fast float %206, %209
  %214 = fadd fast float %207, %210
  %215 = fsub fast float %212, %208
  %216 = fmul fast float %215, %188
  %217 = fmul fast float %214, %189
  %218 = fsub fast float %216, %217
  %219 = fmul fast float %213, %189
  %220 = fmul fast float %215, %187
  %221 = fsub fast float %219, %220
  %222 = fmul fast float %214, %187
  %223 = fmul fast float %213, %188
  %224 = fsub fast float %222, %223
  %225 = lshr i32 %158, 16
  %226 = shl i32 %225, 23
  %227 = add i32 %226, -125829120
  %228 = bitcast i32 %227 to float
  %229 = lshr i32 %157, 16
  %230 = and i32 %157, 65535
  %231 = and i32 %158, 65535
  %232 = uitofp i32 %230 to float
  %233 = uitofp i32 %229 to float
  %234 = uitofp i32 %231 to float
  %235 = fadd fast float %232, -3.276800e+04
  %236 = fadd fast float %233, -3.276800e+04
  %237 = fadd fast float %234, -3.276800e+04
  %238 = fmul fast float %228, %235
  %239 = fmul fast float %228, %236
  %240 = fmul fast float %228, %237
  %241 = fmul fast float %213, %238
  %242 = fmul fast float %214, %238
  %243 = fmul fast float %215, %238
  %244 = fmul fast float %218, %239
  %245 = fmul fast float %221, %239
  %246 = fmul fast float %224, %239
  %247 = fmul fast float %187, %240
  %248 = fmul fast float %188, %240
  %249 = fmul fast float %189, %240
  %250 = call float @dx.op.unary.f32(i32 6, float %238)  ; FAbs(value)
  %251 = call float @dx.op.unary.f32(i32 6, float %239)  ; FAbs(value)
  %252 = call float @dx.op.unary.f32(i32 6, float %240)  ; FAbs(value)
  %253 = fdiv fast float 1.000000e+00, %250
  %254 = fdiv fast float 1.000000e+00, %251
  %255 = fdiv fast float 1.000000e+00, %252
  %256 = fmul fast float %253, %253
  %257 = fmul fast float %241, %256
  %258 = fmul fast float %242, %256
  %259 = fmul fast float %256, %243
  %260 = fmul fast float %254, %254
  %261 = fmul fast float %244, %260
  %262 = fmul fast float %245, %260
  %263 = fmul fast float %246, %260
  %264 = fmul fast float %255, %255
  %265 = fmul fast float %264, %247
  %266 = fmul fast float %264, %248
  %267 = fmul fast float %264, %249
  %268 = fsub fast float -0.000000e+00, %162
  %269 = fsub fast float -0.000000e+00, %163
  %270 = fsub fast float -0.000000e+00, %164
  %271 = fmul fast float %257, %268
  %272 = call float @dx.op.tertiary.f32(i32 46, float %269, float %258, float %271)  ; FMad(a,b,c)
  %273 = call float @dx.op.tertiary.f32(i32 46, float %270, float %259, float %272)  ; FMad(a,b,c)
  %274 = fmul fast float %261, %268
  %275 = call float @dx.op.tertiary.f32(i32 46, float %269, float %262, float %274)  ; FMad(a,b,c)
  %276 = call float @dx.op.tertiary.f32(i32 46, float %270, float %263, float %275)  ; FMad(a,b,c)
  %277 = fmul fast float %265, %268
  %278 = call float @dx.op.tertiary.f32(i32 46, float %269, float %266, float %277)  ; FMad(a,b,c)
  %279 = call float @dx.op.tertiary.f32(i32 46, float %270, float %267, float %278)  ; FMad(a,b,c)
  %280 = fsub fast float %146, %71
  %281 = fsub fast float %147, %72
  %282 = fsub fast float %148, %73
  %283 = fmul fast float %280, 2.097152e+06
  %284 = fmul fast float %281, 2.097152e+06
  %285 = fmul fast float %282, 2.097152e+06
  %286 = fadd fast float %283, %75
  %287 = fadd fast float %286, %162
  %288 = fadd fast float %284, %76
  %289 = fadd fast float %288, %163
  %290 = fadd fast float %285, %77
  %291 = fadd fast float %290, %164
  %292 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %127, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %293 = extractvalue %dx.types.CBufRet.i32 %292, 1
  %294 = call i32 @dx.op.binary.i32(i32 40, i32 %134, i32 %293)  ; UMin(a,b)
  %295 = shl i32 %294, 17
  %296 = sub nsw i32 %134, %293
  %297 = call i32 @dx.op.binary.i32(i32 37, i32 %296, i32 0)  ; IMax(a,b)
  %298 = shl i32 %297, 15
  %299 = add i32 %298, %295
  %300 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %301 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %299, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %302 = extractvalue %dx.types.ResRet.i32 %301, 0
  %303 = shl i32 %302, 4
  %304 = shl nuw nsw i32 %136, 4
  %305 = or i32 %299, %304
  %306 = add nsw i32 %305, 16
  %307 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %306, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %308 = extractvalue %dx.types.ResRet.i32 %307, 0
  %309 = extractvalue %dx.types.ResRet.i32 %307, 1
  %310 = extractvalue %dx.types.ResRet.i32 %307, 3
  %311 = add i32 %306, %303
  %312 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %311, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %313 = extractvalue %dx.types.ResRet.i32 %312, 0
  %314 = extractvalue %dx.types.ResRet.i32 %312, 1
  %315 = extractvalue %dx.types.ResRet.i32 %312, 2
  %316 = extractvalue %dx.types.ResRet.i32 %312, 3
  %317 = mul i32 %302, 80
  %318 = add i32 %306, %317
  %319 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %318, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %320 = extractvalue %dx.types.ResRet.i32 %319, 0
  %321 = extractvalue %dx.types.ResRet.i32 %319, 1
  %322 = extractvalue %dx.types.ResRet.i32 %319, 2
  %323 = lshr i32 %308, 9
  %324 = lshr i32 %309, 8
  %325 = and i32 %316, 15
  %326 = lshr i32 %316, 9
  %327 = and i32 %326, 31
  %328 = lshr i32 %316, 14
  %329 = and i32 %328, 31
  %330 = lshr i32 %316, 19
  %331 = and i32 %330, 31
  %332 = lshr i32 %316, 24
  %333 = and i32 %332, 15
  %334 = lshr i32 %316, 28
  %335 = and i32 %320, 4194303
  %336 = lshr i32 %320, 22
  %337 = and i32 %321, 4194303
  %338 = and i32 %321, 4194304
  %339 = icmp ne i32 %338, 0
  %340 = lshr i32 %321, 23
  %341 = and i32 %340, 7
  %342 = add nuw nsw i32 %325, 10
  %343 = mul nuw nsw i32 %342, %126
  %344 = add i32 %324, %299
  %345 = lshr i32 %343, 5
  %346 = shl nuw nsw i32 %345, 2
  %347 = add i32 %344, %346
  %348 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %347, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %349 = extractvalue %dx.types.ResRet.i32 %348, 0
  %350 = extractvalue %dx.types.ResRet.i32 %348, 1
  %351 = and i32 %343, 31
  %352 = lshr i32 %349, %351
  %353 = icmp ne i32 %351, 0
  %354 = sub nsw i32 0, %343
  %355 = and i32 %354, 31
  %356 = shl i32 %350, %355
  %357 = select i1 %353, i32 %356, i32 0
  %358 = or i32 %357, %352
  %359 = shl i32 1, %325
  %360 = add i32 %359, -1
  %361 = and i32 %358, %360
  %362 = lshr i32 %358, %325
  %363 = and i32 %362, 31
  %364 = add nuw nsw i32 %325, 5
  %365 = lshr i32 %358, %364
  %366 = and i32 %365, 31
  %367 = add i32 %363, %361
  %368 = add i32 %366, %361
  %369 = add nuw nsw i32 %327, %329
  %370 = add nuw nsw i32 %369, %331
  %371 = mul i32 %361, %370
  %372 = add i32 %323, %299
  %373 = lshr i32 %371, 5
  %374 = shl nuw nsw i32 %373, 2
  %375 = add i32 %372, %374
  %376 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %375, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %377 = extractvalue %dx.types.ResRet.i32 %376, 0
  %378 = extractvalue %dx.types.ResRet.i32 %376, 1
  %379 = extractvalue %dx.types.ResRet.i32 %376, 2
  %380 = and i32 %371, 31
  %381 = lshr i32 %377, %380
  %382 = icmp ne i32 %380, 0
  %383 = sub i32 0, %371
  %384 = and i32 %383, 31
  %385 = shl i32 %378, %384
  %386 = select i1 %382, i32 %385, i32 0
  %387 = or i32 %386, %381
  %388 = lshr i32 %378, %380
  %389 = shl i32 %379, %384
  %390 = select i1 %382, i32 %389, i32 0
  %391 = or i32 %390, %388
  %392 = shl i32 1, %327
  %393 = add i32 %392, -1
  %394 = and i32 %387, %393
  %395 = lshr i32 %387, %327
  %396 = icmp ne i32 %327, 0
  %397 = sub nsw i32 0, %326
  %398 = and i32 %397, 31
  %399 = shl i32 %391, %398
  %400 = select i1 %396, i32 %399, i32 0
  %401 = or i32 %400, %395
  %402 = lshr i32 %391, %327
  %403 = shl i32 1, %329
  %404 = add i32 %403, -1
  %405 = and i32 %401, %404
  %406 = lshr i32 %401, %329
  %407 = icmp ne i32 %329, 0
  %408 = sub nsw i32 0, %328
  %409 = and i32 %408, 31
  %410 = shl i32 %402, %409
  %411 = select i1 %407, i32 %410, i32 0
  %412 = or i32 %406, %411
  %413 = shl i32 1, %331
  %414 = add i32 %413, -1
  %415 = and i32 %412, %414
  %416 = shl i32 %316, 19
  %417 = and i32 %416, 260046848
  %418 = sub nsw i32 1132462080, %417
  %419 = bitcast i32 %418 to float
  %420 = add i32 %394, %313
  %421 = add i32 %405, %314
  %422 = add i32 %415, %315
  %423 = sitofp i32 %420 to float
  %424 = sitofp i32 %421 to float
  %425 = sitofp i32 %422 to float
  %426 = fmul fast float %423, %419
  %427 = fmul fast float %424, %419
  %428 = fmul fast float %425, %419
  %429 = mul i32 %367, %370
  %430 = lshr i32 %429, 5
  %431 = shl nuw nsw i32 %430, 2
  %432 = add i32 %372, %431
  %433 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %432, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %434 = extractvalue %dx.types.ResRet.i32 %433, 0
  %435 = extractvalue %dx.types.ResRet.i32 %433, 1
  %436 = extractvalue %dx.types.ResRet.i32 %433, 2
  %437 = and i32 %429, 31
  %438 = lshr i32 %434, %437
  %439 = icmp ne i32 %437, 0
  %440 = sub i32 0, %429
  %441 = and i32 %440, 31
  %442 = shl i32 %435, %441
  %443 = select i1 %439, i32 %442, i32 0
  %444 = or i32 %443, %438
  %445 = lshr i32 %435, %437
  %446 = shl i32 %436, %441
  %447 = select i1 %439, i32 %446, i32 0
  %448 = or i32 %447, %445
  %449 = and i32 %444, %393
  %450 = lshr i32 %444, %327
  %451 = shl i32 %448, %398
  %452 = select i1 %396, i32 %451, i32 0
  %453 = or i32 %452, %450
  %454 = lshr i32 %448, %327
  %455 = and i32 %453, %404
  %456 = lshr i32 %453, %329
  %457 = shl i32 %454, %409
  %458 = select i1 %407, i32 %457, i32 0
  %459 = or i32 %456, %458
  %460 = and i32 %459, %414
  %461 = add i32 %449, %313
  %462 = add i32 %455, %314
  %463 = add i32 %460, %315
  %464 = sitofp i32 %461 to float
  %465 = sitofp i32 %462 to float
  %466 = sitofp i32 %463 to float
  %467 = fmul fast float %464, %419
  %468 = fmul fast float %465, %419
  %469 = fmul fast float %466, %419
  %470 = mul i32 %368, %370
  %471 = lshr i32 %470, 5
  %472 = shl nuw nsw i32 %471, 2
  %473 = add i32 %372, %472
  %474 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %473, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %475 = extractvalue %dx.types.ResRet.i32 %474, 0
  %476 = extractvalue %dx.types.ResRet.i32 %474, 1
  %477 = extractvalue %dx.types.ResRet.i32 %474, 2
  %478 = and i32 %470, 31
  %479 = lshr i32 %475, %478
  %480 = icmp ne i32 %478, 0
  %481 = sub i32 0, %470
  %482 = and i32 %481, 31
  %483 = shl i32 %476, %482
  %484 = select i1 %480, i32 %483, i32 0
  %485 = or i32 %484, %479
  %486 = lshr i32 %476, %478
  %487 = shl i32 %477, %482
  %488 = select i1 %480, i32 %487, i32 0
  %489 = or i32 %488, %486
  %490 = and i32 %485, %393
  %491 = lshr i32 %485, %327
  %492 = shl i32 %489, %398
  %493 = select i1 %396, i32 %492, i32 0
  %494 = or i32 %493, %491
  %495 = lshr i32 %489, %327
  %496 = and i32 %494, %404
  %497 = lshr i32 %494, %329
  %498 = shl i32 %495, %409
  %499 = select i1 %407, i32 %498, i32 0
  %500 = or i32 %497, %499
  %501 = and i32 %500, %414
  %502 = add i32 %490, %313
  %503 = add i32 %496, %314
  %504 = add i32 %501, %315
  %505 = sitofp i32 %502 to float
  %506 = sitofp i32 %503 to float
  %507 = sitofp i32 %504 to float
  %508 = fmul fast float %505, %419
  %509 = fmul fast float %506, %419
  %510 = fmul fast float %507, %419
  %511 = add i32 %337, %299
  %512 = add i32 %335, %299
  %513 = and i32 %310, 15
  %514 = lshr i32 %310, 4
  %515 = and i32 %514, 15
  %516 = lshr i32 %310, 8
  %517 = and i32 %516, 15
  %518 = lshr i32 %310, 12
  %519 = and i32 %518, 15
  %520 = mul i32 %361, %336
  %521 = shl nuw nsw i32 %333, 1
  %522 = ashr i32 %520, 5
  %523 = shl nsw i32 %522, 2
  %524 = add i32 %523, %512
  %525 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %524, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %526 = extractvalue %dx.types.ResRet.i32 %525, 0
  %527 = extractvalue %dx.types.ResRet.i32 %525, 1
  %528 = extractvalue %dx.types.ResRet.i32 %525, 2
  %529 = extractvalue %dx.types.ResRet.i32 %525, 3
  %530 = and i32 %520, 31
  %531 = lshr i32 %526, %530
  %532 = icmp ne i32 %530, 0
  %533 = sub i32 0, %520
  %534 = and i32 %533, 31
  %535 = shl i32 %527, %534
  %536 = select i1 %532, i32 %535, i32 0
  %537 = or i32 %536, %531
  %538 = lshr i32 %527, %530
  %539 = shl i32 %528, %534
  %540 = select i1 %532, i32 %539, i32 0
  %541 = or i32 %540, %538
  %542 = lshr i32 %528, %530
  %543 = shl i32 %529, %534
  %544 = select i1 %532, i32 %543, i32 0
  %545 = or i32 %544, %542
  %546 = shl i32 1, %521
  %547 = add i32 %546, -1
  %548 = and i32 %537, %547
  %549 = shl i32 1, %333
  %550 = add i32 %549, -1
  %551 = and i32 %548, %550
  %552 = lshr i32 %548, %333
  %553 = and i32 %552, %550
  %554 = uitofp i32 %551 to float
  %555 = uitofp i32 %553 to float
  %556 = uitofp i32 %550 to float
  %557 = fdiv fast float 2.000000e+00, %556
  %558 = fmul fast float %554, %557
  %559 = fmul fast float %555, %557
  %560 = fadd fast float %558, -1.000000e+00
  %561 = fadd fast float %559, -1.000000e+00
  %562 = call float @dx.op.unary.f32(i32 6, float %560)  ; FAbs(value)
  %563 = fsub fast float 1.000000e+00, %562
  %564 = call float @dx.op.unary.f32(i32 6, float %561)  ; FAbs(value)
  %565 = fsub fast float %563, %564
  %566 = fsub fast float -0.000000e+00, %565
  %567 = call float @dx.op.unary.f32(i32 7, float %566)  ; Saturate(value)
  %568 = fsub fast float -0.000000e+00, %567
  %569 = fcmp fast oge float %560, 0.000000e+00
  %570 = fcmp fast oge float %561, 0.000000e+00
  %571 = select i1 %569, float %568, float %567
  %572 = select i1 %570, float %568, float %567
  %573 = fadd fast float %571, %560
  %574 = fadd fast float %572, %561
  %575 = call float @dx.op.dot3.f32(i32 55, float %573, float %574, float %565, float %573, float %574, float %565)  ; Dot3(ax,ay,az,bx,by,bz)
  %576 = call float @dx.op.unary.f32(i32 25, float %575)  ; Rsqrt(value)
  %577 = fmul fast float %573, %576
  %578 = fmul fast float %574, %576
  %579 = fmul fast float %576, %565
  %580 = add nuw nsw i32 %334, 1
  %581 = select i1 %339, i32 %580, i32 0
  %582 = add nsw i32 %520, %521
  %583 = lshr i32 %537, %521
  %584 = icmp ne i32 %333, 0
  %585 = sub nsw i32 0, %521
  %586 = and i32 %585, 30
  %587 = shl i32 %541, %586
  %588 = select i1 %584, i32 %587, i32 0
  %589 = or i32 %588, %583
  %590 = lshr i32 %541, %521
  %591 = shl i32 %545, %586
  %592 = select i1 %584, i32 %591, i32 0
  %593 = or i32 %592, %590
  %594 = shl i32 1, %581
  %595 = add i32 %594, -1
  %596 = and i32 %589, %595
  br i1 %339, label %597, label %634, !dx.controlflow.hints !96

; <label>:597                                     ; preds = %125
  %598 = shl i32 1, %334
  %599 = and i32 %596, %598
  %600 = icmp ne i32 %599, 0
  %601 = add i32 %598, -1
  %602 = and i32 %596, %601
  %603 = call float @dx.op.unary.f32(i32 6, float %579)  ; FAbs(value)
  %604 = call float @dx.op.unary.f32(i32 6, float %577)  ; FAbs(value)
  %605 = fcmp fast ogt float %603, %604
  %606 = select i1 %605, float %579, float %577
  %607 = select i1 %605, float %577, float %579
  %608 = fsub fast float -0.000000e+00, %578
  %609 = fmul fast float %607, %606
  %610 = fmul fast float %607, %608
  %611 = fmul fast float %606, %606
  %612 = fmul fast float %578, %608
  %613 = fsub fast float %611, %612
  %614 = call float @dx.op.dot2.f32(i32 54, float %608, float %606, float %608, float %606)  ; Dot2(ax,ay,bx,by)
  %615 = call float @dx.op.unary.f32(i32 25, float %614)  ; Rsqrt(value)
  %616 = uitofp i32 %602 to float
  %617 = uitofp i32 %598 to float
  %618 = fdiv fast float 0x401921FB60000000, %617
  %619 = fmul fast float %618, %616
  %620 = call float @dx.op.unary.f32(i32 12, float %619)  ; Cos(value)
  %621 = fmul fast float %620, %615
  %622 = fmul fast float %621, %608
  %623 = fmul fast float %621, %606
  %624 = call float @dx.op.unary.f32(i32 13, float %619)  ; Sin(value)
  %625 = fmul fast float %624, %615
  %626 = fmul fast float %609, %625
  %627 = fmul fast float %610, %625
  %628 = fmul fast float %625, %613
  %629 = fsub fast float %622, %626
  %630 = fadd fast float %627, %623
  %631 = select i1 %605, float %628, float %629
  %632 = select i1 %605, float %629, float %628
  %633 = select i1 %600, float -1.000000e+00, float 1.000000e+00
  br label %634

; <label>:634                                     ; preds = %597, %125
  %635 = phi float [ %631, %597 ], [ 0.000000e+00, %125 ]
  %636 = phi float [ %630, %597 ], [ 0.000000e+00, %125 ]
  %637 = phi float [ %632, %597 ], [ 0.000000e+00, %125 ]
  %638 = phi float [ %633, %597 ], [ 0.000000e+00, %125 ]
  %639 = add nuw nsw i32 %581, %513
  %640 = add nuw nsw i32 %639, %515
  %641 = add nsw i32 %640, %582
  %642 = and i32 %640, 31
  %643 = lshr i32 %589, %642
  %644 = icmp ne i32 %642, 0
  %645 = sub nsw i32 0, %640
  %646 = and i32 %645, 31
  %647 = shl i32 %593, %646
  %648 = select i1 %644, i32 %647, i32 0
  %649 = or i32 %648, %643
  %650 = add nuw nsw i32 %517, %519
  %651 = mul i32 %367, %336
  %652 = ashr i32 %651, 5
  %653 = shl nsw i32 %652, 2
  %654 = add i32 %653, %512
  %655 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %654, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %656 = extractvalue %dx.types.ResRet.i32 %655, 0
  %657 = extractvalue %dx.types.ResRet.i32 %655, 1
  %658 = extractvalue %dx.types.ResRet.i32 %655, 2
  %659 = extractvalue %dx.types.ResRet.i32 %655, 3
  %660 = and i32 %651, 31
  %661 = lshr i32 %656, %660
  %662 = icmp ne i32 %660, 0
  %663 = sub i32 0, %651
  %664 = and i32 %663, 31
  %665 = shl i32 %657, %664
  %666 = select i1 %662, i32 %665, i32 0
  %667 = or i32 %666, %661
  %668 = lshr i32 %657, %660
  %669 = shl i32 %658, %664
  %670 = select i1 %662, i32 %669, i32 0
  %671 = or i32 %670, %668
  %672 = lshr i32 %658, %660
  %673 = shl i32 %659, %664
  %674 = select i1 %662, i32 %673, i32 0
  %675 = or i32 %674, %672
  %676 = and i32 %667, %547
  %677 = and i32 %676, %550
  %678 = lshr i32 %676, %333
  %679 = and i32 %678, %550
  %680 = uitofp i32 %677 to float
  %681 = uitofp i32 %679 to float
  %682 = fmul fast float %680, %557
  %683 = fmul fast float %681, %557
  %684 = fadd fast float %682, -1.000000e+00
  %685 = fadd fast float %683, -1.000000e+00
  %686 = call float @dx.op.unary.f32(i32 6, float %684)  ; FAbs(value)
  %687 = fsub fast float 1.000000e+00, %686
  %688 = call float @dx.op.unary.f32(i32 6, float %685)  ; FAbs(value)
  %689 = fsub fast float %687, %688
  %690 = fsub fast float -0.000000e+00, %689
  %691 = call float @dx.op.unary.f32(i32 7, float %690)  ; Saturate(value)
  %692 = fsub fast float -0.000000e+00, %691
  %693 = fcmp fast oge float %684, 0.000000e+00
  %694 = fcmp fast oge float %685, 0.000000e+00
  %695 = select i1 %693, float %692, float %691
  %696 = select i1 %694, float %692, float %691
  %697 = fadd fast float %695, %684
  %698 = fadd fast float %696, %685
  %699 = call float @dx.op.dot3.f32(i32 55, float %697, float %698, float %689, float %697, float %698, float %689)  ; Dot3(ax,ay,az,bx,by,bz)
  %700 = call float @dx.op.unary.f32(i32 25, float %699)  ; Rsqrt(value)
  %701 = fmul fast float %697, %700
  %702 = fmul fast float %698, %700
  %703 = fmul fast float %700, %689
  %704 = add nsw i32 %651, %521
  %705 = lshr i32 %667, %521
  %706 = shl i32 %671, %586
  %707 = select i1 %584, i32 %706, i32 0
  %708 = or i32 %707, %705
  %709 = lshr i32 %671, %521
  %710 = shl i32 %675, %586
  %711 = select i1 %584, i32 %710, i32 0
  %712 = or i32 %711, %709
  %713 = and i32 %708, %595
  br i1 %339, label %714, label %751, !dx.controlflow.hints !96

; <label>:714                                     ; preds = %634
  %715 = shl i32 1, %334
  %716 = and i32 %713, %715
  %717 = icmp ne i32 %716, 0
  %718 = add i32 %715, -1
  %719 = and i32 %713, %718
  %720 = call float @dx.op.unary.f32(i32 6, float %703)  ; FAbs(value)
  %721 = call float @dx.op.unary.f32(i32 6, float %701)  ; FAbs(value)
  %722 = fcmp fast ogt float %720, %721
  %723 = select i1 %722, float %703, float %701
  %724 = select i1 %722, float %701, float %703
  %725 = fsub fast float -0.000000e+00, %702
  %726 = fmul fast float %724, %723
  %727 = fmul fast float %724, %725
  %728 = fmul fast float %723, %723
  %729 = fmul fast float %702, %725
  %730 = fsub fast float %728, %729
  %731 = call float @dx.op.dot2.f32(i32 54, float %725, float %723, float %725, float %723)  ; Dot2(ax,ay,bx,by)
  %732 = call float @dx.op.unary.f32(i32 25, float %731)  ; Rsqrt(value)
  %733 = uitofp i32 %719 to float
  %734 = uitofp i32 %715 to float
  %735 = fdiv fast float 0x401921FB60000000, %734
  %736 = fmul fast float %735, %733
  %737 = call float @dx.op.unary.f32(i32 12, float %736)  ; Cos(value)
  %738 = fmul fast float %737, %732
  %739 = fmul fast float %738, %725
  %740 = fmul fast float %738, %723
  %741 = call float @dx.op.unary.f32(i32 13, float %736)  ; Sin(value)
  %742 = fmul fast float %741, %732
  %743 = fmul fast float %726, %742
  %744 = fmul fast float %727, %742
  %745 = fmul fast float %742, %730
  %746 = fsub fast float %739, %743
  %747 = fadd fast float %744, %740
  %748 = select i1 %722, float %745, float %746
  %749 = select i1 %722, float %746, float %745
  %750 = select i1 %717, float -1.000000e+00, float 1.000000e+00
  br label %751

; <label>:751                                     ; preds = %714, %634
  %752 = phi float [ %748, %714 ], [ 0.000000e+00, %634 ]
  %753 = phi float [ %747, %714 ], [ 0.000000e+00, %634 ]
  %754 = phi float [ %749, %714 ], [ 0.000000e+00, %634 ]
  %755 = phi float [ %750, %714 ], [ 0.000000e+00, %634 ]
  %756 = add nsw i32 %640, %704
  %757 = and i32 %640, 31
  %758 = lshr i32 %708, %757
  %759 = icmp ne i32 %757, 0
  %760 = sub nsw i32 0, %640
  %761 = and i32 %760, 31
  %762 = shl i32 %712, %761
  %763 = select i1 %759, i32 %762, i32 0
  %764 = or i32 %763, %758
  %765 = mul i32 %368, %336
  %766 = ashr i32 %765, 5
  %767 = shl nsw i32 %766, 2
  %768 = add i32 %767, %512
  %769 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %300, i32 %768, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %770 = extractvalue %dx.types.ResRet.i32 %769, 0
  %771 = extractvalue %dx.types.ResRet.i32 %769, 1
  %772 = extractvalue %dx.types.ResRet.i32 %769, 2
  %773 = extractvalue %dx.types.ResRet.i32 %769, 3
  %774 = and i32 %765, 31
  %775 = lshr i32 %770, %774
  %776 = icmp ne i32 %774, 0
  %777 = sub i32 0, %765
  %778 = and i32 %777, 31
  %779 = shl i32 %771, %778
  %780 = select i1 %776, i32 %779, i32 0
  %781 = or i32 %780, %775
  %782 = lshr i32 %771, %774
  %783 = shl i32 %772, %778
  %784 = select i1 %776, i32 %783, i32 0
  %785 = or i32 %784, %782
  %786 = lshr i32 %772, %774
  %787 = shl i32 %773, %778
  %788 = select i1 %776, i32 %787, i32 0
  %789 = or i32 %788, %786
  %790 = and i32 %781, %547
  %791 = and i32 %790, %550
  %792 = lshr i32 %790, %333
  %793 = and i32 %792, %550
  %794 = uitofp i32 %791 to float
  %795 = uitofp i32 %793 to float
  %796 = fmul fast float %794, %557
  %797 = fmul fast float %795, %557
  %798 = fadd fast float %796, -1.000000e+00
  %799 = fadd fast float %797, -1.000000e+00
  %800 = call float @dx.op.unary.f32(i32 6, float %798)  ; FAbs(value)
  %801 = fsub fast float 1.000000e+00, %800
  %802 = call float @dx.op.unary.f32(i32 6, float %799)  ; FAbs(value)
  %803 = fsub fast float %801, %802
  %804 = fsub fast float -0.000000e+00, %803
  %805 = call float @dx.op.unary.f32(i32 7, float %804)  ; Saturate(value)
  %806 = fsub fast float -0.000000e+00, %805
  %807 = fcmp fast oge float %798, 0.000000e+00
  %808 = fcmp fast oge float %799, 0.000000e+00
  %809 = select i1 %807, float %806, float %805
  %810 = select i1 %808, float %806, float %805
  %811 = fadd fast float %809, %798
  %812 = fadd fast float %810, %799
  %813 = call float @dx.op.dot3.f32(i32 55, float %811, float %812, float %803, float %811, float %812, float %803)  ; Dot3(ax,ay,az,bx,by,bz)
  %814 = call float @dx.op.unary.f32(i32 25, float %813)  ; Rsqrt(value)
  %815 = fmul fast float %811, %814
  %816 = fmul fast float %812, %814
  %817 = fmul fast float %814, %803
  %818 = add nsw i32 %765, %521
  %819 = lshr i32 %781, %521
  %820 = shl i32 %785, %586
  %821 = select i1 %584, i32 %820, i32 0
  %822 = or i32 %821, %819
  %823 = lshr i32 %785, %521
  %824 = shl i32 %789, %586
  %825 = select i1 %584, i32 %824, i32 0
  %826 = or i32 %825, %823
  %827 = and i32 %822, %595
  br i1 %339, label %828, label %865, !dx.controlflow.hints !96

; <label>:828                                     ; preds = %751
  %829 = shl i32 1, %334
  %830 = and i32 %827, %829
  %831 = icmp ne i32 %830, 0
  %832 = add i32 %829, -1
  %833 = and i32 %827, %832
  %834 = call float @dx.op.unary.f32(i32 6, float %817)  ; FAbs(value)
  %835 = call float @dx.op.unary.f32(i32 6, float %815)  ; FAbs(value)
  %836 = fcmp fast ogt float %834, %835
  %837 = select i1 %836, float %817, float %815
  %838 = select i1 %836, float %815, float %817
  %839 = fsub fast float -0.000000e+00, %816
  %840 = fmul fast float %838, %837
  %841 = fmul fast float %838, %839
  %842 = fmul fast float %837, %837
  %843 = fmul fast float %816, %839
  %844 = fsub fast float %842, %843
  %845 = call float @dx.op.dot2.f32(i32 54, float %839, float %837, float %839, float %837)  ; Dot2(ax,ay,bx,by)
  %846 = call float @dx.op.unary.f32(i32 25, float %845)  ; Rsqrt(value)
  %847 = uitofp i32 %833 to float
  %848 = uitofp i32 %829 to float
  %849 = fdiv fast float 0x401921FB60000000, %848
  %850 = fmul fast float %849, %847
  %851 = call float @dx.op.unary.f32(i32 12, float %850)  ; Cos(value)
  %852 = fmul fast float %851, %846
  %853 = fmul fast float %852, %839
  %854 = fmul fast float %852, %837
  %855 = call float @dx.op.unary.f32(i32 13, float %850)  ; Sin(value)
  %856 = fmul fast float %855, %846
  %857 = fmul fast float %840, %856
  %858 = fmul fast float %841, %856
  %859 = fmul fast float %856, %844
  %860 = fsub fast float %853, %857
  %861 = fadd fast float %858, %854
  %862 = select i1 %836, float %859, float %860
  %863 = select i1 %836, float %860, float %859
  %864 = select i1 %831, float -1.000000e+00, float 1.000000e+00
  br label %865

; <label>:865                                     ; preds = %828, %751
  %866 = phi float [ %862, %828 ], [ 0.000000e+00, %751 ]
  %867 = phi float [ %861, %828 ], [ 0.000000e+00, %751 ]
  %868 = phi float [ %863, %828 ], [ 0.000000e+00, %751 ]
  %869 = phi float [ %864, %828 ], [ 0.000000e+00, %751 ]
  %870 = add nsw i32 %640, %818
  %871 = and i32 %640, 31
  %872 = lshr i32 %822, %871
  %873 = icmp ne i32 %871, 0
  %874 = sub nsw i32 0, %640
  %875 = and i32 %874, 31
  %876 = shl i32 %826, %875
  %877 = select i1 %873, i32 %876, i32 0
  %878 = or i32 %877, %872
  %879 = and i32 %322, 15
  %880 = lshr i32 %322, 4
  %881 = and i32 %880, 15
  %882 = lshr i32 %649, %650
  %883 = shl i32 1, %879
  %884 = add i32 %883, -1
  %885 = and i32 %882, %884
  %886 = add nuw nsw i32 %650, %879
  %887 = add nsw i32 %886, %641
  %888 = ashr i32 %887, 5
  %889 = shl nsw i32 %888, 2
  %890 = add i32 %889, %512
  %891 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %892 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %891, i32 %890, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %893 = extractvalue %dx.types.ResRet.i32 %892, 0
  %894 = extractvalue %dx.types.ResRet.i32 %892, 1
  %895 = extractvalue %dx.types.ResRet.i32 %892, 2
  %896 = extractvalue %dx.types.ResRet.i32 %892, 3
  %897 = and i32 %887, 31
  %898 = lshr i32 %893, %897
  %899 = icmp ne i32 %897, 0
  %900 = sub i32 0, %887
  %901 = and i32 %900, 31
  %902 = shl i32 %894, %901
  %903 = select i1 %899, i32 %902, i32 0
  %904 = or i32 %903, %898
  %905 = lshr i32 %894, %897
  %906 = shl i32 %895, %901
  %907 = select i1 %899, i32 %906, i32 0
  %908 = or i32 %907, %905
  %909 = lshr i32 %895, %897
  %910 = shl i32 %896, %901
  %911 = select i1 %899, i32 %910, i32 0
  %912 = or i32 %911, %909
  %913 = shl i32 1, %881
  %914 = add i32 %913, -1
  %915 = and i32 %904, %914
  %916 = lshr i32 %764, %650
  %917 = and i32 %916, %884
  %918 = add nsw i32 %886, %756
  %919 = ashr i32 %918, 5
  %920 = shl nsw i32 %919, 2
  %921 = add i32 %920, %512
  %922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %923 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %922, i32 %921, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %924 = extractvalue %dx.types.ResRet.i32 %923, 0
  %925 = extractvalue %dx.types.ResRet.i32 %923, 1
  %926 = extractvalue %dx.types.ResRet.i32 %923, 2
  %927 = extractvalue %dx.types.ResRet.i32 %923, 3
  %928 = and i32 %918, 31
  %929 = lshr i32 %924, %928
  %930 = icmp ne i32 %928, 0
  %931 = sub i32 0, %918
  %932 = and i32 %931, 31
  %933 = shl i32 %925, %932
  %934 = select i1 %930, i32 %933, i32 0
  %935 = or i32 %934, %929
  %936 = lshr i32 %925, %928
  %937 = shl i32 %926, %932
  %938 = select i1 %930, i32 %937, i32 0
  %939 = or i32 %938, %936
  %940 = lshr i32 %926, %928
  %941 = shl i32 %927, %932
  %942 = select i1 %930, i32 %941, i32 0
  %943 = or i32 %942, %940
  %944 = and i32 %935, %914
  %945 = lshr i32 %878, %650
  %946 = and i32 %945, %884
  %947 = add nsw i32 %886, %870
  %948 = ashr i32 %947, 5
  %949 = shl nsw i32 %948, 2
  %950 = add i32 %949, %512
  %951 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %952 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %951, i32 %950, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %953 = extractvalue %dx.types.ResRet.i32 %952, 0
  %954 = extractvalue %dx.types.ResRet.i32 %952, 1
  %955 = extractvalue %dx.types.ResRet.i32 %952, 2
  %956 = extractvalue %dx.types.ResRet.i32 %952, 3
  %957 = and i32 %947, 31
  %958 = lshr i32 %953, %957
  %959 = icmp ne i32 %957, 0
  %960 = sub i32 0, %947
  %961 = and i32 %960, 31
  %962 = shl i32 %954, %961
  %963 = select i1 %959, i32 %962, i32 0
  %964 = or i32 %963, %958
  %965 = lshr i32 %954, %957
  %966 = shl i32 %955, %961
  %967 = select i1 %959, i32 %966, i32 0
  %968 = or i32 %967, %965
  %969 = lshr i32 %955, %957
  %970 = shl i32 %956, %961
  %971 = select i1 %959, i32 %970, i32 0
  %972 = or i32 %971, %969
  %973 = and i32 %964, %914
  %974 = icmp eq i32 %341, 0
  br i1 %974, label %1026, label %975, !dx.controlflow.hints !97

; <label>:975                                     ; preds = %865
  %976 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %977 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %976, i32 %511, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %978 = extractvalue %dx.types.ResRet.i32 %977, 0
  %979 = extractvalue %dx.types.ResRet.i32 %977, 1
  %980 = extractvalue %dx.types.ResRet.i32 %977, 2
  %981 = extractvalue %dx.types.ResRet.i32 %977, 3
  %982 = add i32 %511, 16
  %983 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %976, i32 %982, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %984 = extractvalue %dx.types.ResRet.i32 %983, 0
  %985 = extractvalue %dx.types.ResRet.i32 %983, 1
  %986 = extractvalue %dx.types.ResRet.i32 %983, 2
  %987 = icmp ugt i32 %885, %980
  %988 = icmp ugt i32 %915, %981
  %989 = select i1 %987, i32 %984, i32 0
  %990 = select i1 %988, i32 %985, i32 0
  %991 = shl i32 %986, 23
  %992 = sub nsw i32 1065353216, %991
  %993 = bitcast i32 %992 to float
  %994 = add i32 %978, %885
  %995 = add i32 %994, %989
  %996 = add i32 %979, %915
  %997 = add i32 %996, %990
  %998 = sitofp i32 %995 to float
  %999 = sitofp i32 %997 to float
  %1000 = fmul fast float %998, %993
  %1001 = fmul fast float %999, %993
  %1002 = icmp ugt i32 %917, %980
  %1003 = icmp ugt i32 %944, %981
  %1004 = select i1 %1002, i32 %984, i32 0
  %1005 = select i1 %1003, i32 %985, i32 0
  %1006 = add i32 %978, %917
  %1007 = add i32 %1006, %1004
  %1008 = add i32 %979, %944
  %1009 = add i32 %1008, %1005
  %1010 = sitofp i32 %1007 to float
  %1011 = sitofp i32 %1009 to float
  %1012 = fmul fast float %1010, %993
  %1013 = fmul fast float %1011, %993
  %1014 = icmp ugt i32 %946, %980
  %1015 = icmp ugt i32 %973, %981
  %1016 = select i1 %1014, i32 %984, i32 0
  %1017 = select i1 %1015, i32 %985, i32 0
  %1018 = add i32 %978, %946
  %1019 = add i32 %1018, %1016
  %1020 = add i32 %979, %973
  %1021 = add i32 %1020, %1017
  %1022 = sitofp i32 %1019 to float
  %1023 = sitofp i32 %1021 to float
  %1024 = fmul fast float %1022, %993
  %1025 = fmul fast float %1023, %993
  br label %1026

; <label>:1026                                    ; preds = %975, %865
  %1027 = phi float [ 0.000000e+00, %865 ], [ %1024, %975 ]
  %1028 = phi float [ 0.000000e+00, %865 ], [ %1012, %975 ]
  %1029 = phi float [ 0.000000e+00, %865 ], [ %1000, %975 ]
  %1030 = phi float [ 0.000000e+00, %865 ], [ %1025, %975 ]
  %1031 = phi float [ 0.000000e+00, %865 ], [ %1013, %975 ]
  %1032 = phi float [ 0.000000e+00, %865 ], [ %1001, %975 ]
  %1033 = lshr i32 %322, 8
  %1034 = and i32 %1033, 15
  %1035 = lshr i32 %322, 12
  %1036 = and i32 %1035, 15
  %1037 = add nuw nsw i32 %881, %1034
  %1038 = add nsw i32 %1037, %887
  %1039 = lshr i32 %904, %1037
  %1040 = icmp ne i32 %1037, 0
  %1041 = sub nsw i32 0, %1037
  %1042 = and i32 %1041, 31
  %1043 = shl i32 %908, %1042
  %1044 = select i1 %1040, i32 %1043, i32 0
  %1045 = or i32 %1044, %1039
  %1046 = lshr i32 %908, %1037
  %1047 = shl i32 %912, %1042
  %1048 = select i1 %1040, i32 %1047, i32 0
  %1049 = or i32 %1048, %1046
  %1050 = add nsw i32 %1037, %918
  %1051 = lshr i32 %935, %1037
  %1052 = icmp ne i32 %1037, 0
  %1053 = sub nsw i32 0, %1037
  %1054 = and i32 %1053, 31
  %1055 = shl i32 %939, %1054
  %1056 = select i1 %1052, i32 %1055, i32 0
  %1057 = or i32 %1056, %1051
  %1058 = lshr i32 %939, %1037
  %1059 = shl i32 %943, %1054
  %1060 = select i1 %1052, i32 %1059, i32 0
  %1061 = or i32 %1060, %1058
  %1062 = add nsw i32 %1037, %947
  %1063 = lshr i32 %964, %1037
  %1064 = icmp ne i32 %1037, 0
  %1065 = sub nsw i32 0, %1037
  %1066 = and i32 %1065, 31
  %1067 = shl i32 %968, %1066
  %1068 = select i1 %1064, i32 %1067, i32 0
  %1069 = or i32 %1068, %1063
  %1070 = lshr i32 %968, %1037
  %1071 = shl i32 %972, %1066
  %1072 = select i1 %1064, i32 %1071, i32 0
  %1073 = or i32 %1072, %1070
  %1074 = lshr i32 %322, 16
  %1075 = and i32 %1074, 15
  %1076 = lshr i32 %322, 20
  %1077 = and i32 %1076, 15
  %1078 = add nuw nsw i32 %1036, %1075
  %1079 = add nsw i32 %1078, %1038
  %1080 = lshr i32 %1045, %1078
  %1081 = icmp ne i32 %1078, 0
  %1082 = sub nsw i32 0, %1078
  %1083 = and i32 %1082, 31
  %1084 = shl i32 %1049, %1083
  %1085 = select i1 %1081, i32 %1084, i32 0
  %1086 = or i32 %1085, %1080
  %1087 = add nsw i32 %1078, %1050
  %1088 = lshr i32 %1057, %1078
  %1089 = icmp ne i32 %1078, 0
  %1090 = sub nsw i32 0, %1078
  %1091 = and i32 %1090, 31
  %1092 = shl i32 %1061, %1091
  %1093 = select i1 %1089, i32 %1092, i32 0
  %1094 = or i32 %1093, %1088
  %1095 = add nsw i32 %1078, %1062
  %1096 = lshr i32 %1069, %1078
  %1097 = icmp ne i32 %1078, 0
  %1098 = sub nsw i32 0, %1078
  %1099 = and i32 %1098, 31
  %1100 = shl i32 %1073, %1099
  %1101 = select i1 %1097, i32 %1100, i32 0
  %1102 = or i32 %1101, %1096
  %1103 = lshr i32 %322, 24
  %1104 = and i32 %1103, 15
  %1105 = lshr i32 %322, 28
  %1106 = lshr i32 %1086, %1077
  %1107 = shl i32 1, %1104
  %1108 = add i32 %1107, -1
  %1109 = and i32 %1106, %1108
  %1110 = add nuw nsw i32 %1077, %1104
  %1111 = add nsw i32 %1110, %1079
  %1112 = ashr i32 %1111, 5
  %1113 = shl nsw i32 %1112, 2
  %1114 = add i32 %1113, %512
  %1115 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1116 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1115, i32 %1114, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1117 = extractvalue %dx.types.ResRet.i32 %1116, 0
  %1118 = extractvalue %dx.types.ResRet.i32 %1116, 1
  %1119 = and i32 %1111, 31
  %1120 = lshr i32 %1117, %1119
  %1121 = icmp ne i32 %1119, 0
  %1122 = sub i32 0, %1111
  %1123 = and i32 %1122, 31
  %1124 = shl i32 %1118, %1123
  %1125 = select i1 %1121, i32 %1124, i32 0
  %1126 = or i32 %1125, %1120
  %1127 = shl i32 1, %1105
  %1128 = add i32 %1127, -1
  %1129 = and i32 %1126, %1128
  %1130 = lshr i32 %1094, %1077
  %1131 = and i32 %1130, %1108
  %1132 = add nsw i32 %1110, %1087
  %1133 = ashr i32 %1132, 5
  %1134 = shl nsw i32 %1133, 2
  %1135 = add i32 %1134, %512
  %1136 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1137 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1136, i32 %1135, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1138 = extractvalue %dx.types.ResRet.i32 %1137, 0
  %1139 = extractvalue %dx.types.ResRet.i32 %1137, 1
  %1140 = and i32 %1132, 31
  %1141 = lshr i32 %1138, %1140
  %1142 = icmp ne i32 %1140, 0
  %1143 = sub i32 0, %1132
  %1144 = and i32 %1143, 31
  %1145 = shl i32 %1139, %1144
  %1146 = select i1 %1142, i32 %1145, i32 0
  %1147 = or i32 %1146, %1141
  %1148 = and i32 %1147, %1128
  %1149 = lshr i32 %1102, %1077
  %1150 = and i32 %1149, %1108
  %1151 = add nsw i32 %1110, %1095
  %1152 = ashr i32 %1151, 5
  %1153 = shl nsw i32 %1152, 2
  %1154 = add i32 %1153, %512
  %1155 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1156 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1155, i32 %1154, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1157 = extractvalue %dx.types.ResRet.i32 %1156, 0
  %1158 = extractvalue %dx.types.ResRet.i32 %1156, 1
  %1159 = and i32 %1151, 31
  %1160 = lshr i32 %1157, %1159
  %1161 = icmp ne i32 %1159, 0
  %1162 = sub i32 0, %1151
  %1163 = and i32 %1162, 31
  %1164 = shl i32 %1158, %1163
  %1165 = select i1 %1161, i32 %1164, i32 0
  %1166 = or i32 %1165, %1160
  %1167 = and i32 %1166, %1128
  %1168 = icmp ugt i32 %341, 3
  br i1 %1168, label %1169, label %1221, !dx.controlflow.hints !97

; <label>:1169                                    ; preds = %1026
  %1170 = add i32 %511, 96
  %1171 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1172 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1171, i32 %1170, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1173 = extractvalue %dx.types.ResRet.i32 %1172, 0
  %1174 = extractvalue %dx.types.ResRet.i32 %1172, 1
  %1175 = extractvalue %dx.types.ResRet.i32 %1172, 2
  %1176 = extractvalue %dx.types.ResRet.i32 %1172, 3
  %1177 = add i32 %511, 112
  %1178 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1171, i32 %1177, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1179 = extractvalue %dx.types.ResRet.i32 %1178, 0
  %1180 = extractvalue %dx.types.ResRet.i32 %1178, 1
  %1181 = extractvalue %dx.types.ResRet.i32 %1178, 2
  %1182 = icmp ugt i32 %1109, %1175
  %1183 = icmp ugt i32 %1129, %1176
  %1184 = select i1 %1182, i32 %1179, i32 0
  %1185 = select i1 %1183, i32 %1180, i32 0
  %1186 = shl i32 %1181, 23
  %1187 = sub nsw i32 1065353216, %1186
  %1188 = bitcast i32 %1187 to float
  %1189 = add i32 %1173, %1109
  %1190 = add i32 %1189, %1184
  %1191 = add i32 %1174, %1129
  %1192 = add i32 %1191, %1185
  %1193 = sitofp i32 %1190 to float
  %1194 = sitofp i32 %1192 to float
  %1195 = fmul fast float %1193, %1188
  %1196 = fmul fast float %1194, %1188
  %1197 = icmp ugt i32 %1131, %1175
  %1198 = icmp ugt i32 %1148, %1176
  %1199 = select i1 %1197, i32 %1179, i32 0
  %1200 = select i1 %1198, i32 %1180, i32 0
  %1201 = add i32 %1173, %1131
  %1202 = add i32 %1201, %1199
  %1203 = add i32 %1174, %1148
  %1204 = add i32 %1203, %1200
  %1205 = sitofp i32 %1202 to float
  %1206 = sitofp i32 %1204 to float
  %1207 = fmul fast float %1205, %1188
  %1208 = fmul fast float %1206, %1188
  %1209 = icmp ugt i32 %1150, %1175
  %1210 = icmp ugt i32 %1167, %1176
  %1211 = select i1 %1209, i32 %1179, i32 0
  %1212 = select i1 %1210, i32 %1180, i32 0
  %1213 = add i32 %1173, %1150
  %1214 = add i32 %1213, %1211
  %1215 = add i32 %1174, %1167
  %1216 = add i32 %1215, %1212
  %1217 = sitofp i32 %1214 to float
  %1218 = sitofp i32 %1216 to float
  %1219 = fmul fast float %1217, %1188
  %1220 = fmul fast float %1218, %1188
  br label %1221

; <label>:1221                                    ; preds = %1169, %1026
  %1222 = phi float [ 0.000000e+00, %1026 ], [ %1219, %1169 ]
  %1223 = phi float [ 0.000000e+00, %1026 ], [ %1207, %1169 ]
  %1224 = phi float [ 0.000000e+00, %1026 ], [ %1195, %1169 ]
  %1225 = phi float [ 0.000000e+00, %1026 ], [ %1220, %1169 ]
  %1226 = phi float [ 0.000000e+00, %1026 ], [ %1208, %1169 ]
  %1227 = phi float [ 0.000000e+00, %1026 ], [ %1196, %1169 ]
  %1228 = fmul fast float %426, %241
  %1229 = call float @dx.op.tertiary.f32(i32 46, float %427, float %244, float %1228)  ; FMad(a,b,c)
  %1230 = call float @dx.op.tertiary.f32(i32 46, float %428, float %247, float %1229)  ; FMad(a,b,c)
  %1231 = fadd fast float %1230, %287
  %1232 = fmul fast float %426, %242
  %1233 = call float @dx.op.tertiary.f32(i32 46, float %427, float %245, float %1232)  ; FMad(a,b,c)
  %1234 = call float @dx.op.tertiary.f32(i32 46, float %428, float %248, float %1233)  ; FMad(a,b,c)
  %1235 = fadd fast float %1234, %289
  %1236 = fmul fast float %426, %243
  %1237 = call float @dx.op.tertiary.f32(i32 46, float %427, float %246, float %1236)  ; FMad(a,b,c)
  %1238 = call float @dx.op.tertiary.f32(i32 46, float %428, float %249, float %1237)  ; FMad(a,b,c)
  %1239 = fadd fast float %1238, %291
  %1240 = fmul fast float %1231, %87
  %1241 = call float @dx.op.tertiary.f32(i32 46, float %1235, float %89, float %1240)  ; FMad(a,b,c)
  %1242 = call float @dx.op.tertiary.f32(i32 46, float %1239, float %91, float %1241)  ; FMad(a,b,c)
  %1243 = fmul fast float %467, %241
  %1244 = call float @dx.op.tertiary.f32(i32 46, float %468, float %244, float %1243)  ; FMad(a,b,c)
  %1245 = call float @dx.op.tertiary.f32(i32 46, float %469, float %247, float %1244)  ; FMad(a,b,c)
  %1246 = fadd fast float %1245, %287
  %1247 = fmul fast float %467, %242
  %1248 = call float @dx.op.tertiary.f32(i32 46, float %468, float %245, float %1247)  ; FMad(a,b,c)
  %1249 = call float @dx.op.tertiary.f32(i32 46, float %469, float %248, float %1248)  ; FMad(a,b,c)
  %1250 = fadd fast float %1249, %289
  %1251 = fmul fast float %467, %243
  %1252 = call float @dx.op.tertiary.f32(i32 46, float %468, float %246, float %1251)  ; FMad(a,b,c)
  %1253 = call float @dx.op.tertiary.f32(i32 46, float %469, float %249, float %1252)  ; FMad(a,b,c)
  %1254 = fadd fast float %1253, %291
  %1255 = fmul fast float %1246, %87
  %1256 = call float @dx.op.tertiary.f32(i32 46, float %1250, float %89, float %1255)  ; FMad(a,b,c)
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %1254, float %91, float %1256)  ; FMad(a,b,c)
  %1258 = fmul fast float %508, %241
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %509, float %244, float %1258)  ; FMad(a,b,c)
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %510, float %247, float %1259)  ; FMad(a,b,c)
  %1261 = fadd fast float %1260, %287
  %1262 = fmul fast float %508, %242
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %509, float %245, float %1262)  ; FMad(a,b,c)
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %510, float %248, float %1263)  ; FMad(a,b,c)
  %1265 = fadd fast float %1264, %289
  %1266 = fmul fast float %508, %243
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %509, float %246, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %510, float %249, float %1267)  ; FMad(a,b,c)
  %1269 = fadd fast float %1268, %291
  %1270 = fmul fast float %1261, %87
  %1271 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %89, float %1270)  ; FMad(a,b,c)
  %1272 = call float @dx.op.tertiary.f32(i32 46, float %1269, float %91, float %1271)  ; FMad(a,b,c)
  %1273 = fsub fast float %71, %146
  %1274 = fsub fast float %72, %147
  %1275 = fsub fast float %73, %148
  %1276 = fmul fast float %1273, 2.097152e+06
  %1277 = fmul fast float %1274, 2.097152e+06
  %1278 = fmul fast float %1275, 2.097152e+06
  %1279 = fsub fast float %1276, %75
  %1280 = fsub fast float %1277, %76
  %1281 = fsub fast float %1278, %77
  %1282 = fmul fast float %257, %1279
  %1283 = call float @dx.op.tertiary.f32(i32 46, float %1280, float %258, float %1282)  ; FMad(a,b,c)
  %1284 = call float @dx.op.tertiary.f32(i32 46, float %1281, float %259, float %1283)  ; FMad(a,b,c)
  %1285 = fadd fast float %1284, %273
  %1286 = fmul fast float %261, %1279
  %1287 = call float @dx.op.tertiary.f32(i32 46, float %1280, float %262, float %1286)  ; FMad(a,b,c)
  %1288 = call float @dx.op.tertiary.f32(i32 46, float %1281, float %263, float %1287)  ; FMad(a,b,c)
  %1289 = fadd fast float %1288, %276
  %1290 = fmul fast float %265, %1279
  %1291 = call float @dx.op.tertiary.f32(i32 46, float %1280, float %266, float %1290)  ; FMad(a,b,c)
  %1292 = call float @dx.op.tertiary.f32(i32 46, float %1281, float %267, float %1291)  ; FMad(a,b,c)
  %1293 = fadd fast float %1292, %279
  %1294 = fmul fast float %95, %65
  %1295 = call float @dx.op.tertiary.f32(i32 46, float %66, float %100, float %1294)  ; FMad(a,b,c)
  %1296 = call float @dx.op.tertiary.f32(i32 46, float %123, float %105, float %1295)  ; FMad(a,b,c)
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %67, float %110, float %1296)  ; FMad(a,b,c)
  %1298 = fmul fast float %96, %65
  %1299 = call float @dx.op.tertiary.f32(i32 46, float %66, float %101, float %1298)  ; FMad(a,b,c)
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %123, float %106, float %1299)  ; FMad(a,b,c)
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %67, float %111, float %1300)  ; FMad(a,b,c)
  %1302 = fmul fast float %97, %65
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %66, float %102, float %1302)  ; FMad(a,b,c)
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %123, float %107, float %1303)  ; FMad(a,b,c)
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %67, float %112, float %1304)  ; FMad(a,b,c)
  %1306 = fmul fast float %98, %65
  %1307 = call float @dx.op.tertiary.f32(i32 46, float %66, float %103, float %1306)  ; FMad(a,b,c)
  %1308 = call float @dx.op.tertiary.f32(i32 46, float %123, float %108, float %1307)  ; FMad(a,b,c)
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %67, float %113, float %1308)  ; FMad(a,b,c)
  %1310 = fmul fast float %1297, %257
  %1311 = call float @dx.op.tertiary.f32(i32 46, float %1301, float %258, float %1310)  ; FMad(a,b,c)
  %1312 = call float @dx.op.tertiary.f32(i32 46, float %1305, float %259, float %1311)  ; FMad(a,b,c)
  %1313 = call float @dx.op.tertiary.f32(i32 46, float %1309, float %1285, float %1312)  ; FMad(a,b,c)
  %1314 = fmul fast float %1297, %261
  %1315 = call float @dx.op.tertiary.f32(i32 46, float %1301, float %262, float %1314)  ; FMad(a,b,c)
  %1316 = call float @dx.op.tertiary.f32(i32 46, float %1305, float %263, float %1315)  ; FMad(a,b,c)
  %1317 = call float @dx.op.tertiary.f32(i32 46, float %1309, float %1289, float %1316)  ; FMad(a,b,c)
  %1318 = fmul fast float %1297, %265
  %1319 = call float @dx.op.tertiary.f32(i32 46, float %1301, float %266, float %1318)  ; FMad(a,b,c)
  %1320 = call float @dx.op.tertiary.f32(i32 46, float %1305, float %267, float %1319)  ; FMad(a,b,c)
  %1321 = call float @dx.op.tertiary.f32(i32 46, float %1309, float %1293, float %1320)  ; FMad(a,b,c)
  %1322 = fmul fast float %257, %95
  %1323 = call float @dx.op.tertiary.f32(i32 46, float %96, float %258, float %1322)  ; FMad(a,b,c)
  %1324 = call float @dx.op.tertiary.f32(i32 46, float %97, float %259, float %1323)  ; FMad(a,b,c)
  %1325 = fmul fast float %261, %95
  %1326 = call float @dx.op.tertiary.f32(i32 46, float %96, float %262, float %1325)  ; FMad(a,b,c)
  %1327 = call float @dx.op.tertiary.f32(i32 46, float %97, float %263, float %1326)  ; FMad(a,b,c)
  %1328 = call float @dx.op.tertiary.f32(i32 46, float %98, float %1289, float %1327)  ; FMad(a,b,c)
  %1329 = fmul fast float %265, %95
  %1330 = call float @dx.op.tertiary.f32(i32 46, float %96, float %266, float %1329)  ; FMad(a,b,c)
  %1331 = call float @dx.op.tertiary.f32(i32 46, float %97, float %267, float %1330)  ; FMad(a,b,c)
  %1332 = call float @dx.op.tertiary.f32(i32 46, float %98, float %1293, float %1331)  ; FMad(a,b,c)
  %1333 = fmul fast float %257, %100
  %1334 = call float @dx.op.tertiary.f32(i32 46, float %101, float %258, float %1333)  ; FMad(a,b,c)
  %1335 = call float @dx.op.tertiary.f32(i32 46, float %102, float %259, float %1334)  ; FMad(a,b,c)
  %1336 = call float @dx.op.tertiary.f32(i32 46, float %103, float %1285, float %1335)  ; FMad(a,b,c)
  %1337 = fmul fast float %261, %100
  %1338 = call float @dx.op.tertiary.f32(i32 46, float %101, float %262, float %1337)  ; FMad(a,b,c)
  %1339 = call float @dx.op.tertiary.f32(i32 46, float %102, float %263, float %1338)  ; FMad(a,b,c)
  %1340 = fmul fast float %265, %100
  %1341 = call float @dx.op.tertiary.f32(i32 46, float %101, float %266, float %1340)  ; FMad(a,b,c)
  %1342 = call float @dx.op.tertiary.f32(i32 46, float %102, float %267, float %1341)  ; FMad(a,b,c)
  %1343 = call float @dx.op.tertiary.f32(i32 46, float %103, float %1293, float %1342)  ; FMad(a,b,c)
  %1344 = fadd fast float %1336, %1313
  %1345 = fadd fast float %1343, %1321
  %1346 = fdiv fast float %1344, %1309
  %1347 = fdiv fast float %1345, %1309
  %1348 = fadd fast float %1328, %1317
  %1349 = fadd fast float %1332, %1321
  %1350 = fdiv fast float %1348, %1309
  %1351 = fdiv fast float %1313, %1309
  %1352 = fdiv fast float %1317, %1309
  %1353 = fdiv fast float %1321, %1309
  br label %1354

; <label>:1354                                    ; preds = %1354, %1221
  %1355 = phi float [ %508, %1221 ], [ %1467, %1354 ]
  %1356 = phi float [ %509, %1221 ], [ %1468, %1354 ]
  %1357 = phi float [ %510, %1221 ], [ %1469, %1354 ]
  %1358 = phi float [ %467, %1221 ], [ %1461, %1354 ]
  %1359 = phi float [ %468, %1221 ], [ %1462, %1354 ]
  %1360 = phi float [ %469, %1221 ], [ %1463, %1354 ]
  %1361 = phi float [ %426, %1221 ], [ %1455, %1354 ]
  %1362 = phi float [ %427, %1221 ], [ %1456, %1354 ]
  %1363 = phi float [ %428, %1221 ], [ %1457, %1354 ]
  %1364 = phi i32 [ 0, %1221 ], [ %1470, %1354 ]
  %1365 = fsub fast float %1358, %1361
  %1366 = fsub fast float %1359, %1362
  %1367 = fsub fast float %1360, %1363
  %1368 = fsub fast float %1355, %1361
  %1369 = fsub fast float %1356, %1362
  %1370 = fsub fast float %1357, %1363
  %1371 = fsub fast float %1351, %1361
  %1372 = fsub fast float %1352, %1362
  %1373 = fsub fast float %1353, %1363
  %1374 = fmul fast float %1367, %1369
  %1375 = fmul fast float %1370, %1366
  %1376 = fsub fast float %1374, %1375
  %1377 = fmul fast float %1370, %1365
  %1378 = fmul fast float %1367, %1368
  %1379 = fsub fast float %1377, %1378
  %1380 = fmul fast float %1366, %1368
  %1381 = fmul fast float %1369, %1365
  %1382 = fsub fast float %1380, %1381
  %1383 = fmul fast float %1379, %1370
  %1384 = fmul fast float %1382, %1369
  %1385 = fsub fast float %1383, %1384
  %1386 = fmul fast float %1382, %1368
  %1387 = fmul fast float %1376, %1370
  %1388 = fsub fast float %1386, %1387
  %1389 = fmul fast float %1376, %1369
  %1390 = fmul fast float %1379, %1368
  %1391 = fsub fast float %1389, %1390
  %1392 = call float @dx.op.dot3.f32(i32 55, float %1365, float %1366, float %1367, float %1385, float %1388, float %1391)  ; Dot3(ax,ay,az,bx,by,bz)
  %1393 = fdiv fast float 1.000000e+00, %1392
  %1394 = call float @dx.op.dot3.f32(i32 55, float %1371, float %1372, float %1373, float %1385, float %1388, float %1391)  ; Dot3(ax,ay,az,bx,by,bz)
  %1395 = fmul fast float %1394, %1393
  %1396 = fmul fast float %1367, %1372
  %1397 = fmul fast float %1373, %1366
  %1398 = fsub fast float %1396, %1397
  %1399 = fmul fast float %1373, %1365
  %1400 = fmul fast float %1367, %1371
  %1401 = fsub fast float %1399, %1400
  %1402 = fmul fast float %1366, %1371
  %1403 = fmul fast float %1372, %1365
  %1404 = fsub fast float %1402, %1403
  %1405 = call float @dx.op.dot3.f32(i32 55, float %1376, float %1379, float %1382, float %1398, float %1401, float %1404)  ; Dot3(ax,ay,az,bx,by,bz)
  %1406 = fmul fast float %1405, %1393
  %1407 = fsub fast float 1.000000e+00, %1395
  %1408 = fsub fast float %1407, %1406
  %1409 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1408)  ; FMax(a,b)
  %1410 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1395)  ; FMax(a,b)
  %1411 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1406)  ; FMax(a,b)
  %1412 = call float @dx.op.dot3.f32(i32 55, float %1409, float %1410, float %1411, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %1413 = fdiv fast float %1409, %1412
  %1414 = fdiv fast float %1410, %1412
  %1415 = fdiv fast float %1411, %1412
  %1416 = fmul fast float %1413, %1361
  %1417 = fmul fast float %1413, %1362
  %1418 = fmul fast float %1413, %1363
  %1419 = fmul fast float %1414, %1358
  %1420 = fmul fast float %1414, %1359
  %1421 = fmul fast float %1414, %1360
  %1422 = fmul fast float %1415, %1355
  %1423 = fmul fast float %1415, %1356
  %1424 = fmul fast float %1415, %1357
  %1425 = fmul fast float %1413, %577
  %1426 = fmul fast float %1413, %578
  %1427 = fmul fast float %1413, %579
  %1428 = fmul fast float %1414, %701
  %1429 = fmul fast float %1414, %702
  %1430 = fmul fast float %1414, %703
  %1431 = fadd fast float %1428, %1425
  %1432 = fadd fast float %1429, %1426
  %1433 = fadd fast float %1430, %1427
  %1434 = fmul fast float %1415, %815
  %1435 = fmul fast float %1415, %816
  %1436 = fmul fast float %1415, %817
  %1437 = fadd fast float %1431, %1434
  %1438 = fadd fast float %1432, %1435
  %1439 = fadd fast float %1433, %1436
  %1440 = fsub fast float %1351, %1416
  %1441 = fsub fast float %1440, %1419
  %1442 = fsub fast float %1441, %1422
  %1443 = fsub fast float %1352, %1417
  %1444 = fsub fast float %1443, %1420
  %1445 = fsub fast float %1444, %1423
  %1446 = fsub fast float %1353, %1418
  %1447 = fsub fast float %1446, %1421
  %1448 = fsub fast float %1447, %1424
  %1449 = call float @dx.op.dot3.f32(i32 55, float %1442, float %1445, float %1448, float %1437, float %1438, float %1439)  ; Dot3(ax,ay,az,bx,by,bz)
  %1450 = call float @dx.op.dot3.f32(i32 55, float %1437, float %1438, float %1439, float %1437, float %1438, float %1439)  ; Dot3(ax,ay,az,bx,by,bz)
  %1451 = fdiv fast float %1449, %1450
  %1452 = fmul fast float %1451, %577
  %1453 = fmul fast float %1451, %578
  %1454 = fmul fast float %1451, %579
  %1455 = fadd fast float %1452, %1361
  %1456 = fadd fast float %1453, %1362
  %1457 = fadd fast float %1454, %1363
  %1458 = fmul fast float %1451, %701
  %1459 = fmul fast float %1451, %702
  %1460 = fmul fast float %1451, %703
  %1461 = fadd fast float %1458, %1358
  %1462 = fadd fast float %1459, %1359
  %1463 = fadd fast float %1460, %1360
  %1464 = fmul fast float %1451, %815
  %1465 = fmul fast float %1451, %816
  %1466 = fmul fast float %1451, %817
  %1467 = fadd fast float %1464, %1355
  %1468 = fadd fast float %1465, %1356
  %1469 = fadd fast float %1466, %1357
  %1470 = add nuw nsw i32 %1364, 1
  %1471 = icmp eq i32 %1470, 2
  br i1 %1471, label %1472, label %1354

; <label>:1472                                    ; preds = %1354
  %1473 = fadd fast float %1242, %93
  %1474 = fadd fast float %1257, %93
  %1475 = fadd fast float %1272, %93
  %1476 = call float @dx.op.tertiary.f32(i32 46, float %98, float %1285, float %1324)  ; FMad(a,b,c)
  %1477 = call float @dx.op.tertiary.f32(i32 46, float %103, float %1289, float %1339)  ; FMad(a,b,c)
  %1478 = fadd fast float %1477, %1317
  %1479 = fdiv fast float %1478, %1309
  %1480 = fadd fast float %1476, %1313
  %1481 = fdiv fast float %1480, %1309
  %1482 = fdiv fast float %1349, %1309
  %1483 = fsub fast float %1461, %1455
  %1484 = fsub fast float %1462, %1456
  %1485 = fsub fast float %1463, %1457
  %1486 = fsub fast float %1467, %1455
  %1487 = fsub fast float %1468, %1456
  %1488 = fsub fast float %1469, %1457
  %1489 = fsub fast float %1351, %1455
  %1490 = fsub fast float %1352, %1456
  %1491 = fsub fast float %1353, %1457
  %1492 = fmul fast float %1487, %1485
  %1493 = fmul fast float %1488, %1484
  %1494 = fsub fast float %1492, %1493
  %1495 = fmul fast float %1488, %1483
  %1496 = fmul fast float %1486, %1485
  %1497 = fsub fast float %1495, %1496
  %1498 = fmul fast float %1486, %1484
  %1499 = fmul fast float %1487, %1483
  %1500 = fsub fast float %1498, %1499
  %1501 = fmul fast float %1497, %1488
  %1502 = fmul fast float %1500, %1487
  %1503 = fsub fast float %1501, %1502
  %1504 = fmul fast float %1500, %1486
  %1505 = fmul fast float %1494, %1488
  %1506 = fsub fast float %1504, %1505
  %1507 = fmul fast float %1494, %1487
  %1508 = fmul fast float %1497, %1486
  %1509 = fsub fast float %1507, %1508
  %1510 = call float @dx.op.dot3.f32(i32 55, float %1483, float %1484, float %1485, float %1503, float %1506, float %1509)  ; Dot3(ax,ay,az,bx,by,bz)
  %1511 = fdiv fast float 1.000000e+00, %1510
  %1512 = call float @dx.op.dot3.f32(i32 55, float %1489, float %1490, float %1491, float %1503, float %1506, float %1509)  ; Dot3(ax,ay,az,bx,by,bz)
  %1513 = fmul fast float %1512, %1511
  %1514 = fmul fast float %1490, %1485
  %1515 = fmul fast float %1491, %1484
  %1516 = fsub fast float %1514, %1515
  %1517 = fmul fast float %1491, %1483
  %1518 = fmul fast float %1489, %1485
  %1519 = fsub fast float %1517, %1518
  %1520 = fmul fast float %1489, %1484
  %1521 = fmul fast float %1490, %1483
  %1522 = fsub fast float %1520, %1521
  %1523 = call float @dx.op.dot3.f32(i32 55, float %1494, float %1497, float %1500, float %1516, float %1519, float %1522)  ; Dot3(ax,ay,az,bx,by,bz)
  %1524 = fmul fast float %1523, %1511
  %1525 = fsub fast float 1.000000e+00, %1513
  %1526 = fsub fast float %1525, %1524
  %1527 = fsub fast float %1481, %1455
  %1528 = fsub fast float %1350, %1456
  %1529 = fsub fast float %1482, %1457
  %1530 = call float @dx.op.dot3.f32(i32 55, float %1527, float %1528, float %1529, float %1503, float %1506, float %1509)  ; Dot3(ax,ay,az,bx,by,bz)
  %1531 = fmul fast float %1528, %1485
  %1532 = fmul fast float %1529, %1484
  %1533 = fsub fast float %1531, %1532
  %1534 = fmul fast float %1529, %1483
  %1535 = fmul fast float %1527, %1485
  %1536 = fsub fast float %1534, %1535
  %1537 = fmul fast float %1527, %1484
  %1538 = fmul fast float %1528, %1483
  %1539 = fsub fast float %1537, %1538
  %1540 = call float @dx.op.dot3.f32(i32 55, float %1494, float %1497, float %1500, float %1533, float %1536, float %1539)  ; Dot3(ax,ay,az,bx,by,bz)
  %1541 = fsub fast float %1530, %1512
  %1542 = fmul fast float %1511, %1541
  %1543 = fsub fast float %1540, %1523
  %1544 = fmul fast float %1511, %1543
  %1545 = fsub fast float %1346, %1455
  %1546 = fsub fast float %1479, %1456
  %1547 = fsub fast float %1347, %1457
  %1548 = call float @dx.op.dot3.f32(i32 55, float %1545, float %1546, float %1547, float %1503, float %1506, float %1509)  ; Dot3(ax,ay,az,bx,by,bz)
  %1549 = fmul fast float %1546, %1485
  %1550 = fmul fast float %1547, %1484
  %1551 = fsub fast float %1549, %1550
  %1552 = fmul fast float %1547, %1483
  %1553 = fmul fast float %1545, %1485
  %1554 = fsub fast float %1552, %1553
  %1555 = fmul fast float %1545, %1484
  %1556 = fmul fast float %1546, %1483
  %1557 = fsub fast float %1555, %1556
  %1558 = call float @dx.op.dot3.f32(i32 55, float %1494, float %1497, float %1500, float %1551, float %1554, float %1557)  ; Dot3(ax,ay,az,bx,by,bz)
  %1559 = fsub fast float %1548, %1512
  %1560 = fmul fast float %1511, %1559
  %1561 = fsub fast float %1558, %1523
  %1562 = fmul fast float %1511, %1561
  %1563 = fmul fast float %1526, %577
  %1564 = fmul fast float %1526, %578
  %1565 = fmul fast float %1526, %579
  %1566 = fmul fast float %1513, %701
  %1567 = fmul fast float %1513, %702
  %1568 = fmul fast float %1513, %703
  %1569 = fmul fast float %1524, %815
  %1570 = fmul fast float %1524, %816
  %1571 = fmul fast float %1524, %817
  %1572 = fadd fast float %1569, %1566
  %1573 = fadd fast float %1572, %1563
  %1574 = fadd fast float %1570, %1567
  %1575 = fadd fast float %1574, %1564
  %1576 = fadd fast float %1571, %1568
  %1577 = fadd fast float %1576, %1565
  %1578 = call float @dx.op.dot3.f32(i32 55, float %1573, float %1575, float %1577, float %1573, float %1575, float %1577)  ; Dot3(ax,ay,az,bx,by,bz)
  %1579 = call float @dx.op.unary.f32(i32 25, float %1578)  ; Rsqrt(value)
  %1580 = fmul fast float %1579, %1573
  %1581 = fmul fast float %1579, %1575
  %1582 = fmul fast float %1579, %1577
  br i1 %974, label %1583, label %1596

; <label>:1583                                    ; preds = %1472
  %1584 = fmul fast float %1580, %255
  %1585 = fmul fast float %1581, %255
  %1586 = fmul fast float %1582, %255
  %1587 = fmul fast float %1584, %241
  %1588 = call float @dx.op.tertiary.f32(i32 46, float %1585, float %244, float %1587)  ; FMad(a,b,c)
  %1589 = call float @dx.op.tertiary.f32(i32 46, float %1586, float %247, float %1588)  ; FMad(a,b,c)
  %1590 = fmul fast float %1584, %242
  %1591 = call float @dx.op.tertiary.f32(i32 46, float %1585, float %245, float %1590)  ; FMad(a,b,c)
  %1592 = call float @dx.op.tertiary.f32(i32 46, float %1586, float %248, float %1591)  ; FMad(a,b,c)
  %1593 = fmul fast float %1584, %243
  %1594 = call float @dx.op.tertiary.f32(i32 46, float %1585, float %246, float %1593)  ; FMad(a,b,c)
  %1595 = call float @dx.op.tertiary.f32(i32 46, float %1586, float %249, float %1594)  ; FMad(a,b,c)
  br label %1773

; <label>:1596                                    ; preds = %1472
  br i1 %339, label %1694, label %1597, !dx.controlflow.hints !98

; <label>:1597                                    ; preds = %1596
  %1598 = fsub fast float %464, %423
  %1599 = fmul fast float %419, %1598
  %1600 = fsub fast float %465, %424
  %1601 = fmul fast float %419, %1600
  %1602 = fsub fast float %466, %425
  %1603 = fmul fast float %419, %1602
  %1604 = fsub fast float %505, %423
  %1605 = fmul fast float %419, %1604
  %1606 = fsub fast float %506, %424
  %1607 = fmul fast float %419, %1606
  %1608 = fsub fast float %507, %425
  %1609 = fmul fast float %419, %1608
  %1610 = fsub fast float %1028, %1029
  %1611 = fsub fast float %1031, %1032
  %1612 = fsub fast float %1027, %1029
  %1613 = fsub fast float %1030, %1032
  %1614 = call float @dx.op.unary.f32(i32 6, float %1610)  ; FAbs(value)
  %1615 = call float @dx.op.unary.f32(i32 6, float %1612)  ; FAbs(value)
  %1616 = fadd fast float %1615, %1614
  %1617 = fcmp fast ogt float %1616, 0x3EB0C6F7A0000000
  br i1 %1617, label %1637, label %1618, !dx.controlflow.hints !99

; <label>:1618                                    ; preds = %1597
  %1619 = fcmp fast oge float %1582, 0.000000e+00
  %1620 = select i1 %1619, float 1.000000e+00, float -1.000000e+00
  %1621 = fadd fast float %1620, %1582
  %1622 = fdiv fast float 1.000000e+00, %1621
  %1623 = fsub fast float -0.000000e+00, %1622
  %1624 = fmul fast float %1580, %1581
  %1625 = fmul fast float %1624, %1623
  %1626 = fmul fast float %1580, %1580
  %1627 = fmul fast float %1626, %1620
  %1628 = fmul fast float %1627, %1623
  %1629 = fadd fast float %1628, 1.000000e+00
  %1630 = fmul fast float %1625, %1620
  %1631 = fmul fast float %1580, %1620
  %1632 = fsub fast float -0.000000e+00, %1631
  %1633 = fmul fast float %1581, %1581
  %1634 = fmul fast float %1633, %1623
  %1635 = fadd fast float %1634, %1620
  %1636 = fsub fast float -0.000000e+00, %1581
  br label %1727

; <label>:1637                                    ; preds = %1597
  %1638 = fmul fast float %1581, %1609
  %1639 = fmul fast float %1582, %1607
  %1640 = fsub fast float %1638, %1639
  %1641 = fmul fast float %1582, %1605
  %1642 = fmul fast float %1580, %1609
  %1643 = fsub fast float %1641, %1642
  %1644 = fmul fast float %1580, %1607
  %1645 = fmul fast float %1581, %1605
  %1646 = fsub fast float %1644, %1645
  %1647 = fmul fast float %1582, %1601
  %1648 = fmul fast float %1581, %1603
  %1649 = fsub fast float %1647, %1648
  %1650 = fmul fast float %1580, %1603
  %1651 = fmul fast float %1582, %1599
  %1652 = fsub fast float %1650, %1651
  %1653 = fmul fast float %1581, %1599
  %1654 = fmul fast float %1580, %1601
  %1655 = fsub fast float %1653, %1654
  %1656 = fmul fast float %1640, %1610
  %1657 = fmul fast float %1643, %1610
  %1658 = fmul fast float %1646, %1610
  %1659 = fmul fast float %1649, %1612
  %1660 = fmul fast float %1652, %1612
  %1661 = fmul fast float %1655, %1612
  %1662 = fadd fast float %1656, %1659
  %1663 = fadd fast float %1657, %1660
  %1664 = fadd fast float %1658, %1661
  %1665 = fmul fast float %1640, %1611
  %1666 = fmul fast float %1643, %1611
  %1667 = fmul fast float %1646, %1611
  %1668 = fmul fast float %1649, %1613
  %1669 = fmul fast float %1652, %1613
  %1670 = fmul fast float %1655, %1613
  %1671 = fadd fast float %1665, %1668
  %1672 = fadd fast float %1666, %1669
  %1673 = fadd fast float %1667, %1670
  %1674 = call float @dx.op.dot3.f32(i32 55, float %1662, float %1663, float %1664, float %1662, float %1663, float %1664)  ; Dot3(ax,ay,az,bx,by,bz)
  %1675 = call float @dx.op.unary.f32(i32 25, float %1674)  ; Rsqrt(value)
  %1676 = fmul fast float %1675, %1662
  %1677 = fmul fast float %1675, %1663
  %1678 = fmul fast float %1675, %1664
  %1679 = fmul fast float %1678, %1581
  %1680 = fmul fast float %1677, %1582
  %1681 = fsub fast float %1679, %1680
  %1682 = fmul fast float %1676, %1582
  %1683 = fmul fast float %1678, %1580
  %1684 = fsub fast float %1682, %1683
  %1685 = fmul fast float %1677, %1580
  %1686 = fmul fast float %1676, %1581
  %1687 = fsub fast float %1685, %1686
  %1688 = call float @dx.op.dot3.f32(i32 55, float %1671, float %1672, float %1673, float %1681, float %1684, float %1687)  ; Dot3(ax,ay,az,bx,by,bz)
  %1689 = fcmp fast olt float %1688, 0.000000e+00
  %1690 = select i1 %1689, float -1.000000e+00, float 1.000000e+00
  %1691 = fmul fast float %1681, %1690
  %1692 = fmul fast float %1684, %1690
  %1693 = fmul fast float %1687, %1690
  br label %1727

; <label>:1694                                    ; preds = %1596
  %1695 = fmul fast float %1526, %635
  %1696 = fmul fast float %1526, %636
  %1697 = fmul fast float %1526, %637
  %1698 = fmul fast float %1526, %638
  %1699 = fmul fast float %1513, %752
  %1700 = fmul fast float %1513, %753
  %1701 = fmul fast float %1513, %754
  %1702 = fmul fast float %1513, %755
  %1703 = fmul fast float %1524, %866
  %1704 = fmul fast float %1524, %867
  %1705 = fmul fast float %1524, %868
  %1706 = fmul fast float %1524, %869
  %1707 = fadd fast float %1703, %1699
  %1708 = fadd fast float %1707, %1695
  %1709 = fadd fast float %1704, %1700
  %1710 = fadd fast float %1709, %1696
  %1711 = fadd fast float %1705, %1701
  %1712 = fadd fast float %1711, %1697
  %1713 = fadd fast float %1706, %1702
  %1714 = fadd fast float %1713, %1698
  %1715 = fmul fast float %1575, %1712
  %1716 = fmul fast float %1577, %1710
  %1717 = fsub fast float %1715, %1716
  %1718 = fmul fast float %1577, %1708
  %1719 = fmul fast float %1573, %1712
  %1720 = fsub fast float %1718, %1719
  %1721 = fmul fast float %1573, %1710
  %1722 = fmul fast float %1575, %1708
  %1723 = fsub fast float %1721, %1722
  %1724 = fmul fast float %1717, %1714
  %1725 = fmul fast float %1720, %1714
  %1726 = fmul fast float %1723, %1714
  br label %1727

; <label>:1727                                    ; preds = %1694, %1637, %1618
  %1728 = phi float [ %1708, %1694 ], [ %1676, %1637 ], [ %1629, %1618 ]
  %1729 = phi float [ %1710, %1694 ], [ %1677, %1637 ], [ %1630, %1618 ]
  %1730 = phi float [ %1712, %1694 ], [ %1678, %1637 ], [ %1632, %1618 ]
  %1731 = phi float [ %1724, %1694 ], [ %1691, %1637 ], [ %1625, %1618 ]
  %1732 = phi float [ %1725, %1694 ], [ %1692, %1637 ], [ %1635, %1618 ]
  %1733 = phi float [ %1726, %1694 ], [ %1693, %1637 ], [ %1636, %1618 ]
  %1734 = phi float [ %1573, %1694 ], [ %1580, %1637 ], [ %1580, %1618 ]
  %1735 = phi float [ %1575, %1694 ], [ %1581, %1637 ], [ %1581, %1618 ]
  %1736 = phi float [ %1577, %1694 ], [ %1582, %1637 ], [ %1582, %1618 ]
  %1737 = fmul fast float %241, %253
  %1738 = fmul fast float %242, %253
  %1739 = fmul fast float %243, %253
  %1740 = fmul fast float %244, %254
  %1741 = fmul fast float %245, %254
  %1742 = fmul fast float %246, %254
  %1743 = fmul fast float %255, %247
  %1744 = fmul fast float %255, %248
  %1745 = fmul fast float %255, %249
  %1746 = fmul fast float %1728, %1737
  %1747 = call float @dx.op.tertiary.f32(i32 46, float %1729, float %1740, float %1746)  ; FMad(a,b,c)
  %1748 = call float @dx.op.tertiary.f32(i32 46, float %1730, float %1743, float %1747)  ; FMad(a,b,c)
  %1749 = fmul fast float %1728, %1738
  %1750 = call float @dx.op.tertiary.f32(i32 46, float %1729, float %1741, float %1749)  ; FMad(a,b,c)
  %1751 = call float @dx.op.tertiary.f32(i32 46, float %1730, float %1744, float %1750)  ; FMad(a,b,c)
  %1752 = fmul fast float %1728, %1739
  %1753 = call float @dx.op.tertiary.f32(i32 46, float %1729, float %1742, float %1752)  ; FMad(a,b,c)
  %1754 = call float @dx.op.tertiary.f32(i32 46, float %1730, float %1745, float %1753)  ; FMad(a,b,c)
  %1755 = fmul fast float %1731, %1737
  %1756 = call float @dx.op.tertiary.f32(i32 46, float %1732, float %1740, float %1755)  ; FMad(a,b,c)
  %1757 = call float @dx.op.tertiary.f32(i32 46, float %1733, float %1743, float %1756)  ; FMad(a,b,c)
  %1758 = fmul fast float %1731, %1738
  %1759 = call float @dx.op.tertiary.f32(i32 46, float %1732, float %1741, float %1758)  ; FMad(a,b,c)
  %1760 = call float @dx.op.tertiary.f32(i32 46, float %1733, float %1744, float %1759)  ; FMad(a,b,c)
  %1761 = fmul fast float %1731, %1739
  %1762 = call float @dx.op.tertiary.f32(i32 46, float %1732, float %1742, float %1761)  ; FMad(a,b,c)
  %1763 = call float @dx.op.tertiary.f32(i32 46, float %1733, float %1745, float %1762)  ; FMad(a,b,c)
  %1764 = fmul fast float %1734, %1737
  %1765 = call float @dx.op.tertiary.f32(i32 46, float %1735, float %1740, float %1764)  ; FMad(a,b,c)
  %1766 = call float @dx.op.tertiary.f32(i32 46, float %1736, float %1743, float %1765)  ; FMad(a,b,c)
  %1767 = fmul fast float %1734, %1738
  %1768 = call float @dx.op.tertiary.f32(i32 46, float %1735, float %1741, float %1767)  ; FMad(a,b,c)
  %1769 = call float @dx.op.tertiary.f32(i32 46, float %1736, float %1744, float %1768)  ; FMad(a,b,c)
  %1770 = fmul fast float %1734, %1739
  %1771 = call float @dx.op.tertiary.f32(i32 46, float %1735, float %1742, float %1770)  ; FMad(a,b,c)
  %1772 = call float @dx.op.tertiary.f32(i32 46, float %1736, float %1745, float %1771)  ; FMad(a,b,c)
  br label %1773

; <label>:1773                                    ; preds = %1727, %1583
  %1774 = phi float [ %1748, %1727 ], [ 0.000000e+00, %1583 ]
  %1775 = phi float [ %1751, %1727 ], [ 0.000000e+00, %1583 ]
  %1776 = phi float [ %1754, %1727 ], [ 0.000000e+00, %1583 ]
  %1777 = phi float [ %1757, %1727 ], [ 0.000000e+00, %1583 ]
  %1778 = phi float [ %1760, %1727 ], [ 0.000000e+00, %1583 ]
  %1779 = phi float [ %1763, %1727 ], [ 0.000000e+00, %1583 ]
  %1780 = phi float [ %1766, %1727 ], [ %1589, %1583 ]
  %1781 = phi float [ %1769, %1727 ], [ %1592, %1583 ]
  %1782 = phi float [ %1772, %1727 ], [ %1595, %1583 ]
  %1783 = fsub fast float %1028, %1029
  %1784 = fsub fast float %1031, %1032
  %1785 = fsub fast float %1027, %1029
  %1786 = fsub fast float %1030, %1032
  %1787 = fmul fast float %1513, %1783
  %1788 = fmul fast float %1513, %1784
  %1789 = fadd fast float %1787, %1029
  %1790 = fadd fast float %1788, %1032
  %1791 = fmul fast float %1524, %1785
  %1792 = fmul fast float %1524, %1786
  %1793 = fadd fast float %1789, %1791
  %1794 = fadd fast float %1790, %1792
  %1795 = fmul fast float %1542, %1783
  %1796 = fmul fast float %1542, %1784
  %1797 = fmul fast float %1544, %1785
  %1798 = fmul fast float %1544, %1786
  %1799 = fadd fast float %1797, %1795
  %1800 = fadd fast float %1798, %1796
  %1801 = fmul fast float %1560, %1783
  %1802 = fmul fast float %1560, %1784
  %1803 = fmul fast float %1562, %1785
  %1804 = fmul fast float %1562, %1786
  %1805 = fadd fast float %1803, %1801
  %1806 = fadd fast float %1804, %1802
  %1807 = fsub fast float %1223, %1224
  %1808 = fsub fast float %1226, %1227
  %1809 = fsub fast float %1222, %1224
  %1810 = fsub fast float %1225, %1227
  %1811 = fmul fast float %1513, %1807
  %1812 = fmul fast float %1513, %1808
  %1813 = fadd fast float %1811, %1224
  %1814 = fadd fast float %1812, %1227
  %1815 = fmul fast float %1524, %1809
  %1816 = fmul fast float %1524, %1810
  %1817 = fadd fast float %1813, %1815
  %1818 = fadd fast float %1814, %1816
  %1819 = fmul fast float %1542, %1807
  %1820 = fmul fast float %1542, %1808
  %1821 = fmul fast float %1544, %1809
  %1822 = fmul fast float %1544, %1810
  %1823 = fadd fast float %1821, %1819
  %1824 = fadd fast float %1822, %1820
  %1825 = fmul fast float %1560, %1807
  %1826 = fmul fast float %1560, %1808
  %1827 = fmul fast float %1562, %1809
  %1828 = fmul fast float %1562, %1810
  %1829 = fadd fast float %1827, %1825
  %1830 = fadd fast float %1828, %1826
  %1831 = fmul fast float %1526, %1231
  %1832 = fmul fast float %1526, %1235
  %1833 = fmul fast float %1526, %1239
  %1834 = fmul fast float %1513, %1246
  %1835 = fmul fast float %1513, %1250
  %1836 = fmul fast float %1513, %1254
  %1837 = fmul fast float %1524, %1261
  %1838 = fmul fast float %1524, %1265
  %1839 = fmul fast float %1524, %1269
  %1840 = fadd fast float %1837, %1834
  %1841 = fadd fast float %1840, %1831
  %1842 = fadd fast float %1838, %1835
  %1843 = fadd fast float %1842, %1832
  %1844 = fadd fast float %1839, %1836
  %1845 = fadd fast float %1844, %1833
  %1846 = fmul fast float %1526, %1473
  %1847 = fmul fast float %1513, %1474
  %1848 = fmul fast float %1524, %1475
  %1849 = fadd fast float %1848, %1847
  %1850 = fadd fast float %1849, %1846
  %1851 = fmul float %1793, 5.000000e-01
  %1852 = fmul float %1794, 5.000000e-01
  %1853 = fmul float %1799, 5.000000e-01
  %1854 = fmul float %1800, 5.000000e-01
  %1855 = fmul float %1805, 5.000000e-01
  %1856 = fmul float %1806, 5.000000e-01
  br label %1857

; <label>:1857                                    ; preds = %1773, %0
  %1858 = phi float [ %1854, %1773 ], [ 0.000000e+00, %0 ]
  %1859 = phi float [ %1824, %1773 ], [ 0.000000e+00, %0 ]
  %1860 = phi float [ %1853, %1773 ], [ 0.000000e+00, %0 ]
  %1861 = phi float [ %1823, %1773 ], [ 0.000000e+00, %0 ]
  %1862 = phi float [ %1856, %1773 ], [ 0.000000e+00, %0 ]
  %1863 = phi float [ %1830, %1773 ], [ 0.000000e+00, %0 ]
  %1864 = phi float [ %1855, %1773 ], [ 0.000000e+00, %0 ]
  %1865 = phi float [ %1829, %1773 ], [ 0.000000e+00, %0 ]
  %1866 = phi float [ %1852, %1773 ], [ 0.000000e+00, %0 ]
  %1867 = phi float [ %1818, %1773 ], [ 0.000000e+00, %0 ]
  %1868 = phi float [ %1851, %1773 ], [ 0.000000e+00, %0 ]
  %1869 = phi float [ %1817, %1773 ], [ 0.000000e+00, %0 ]
  %1870 = phi float [ %1774, %1773 ], [ 1.000000e+00, %0 ]
  %1871 = phi float [ %1775, %1773 ], [ 0.000000e+00, %0 ]
  %1872 = phi float [ %1776, %1773 ], [ 0.000000e+00, %0 ]
  %1873 = phi float [ %1777, %1773 ], [ 0.000000e+00, %0 ]
  %1874 = phi float [ %1778, %1773 ], [ 1.000000e+00, %0 ]
  %1875 = phi float [ %1779, %1773 ], [ 0.000000e+00, %0 ]
  %1876 = phi float [ %1780, %1773 ], [ 0.000000e+00, %0 ]
  %1877 = phi float [ %1781, %1773 ], [ 0.000000e+00, %0 ]
  %1878 = phi float [ %1782, %1773 ], [ 1.000000e+00, %0 ]
  %1879 = phi float [ %1841, %1773 ], [ 0.000000e+00, %0 ]
  %1880 = phi float [ %1843, %1773 ], [ 0.000000e+00, %0 ]
  %1881 = phi float [ %1845, %1773 ], [ 0.000000e+00, %0 ]
  %1882 = phi i32 [ %142, %1773 ], [ 0, %0 ]
  %1883 = phi float [ %1850, %1773 ], [ %67, %0 ]
  %1884 = fsub fast float %1879, %75
  %1885 = fsub fast float %1880, %76
  %1886 = fsub fast float %1881, %77
  %1887 = fptoui float %65 to i32
  %1888 = fptoui float %66 to i32
  %1889 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %1890 = extractvalue %dx.types.CBufRet.i32 %1889, 1
  %1891 = and i32 %1890, 31
  %1892 = lshr i32 %1887, %1891
  %1893 = lshr i32 %1888, %1891
  %1894 = extractvalue %dx.types.CBufRet.i32 %1889, 3
  %1895 = mul i32 %1893, %1894
  %1896 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 239)  ; CBufferLoadLegacy(handle,regIndex)
  %1897 = extractvalue %dx.types.CBufRet.i32 %1896, 1
  %1898 = add i32 %1897, %1892
  %1899 = add i32 %1898, %1895
  %1900 = urem i32 %1899, 3
  %1901 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1902 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %56, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1903 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1901, %dx.types.Handle %1902, float %1869, float %1867, float undef, float undef, i32 0, i32 0, i32 undef, float %1861, float %1859, float undef, float %1865, float %1863, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1904 = extractvalue %dx.types.ResRet.f32 %1903, 0
  %1905 = extractvalue %dx.types.ResRet.f32 %1903, 1
  %1906 = extractvalue %dx.types.ResRet.f32 %1903, 2
  %1907 = extractvalue %dx.types.ResRet.f32 %1903, 3
  %1908 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %1909 = extractvalue %dx.types.CBufRet.f32 %1908, 0
  %1910 = extractvalue %dx.types.CBufRet.f32 %1908, 1
  %1911 = extractvalue %dx.types.CBufRet.f32 %1908, 2
  %1912 = extractvalue %dx.types.CBufRet.f32 %1908, 3
  %1913 = call float @dx.op.dot4.f32(i32 56, float %1904, float %1905, float %1906, float %1907, float %1909, float %1910, float %1911, float %1912)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1914 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %1915 = extractvalue %dx.types.CBufRet.f32 %1914, 0
  %1916 = extractvalue %dx.types.CBufRet.f32 %1914, 1
  %1917 = extractvalue %dx.types.CBufRet.f32 %1914, 2
  %1918 = extractvalue %dx.types.CBufRet.f32 %1914, 3
  %1919 = call float @dx.op.dot4.f32(i32 56, float %1904, float %1905, float %1906, float %1907, float %1915, float %1916, float %1917, float %1918)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1920 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 27)  ; CBufferLoadLegacy(handle,regIndex)
  %1921 = extractvalue %dx.types.CBufRet.f32 %1920, 0
  %1922 = extractvalue %dx.types.CBufRet.f32 %1920, 1
  %1923 = extractvalue %dx.types.CBufRet.f32 %1920, 2
  %1924 = extractvalue %dx.types.CBufRet.f32 %1920, 3
  %1925 = call float @dx.op.dot4.f32(i32 56, float %1904, float %1905, float %1906, float %1907, float %1921, float %1922, float %1923, float %1924)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1926 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1927 = extractvalue %dx.types.CBufRet.f32 %1926, 0
  %1928 = extractvalue %dx.types.CBufRet.f32 %1926, 1
  %1929 = extractvalue %dx.types.CBufRet.f32 %1926, 2
  %1930 = extractvalue %dx.types.CBufRet.f32 %1926, 3
  %1931 = call float @dx.op.dot4.f32(i32 56, float %1904, float %1905, float %1906, float %1907, float %1927, float %1928, float %1929, float %1930)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1932 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1933 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1932, %dx.types.Handle %1902, float %1869, float %1867, float undef, float undef, i32 0, i32 0, i32 undef, float %1861, float %1859, float undef, float %1865, float %1863, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1934 = extractvalue %dx.types.ResRet.f32 %1933, 0
  %1935 = extractvalue %dx.types.ResRet.f32 %1933, 1
  %1936 = extractvalue %dx.types.ResRet.f32 %1933, 2
  %1937 = extractvalue %dx.types.ResRet.f32 %1933, 3
  %1938 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1939 = extractvalue %dx.types.CBufRet.f32 %1938, 0
  %1940 = extractvalue %dx.types.CBufRet.f32 %1938, 1
  %1941 = extractvalue %dx.types.CBufRet.f32 %1938, 2
  %1942 = extractvalue %dx.types.CBufRet.f32 %1938, 3
  %1943 = call float @dx.op.dot4.f32(i32 56, float %1934, float %1935, float %1936, float %1937, float %1939, float %1940, float %1941, float %1942)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1944 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1945 = extractvalue %dx.types.CBufRet.f32 %1944, 0
  %1946 = extractvalue %dx.types.CBufRet.f32 %1944, 1
  %1947 = extractvalue %dx.types.CBufRet.f32 %1944, 2
  %1948 = extractvalue %dx.types.CBufRet.f32 %1944, 3
  %1949 = call float @dx.op.dot4.f32(i32 56, float %1934, float %1935, float %1936, float %1937, float %1945, float %1946, float %1947, float %1948)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1950 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1951 = extractvalue %dx.types.CBufRet.i32 %1950, 0
  %1952 = extractvalue %dx.types.CBufRet.i32 %1950, 1
  %1953 = extractvalue %dx.types.CBufRet.i32 %1950, 2
  %1954 = extractvalue %dx.types.CBufRet.i32 %1950, 3
  %1955 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1956 = extractvalue %dx.types.CBufRet.i32 %1955, 0
  %1957 = extractvalue %dx.types.CBufRet.i32 %1955, 1
  %1958 = extractvalue %dx.types.CBufRet.i32 %1955, 2
  %1959 = extractvalue %dx.types.CBufRet.i32 %1955, 3
  %1960 = bitcast i32 %1956 to float
  %1961 = bitcast i32 %1957 to float
  %1962 = bitcast i32 %1958 to float
  %1963 = bitcast i32 %1959 to float
  %1964 = bitcast i32 %1951 to float
  %1965 = and i32 %1952, 4095
  %1966 = lshr i32 %1952, 12
  %1967 = and i32 %1966, 4095
  %1968 = lshr i32 %1952, 24
  %1969 = and i32 %1953, 15
  %1970 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %1971 = extractvalue %dx.types.CBufRet.f32 %1970, 0
  %1972 = call float @dx.op.unary.f32(i32 21, float %1971)  ; Exp(value)
  %1973 = fmul fast float %1972, %1864
  %1974 = fmul fast float %1972, %1862
  %1975 = fmul fast float %1973, %1960
  %1976 = fmul fast float %1974, %1961
  %1977 = fmul fast float %1960, %1860
  %1978 = fmul fast float %1977, %1962
  %1979 = fmul fast float %1978, %1972
  %1980 = fmul fast float %1961, %1858
  %1981 = fmul fast float %1980, %1963
  %1982 = fmul fast float %1981, %1972
  %1983 = fmul fast float %1975, %1962
  %1984 = fmul fast float %1976, %1963
  %1985 = call float @dx.op.dot2.f32(i32 54, float %1979, float %1982, float %1979, float %1982)  ; Dot2(ax,ay,bx,by)
  %1986 = call float @dx.op.dot2.f32(i32 54, float %1983, float %1984, float %1983, float %1984)  ; Dot2(ax,ay,bx,by)
  %1987 = call float @dx.op.binary.f32(i32 36, float %1985, float %1986)  ; FMin(a,b)
  %1988 = call float @dx.op.unary.f32(i32 23, float %1987)  ; Log(value)
  %1989 = call float @dx.op.binary.f32(i32 35, float %1985, float %1986)  ; FMax(a,b)
  %1990 = call float @dx.op.unary.f32(i32 23, float %1989)  ; Log(value)
  %1991 = fmul fast float %1990, 5.000000e-01
  %1992 = fsub fast float %1990, %1988
  %1993 = fmul fast float %1992, 5.000000e-01
  %1994 = call float @dx.op.binary.f32(i32 36, float %1993, float %1964)  ; FMin(a,b)
  %1995 = fsub fast float %1991, %1994
  %1996 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %1997 = extractvalue %dx.types.CBufRet.f32 %1996, 0
  %1998 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1999 = extractvalue %dx.types.CBufRet.i32 %1998, 1
  %2000 = uitofp i32 %1999 to float
  %2001 = fmul fast float %2000, 0x4040551EC0000000
  %2002 = fmul fast float %2000, 0x4027A147A0000000
  %2003 = fadd fast float %2001, %65
  %2004 = fadd fast float %2002, %66
  %2005 = call float @dx.op.dot2.f32(i32 54, float %2003, float %2004, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %2006 = call float @dx.op.unary.f32(i32 22, float %2005)  ; Frc(value)
  %2007 = fmul fast float %2006, 0x404A7DD040000000
  %2008 = call float @dx.op.unary.f32(i32 22, float %2007)  ; Frc(value)
  %2009 = fadd fast float %1995, %1997
  %2010 = fadd fast float %2009, %2008
  %2011 = call float @dx.op.unary.f32(i32 27, float %2010)  ; Round_ni(value)
  %2012 = fptosi float %2011 to i32
  %2013 = add nsw i32 %2012, %1968
  %2014 = fmul fast float %1960, %1868
  %2015 = fmul fast float %1961, %1866
  %2016 = call float @dx.op.unary.f32(i32 22, float %2014)  ; Frc(value)
  %2017 = call float @dx.op.unary.f32(i32 22, float %2015)  ; Frc(value)
  %2018 = fmul fast float %2016, %1962
  %2019 = fmul fast float %2017, %1963
  %2020 = call i32 @dx.op.binary.i32(i32 37, i32 %2013, i32 0)  ; IMax(a,b)
  %2021 = call i32 @dx.op.binary.i32(i32 38, i32 %2020, i32 %1969)  ; IMin(a,b)
  %2022 = fptoui float %2018 to i32
  %2023 = add i32 %2022, %1965
  %2024 = and i32 %2021, 31
  %2025 = lshr i32 %2023, %2024
  %2026 = fptoui float %2019 to i32
  %2027 = add i32 %2026, %1967
  %2028 = lshr i32 %2027, %2024
  %2029 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2030 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2029, i32 %2021, i32 %2025, i32 %2028, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2031 = extractvalue %dx.types.ResRet.i32 %2030, 0
  %2032 = extractvalue %dx.types.ResRet.i32 %2030, 1
  %2033 = extractvalue %dx.types.ResRet.i32 %2030, 2
  %2034 = extractvalue %dx.types.ResRet.i32 %2030, 3
  %2035 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2036 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2035, i32 %2021, i32 %2025, i32 %2028, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2037 = extractvalue %dx.types.ResRet.i32 %2036, 0
  %2038 = extractvalue %dx.types.ResRet.i32 %2036, 1
  %2039 = extractvalue %dx.types.ResRet.i32 %2036, 2
  %2040 = extractvalue %dx.types.ResRet.i32 %2036, 3
  %2041 = or i32 %2025, %1954
  %2042 = shl i32 %2028, 12
  %2043 = or i32 %2041, %2042
  %2044 = add nuw nsw i32 %1969, 1
  %2045 = add nsw i32 %2013, 1
  %2046 = call i32 @dx.op.binary.i32(i32 37, i32 %2045, i32 0)  ; IMax(a,b)
  %2047 = call i32 @dx.op.binary.i32(i32 38, i32 %2046, i32 %2044)  ; IMin(a,b)
  %2048 = shl i32 %2047, 24
  %2049 = or i32 %2043, %2048
  %2050 = icmp eq i32 %1900, 0
  %2051 = select i1 %2050, i32 %2049, i32 -1
  %2052 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2053 = extractvalue %dx.types.CBufRet.i32 %2052, 0
  %2054 = extractvalue %dx.types.CBufRet.i32 %2052, 1
  %2055 = extractvalue %dx.types.CBufRet.i32 %2052, 2
  %2056 = extractvalue %dx.types.CBufRet.i32 %2052, 3
  %2057 = bitcast i32 %2056 to float
  %2058 = call float @dx.op.unary.f32(i32 6, float %2057)  ; FAbs(value)
  %2059 = bitcast i32 %2054 to float
  %2060 = bitcast i32 %2055 to float
  %2061 = fcmp fast ogt float %2057, 0.000000e+00
  %2062 = lshr i32 %2053, 8
  %2063 = and i32 %2062, 255
  %2064 = uitofp i32 %2063 to float
  %2065 = fmul fast float %2064, 0x3F70101020000000
  %2066 = lshr i32 %2053, 16
  %2067 = and i32 %2066, 255
  %2068 = uitofp i32 %2067 to float
  %2069 = fmul fast float %2068, 0x3F70101020000000
  %2070 = and i32 %2031, 15
  %2071 = lshr i32 4096, %2070
  %2072 = uitofp i32 %2071 to float
  %2073 = fmul fast float %2072, 0x3F30000000000000
  %2074 = lshr i32 %2031, 4
  %2075 = select i1 %2061, i32 255, i32 63
  %2076 = and i32 %2074, %2075
  %2077 = lshr i32 %2031, 12
  %2078 = and i32 %2077, 255
  %2079 = lshr i32 %2031, 10
  %2080 = and i32 %2079, 63
  %2081 = select i1 %2061, i32 %2078, i32 %2080
  %2082 = fmul fast float %2073, %2018
  %2083 = fmul fast float %2073, %2019
  %2084 = call float @dx.op.unary.f32(i32 22, float %2082)  ; Frc(value)
  %2085 = call float @dx.op.unary.f32(i32 22, float %2083)  ; Frc(value)
  %2086 = uitofp i32 %2076 to float
  %2087 = uitofp i32 %2081 to float
  %2088 = fmul fast float %2086, %2058
  %2089 = fmul fast float %2087, %2058
  %2090 = fmul fast float %2084, %2059
  %2091 = fmul fast float %2085, %2059
  %2092 = fadd fast float %2090, %2060
  %2093 = fadd fast float %2091, %2060
  %2094 = fadd fast float %2092, %2088
  %2095 = fadd fast float %2093, %2089
  %2096 = icmp ugt i32 %2031, 15
  %2097 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2098 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %54, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2099 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2097, %dx.types.Handle %2098, float %2094, float %2095, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2100 = extractvalue %dx.types.ResRet.f32 %2099, 0
  %2101 = extractvalue %dx.types.ResRet.f32 %2099, 1
  %2102 = select i1 %2096, float %2100, float %2069
  %2103 = select i1 %2096, float %2101, float %2065
  %2104 = fmul fast float %2102, 2.000000e+00
  %2105 = fmul fast float %2103, 2.000000e+00
  %2106 = fadd fast float %2104, -1.000000e+00
  %2107 = fadd fast float %2105, -1.000000e+00
  %2108 = call float @dx.op.dot2.f32(i32 54, float %2106, float %2107, float %2106, float %2107)  ; Dot2(ax,ay,bx,by)
  %2109 = fsub fast float 1.000000e+00, %2108
  %2110 = call float @dx.op.unary.f32(i32 7, float %2109)  ; Saturate(value)
  %2111 = call float @dx.op.unary.f32(i32 24, float %2110)  ; Sqrt(value)
  %2112 = fmul fast float %2106, %1913
  %2113 = fmul fast float %2107, %1913
  %2114 = fmul fast float %2111, %1913
  %2115 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2116 = extractvalue %dx.types.CBufRet.i32 %2115, 0
  %2117 = extractvalue %dx.types.CBufRet.i32 %2115, 1
  %2118 = extractvalue %dx.types.CBufRet.i32 %2115, 2
  %2119 = extractvalue %dx.types.CBufRet.i32 %2115, 3
  %2120 = bitcast i32 %2119 to float
  %2121 = call float @dx.op.unary.f32(i32 6, float %2120)  ; FAbs(value)
  %2122 = bitcast i32 %2117 to float
  %2123 = bitcast i32 %2118 to float
  %2124 = fcmp fast ogt float %2120, 0.000000e+00
  %2125 = lshr i32 %2116, 8
  %2126 = and i32 %2125, 255
  %2127 = uitofp i32 %2126 to float
  %2128 = fmul fast float %2127, 0x3F70101020000000
  %2129 = lshr i32 %2116, 16
  %2130 = and i32 %2129, 255
  %2131 = uitofp i32 %2130 to float
  %2132 = fmul fast float %2131, 0x3F70101020000000
  %2133 = and i32 %2032, 15
  %2134 = lshr i32 4096, %2133
  %2135 = uitofp i32 %2134 to float
  %2136 = fmul fast float %2135, 0x3F30000000000000
  %2137 = lshr i32 %2032, 4
  %2138 = select i1 %2124, i32 255, i32 63
  %2139 = and i32 %2137, %2138
  %2140 = lshr i32 %2032, 12
  %2141 = and i32 %2140, 255
  %2142 = lshr i32 %2032, 10
  %2143 = and i32 %2142, 63
  %2144 = select i1 %2124, i32 %2141, i32 %2143
  %2145 = fmul fast float %2136, %2018
  %2146 = fmul fast float %2136, %2019
  %2147 = call float @dx.op.unary.f32(i32 22, float %2145)  ; Frc(value)
  %2148 = call float @dx.op.unary.f32(i32 22, float %2146)  ; Frc(value)
  %2149 = uitofp i32 %2139 to float
  %2150 = uitofp i32 %2144 to float
  %2151 = fmul fast float %2149, %2121
  %2152 = fmul fast float %2150, %2121
  %2153 = fmul fast float %2147, %2122
  %2154 = fmul fast float %2148, %2122
  %2155 = fadd fast float %2153, %2123
  %2156 = fadd fast float %2154, %2123
  %2157 = fadd fast float %2155, %2151
  %2158 = fadd fast float %2156, %2152
  %2159 = icmp ugt i32 %2032, 15
  %2160 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2161 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %53, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2162 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2160, %dx.types.Handle %2161, float %2157, float %2158, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2163 = extractvalue %dx.types.ResRet.f32 %2162, 0
  %2164 = extractvalue %dx.types.ResRet.f32 %2162, 1
  %2165 = select i1 %2159, float %2163, float %2132
  %2166 = select i1 %2159, float %2164, float %2128
  %2167 = fmul fast float %2165, 2.000000e+00
  %2168 = fmul fast float %2166, 2.000000e+00
  %2169 = fadd fast float %2167, -1.000000e+00
  %2170 = fadd fast float %2168, -1.000000e+00
  %2171 = call float @dx.op.dot2.f32(i32 54, float %2169, float %2170, float %2169, float %2170)  ; Dot2(ax,ay,bx,by)
  %2172 = fsub fast float 1.000000e+00, %2171
  %2173 = call float @dx.op.unary.f32(i32 7, float %2172)  ; Saturate(value)
  %2174 = call float @dx.op.unary.f32(i32 24, float %2173)  ; Sqrt(value)
  %2175 = fmul fast float %2169, %1919
  %2176 = fmul fast float %2170, %1919
  %2177 = fmul fast float %2174, %1919
  %2178 = fadd fast float %2175, %2112
  %2179 = fadd fast float %2176, %2113
  %2180 = fadd fast float %2177, %2114
  %2181 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2182 = extractvalue %dx.types.CBufRet.i32 %2181, 0
  %2183 = extractvalue %dx.types.CBufRet.i32 %2181, 1
  %2184 = extractvalue %dx.types.CBufRet.i32 %2181, 2
  %2185 = extractvalue %dx.types.CBufRet.i32 %2181, 3
  %2186 = bitcast i32 %2185 to float
  %2187 = call float @dx.op.unary.f32(i32 6, float %2186)  ; FAbs(value)
  %2188 = bitcast i32 %2183 to float
  %2189 = bitcast i32 %2184 to float
  %2190 = fcmp fast ogt float %2186, 0.000000e+00
  %2191 = lshr i32 %2182, 8
  %2192 = and i32 %2191, 255
  %2193 = uitofp i32 %2192 to float
  %2194 = fmul fast float %2193, 0x3F70101020000000
  %2195 = lshr i32 %2182, 16
  %2196 = and i32 %2195, 255
  %2197 = uitofp i32 %2196 to float
  %2198 = fmul fast float %2197, 0x3F70101020000000
  %2199 = and i32 %2033, 15
  %2200 = lshr i32 4096, %2199
  %2201 = uitofp i32 %2200 to float
  %2202 = fmul fast float %2201, 0x3F30000000000000
  %2203 = lshr i32 %2033, 4
  %2204 = select i1 %2190, i32 255, i32 63
  %2205 = and i32 %2203, %2204
  %2206 = lshr i32 %2033, 12
  %2207 = and i32 %2206, 255
  %2208 = lshr i32 %2033, 10
  %2209 = and i32 %2208, 63
  %2210 = select i1 %2190, i32 %2207, i32 %2209
  %2211 = fmul fast float %2202, %2018
  %2212 = fmul fast float %2202, %2019
  %2213 = call float @dx.op.unary.f32(i32 22, float %2211)  ; Frc(value)
  %2214 = call float @dx.op.unary.f32(i32 22, float %2212)  ; Frc(value)
  %2215 = uitofp i32 %2205 to float
  %2216 = uitofp i32 %2210 to float
  %2217 = fmul fast float %2215, %2187
  %2218 = fmul fast float %2216, %2187
  %2219 = fmul fast float %2213, %2188
  %2220 = fmul fast float %2214, %2188
  %2221 = fadd fast float %2219, %2189
  %2222 = fadd fast float %2220, %2189
  %2223 = fadd fast float %2221, %2217
  %2224 = fadd fast float %2222, %2218
  %2225 = icmp ugt i32 %2033, 15
  %2226 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2227 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %52, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2228 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2226, %dx.types.Handle %2227, float %2223, float %2224, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2229 = extractvalue %dx.types.ResRet.f32 %2228, 0
  %2230 = extractvalue %dx.types.ResRet.f32 %2228, 1
  %2231 = select i1 %2225, float %2229, float %2198
  %2232 = select i1 %2225, float %2230, float %2194
  %2233 = fmul fast float %2231, 2.000000e+00
  %2234 = fmul fast float %2232, 2.000000e+00
  %2235 = fadd fast float %2233, -1.000000e+00
  %2236 = fadd fast float %2234, -1.000000e+00
  %2237 = call float @dx.op.dot2.f32(i32 54, float %2235, float %2236, float %2235, float %2236)  ; Dot2(ax,ay,bx,by)
  %2238 = fsub fast float 1.000000e+00, %2237
  %2239 = call float @dx.op.unary.f32(i32 7, float %2238)  ; Saturate(value)
  %2240 = call float @dx.op.unary.f32(i32 24, float %2239)  ; Sqrt(value)
  %2241 = fmul fast float %2235, %1925
  %2242 = fmul fast float %2236, %1925
  %2243 = fmul fast float %2240, %1925
  %2244 = fadd fast float %2178, %2241
  %2245 = fadd fast float %2179, %2242
  %2246 = fadd fast float %2180, %2243
  %2247 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2248 = extractvalue %dx.types.CBufRet.i32 %2247, 0
  %2249 = extractvalue %dx.types.CBufRet.i32 %2247, 1
  %2250 = extractvalue %dx.types.CBufRet.i32 %2247, 2
  %2251 = extractvalue %dx.types.CBufRet.i32 %2247, 3
  %2252 = bitcast i32 %2251 to float
  %2253 = call float @dx.op.unary.f32(i32 6, float %2252)  ; FAbs(value)
  %2254 = bitcast i32 %2249 to float
  %2255 = bitcast i32 %2250 to float
  %2256 = fcmp fast ogt float %2252, 0.000000e+00
  %2257 = lshr i32 %2248, 8
  %2258 = and i32 %2257, 255
  %2259 = uitofp i32 %2258 to float
  %2260 = fmul fast float %2259, 0x3F70101020000000
  %2261 = lshr i32 %2248, 16
  %2262 = and i32 %2261, 255
  %2263 = uitofp i32 %2262 to float
  %2264 = fmul fast float %2263, 0x3F70101020000000
  %2265 = and i32 %2034, 15
  %2266 = lshr i32 4096, %2265
  %2267 = uitofp i32 %2266 to float
  %2268 = fmul fast float %2267, 0x3F30000000000000
  %2269 = lshr i32 %2034, 4
  %2270 = select i1 %2256, i32 255, i32 63
  %2271 = and i32 %2269, %2270
  %2272 = lshr i32 %2034, 12
  %2273 = and i32 %2272, 255
  %2274 = lshr i32 %2034, 10
  %2275 = and i32 %2274, 63
  %2276 = select i1 %2256, i32 %2273, i32 %2275
  %2277 = fmul fast float %2268, %2018
  %2278 = fmul fast float %2268, %2019
  %2279 = call float @dx.op.unary.f32(i32 22, float %2277)  ; Frc(value)
  %2280 = call float @dx.op.unary.f32(i32 22, float %2278)  ; Frc(value)
  %2281 = uitofp i32 %2271 to float
  %2282 = uitofp i32 %2276 to float
  %2283 = fmul fast float %2281, %2253
  %2284 = fmul fast float %2282, %2253
  %2285 = fmul fast float %2279, %2254
  %2286 = fmul fast float %2280, %2254
  %2287 = fadd fast float %2285, %2255
  %2288 = fadd fast float %2286, %2255
  %2289 = fadd fast float %2287, %2283
  %2290 = fadd fast float %2288, %2284
  %2291 = icmp ugt i32 %2034, 15
  %2292 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2293 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %51, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2294 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2292, %dx.types.Handle %2293, float %2289, float %2290, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2295 = extractvalue %dx.types.ResRet.f32 %2294, 0
  %2296 = extractvalue %dx.types.ResRet.f32 %2294, 1
  %2297 = select i1 %2291, float %2295, float %2264
  %2298 = select i1 %2291, float %2296, float %2260
  %2299 = fmul fast float %2297, 2.000000e+00
  %2300 = fmul fast float %2298, 2.000000e+00
  %2301 = fadd fast float %2299, -1.000000e+00
  %2302 = fadd fast float %2300, -1.000000e+00
  %2303 = call float @dx.op.dot2.f32(i32 54, float %2301, float %2302, float %2301, float %2302)  ; Dot2(ax,ay,bx,by)
  %2304 = fsub fast float 1.000000e+00, %2303
  %2305 = call float @dx.op.unary.f32(i32 7, float %2304)  ; Saturate(value)
  %2306 = call float @dx.op.unary.f32(i32 24, float %2305)  ; Sqrt(value)
  %2307 = fmul fast float %2301, %1931
  %2308 = fmul fast float %2302, %1931
  %2309 = fmul fast float %2306, %1931
  %2310 = fadd fast float %2244, %2307
  %2311 = fadd fast float %2245, %2308
  %2312 = fadd fast float %2246, %2309
  %2313 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2314 = extractvalue %dx.types.CBufRet.i32 %2313, 0
  %2315 = extractvalue %dx.types.CBufRet.i32 %2313, 1
  %2316 = extractvalue %dx.types.CBufRet.i32 %2313, 2
  %2317 = extractvalue %dx.types.CBufRet.i32 %2313, 3
  %2318 = bitcast i32 %2317 to float
  %2319 = call float @dx.op.unary.f32(i32 6, float %2318)  ; FAbs(value)
  %2320 = bitcast i32 %2315 to float
  %2321 = bitcast i32 %2316 to float
  %2322 = fcmp fast ogt float %2318, 0.000000e+00
  %2323 = lshr i32 %2314, 8
  %2324 = and i32 %2323, 255
  %2325 = uitofp i32 %2324 to float
  %2326 = fmul fast float %2325, 0x3F70101020000000
  %2327 = lshr i32 %2314, 16
  %2328 = and i32 %2327, 255
  %2329 = uitofp i32 %2328 to float
  %2330 = fmul fast float %2329, 0x3F70101020000000
  %2331 = and i32 %2037, 15
  %2332 = lshr i32 4096, %2331
  %2333 = uitofp i32 %2332 to float
  %2334 = fmul fast float %2333, 0x3F30000000000000
  %2335 = lshr i32 %2037, 4
  %2336 = select i1 %2322, i32 255, i32 63
  %2337 = and i32 %2335, %2336
  %2338 = lshr i32 %2037, 12
  %2339 = and i32 %2338, 255
  %2340 = lshr i32 %2037, 10
  %2341 = and i32 %2340, 63
  %2342 = select i1 %2322, i32 %2339, i32 %2341
  %2343 = fmul fast float %2334, %2018
  %2344 = fmul fast float %2334, %2019
  %2345 = call float @dx.op.unary.f32(i32 22, float %2343)  ; Frc(value)
  %2346 = call float @dx.op.unary.f32(i32 22, float %2344)  ; Frc(value)
  %2347 = uitofp i32 %2337 to float
  %2348 = uitofp i32 %2342 to float
  %2349 = fmul fast float %2347, %2319
  %2350 = fmul fast float %2348, %2319
  %2351 = fmul fast float %2345, %2320
  %2352 = fmul fast float %2346, %2320
  %2353 = fadd fast float %2351, %2321
  %2354 = fadd fast float %2352, %2321
  %2355 = fadd fast float %2353, %2349
  %2356 = fadd fast float %2354, %2350
  %2357 = icmp ugt i32 %2037, 15
  %2358 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2359 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %50, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2360 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2358, %dx.types.Handle %2359, float %2355, float %2356, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2361 = extractvalue %dx.types.ResRet.f32 %2360, 0
  %2362 = extractvalue %dx.types.ResRet.f32 %2360, 1
  %2363 = select i1 %2357, float %2361, float %2330
  %2364 = select i1 %2357, float %2362, float %2326
  %2365 = fmul fast float %2363, 2.000000e+00
  %2366 = fmul fast float %2364, 2.000000e+00
  %2367 = fadd fast float %2365, -1.000000e+00
  %2368 = fadd fast float %2366, -1.000000e+00
  %2369 = call float @dx.op.dot2.f32(i32 54, float %2367, float %2368, float %2367, float %2368)  ; Dot2(ax,ay,bx,by)
  %2370 = fsub fast float 1.000000e+00, %2369
  %2371 = call float @dx.op.unary.f32(i32 7, float %2370)  ; Saturate(value)
  %2372 = call float @dx.op.unary.f32(i32 24, float %2371)  ; Sqrt(value)
  %2373 = fmul fast float %2367, %1943
  %2374 = fmul fast float %2368, %1943
  %2375 = fmul fast float %2372, %1943
  %2376 = fadd fast float %2310, %2373
  %2377 = fadd fast float %2311, %2374
  %2378 = fadd fast float %2312, %2375
  %2379 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %2380 = extractvalue %dx.types.CBufRet.i32 %2379, 0
  %2381 = extractvalue %dx.types.CBufRet.i32 %2379, 1
  %2382 = extractvalue %dx.types.CBufRet.i32 %2379, 2
  %2383 = extractvalue %dx.types.CBufRet.i32 %2379, 3
  %2384 = bitcast i32 %2383 to float
  %2385 = call float @dx.op.unary.f32(i32 6, float %2384)  ; FAbs(value)
  %2386 = bitcast i32 %2381 to float
  %2387 = bitcast i32 %2382 to float
  %2388 = fcmp fast ogt float %2384, 0.000000e+00
  %2389 = lshr i32 %2380, 8
  %2390 = and i32 %2389, 255
  %2391 = uitofp i32 %2390 to float
  %2392 = fmul fast float %2391, 0x3F70101020000000
  %2393 = lshr i32 %2380, 16
  %2394 = and i32 %2393, 255
  %2395 = uitofp i32 %2394 to float
  %2396 = fmul fast float %2395, 0x3F70101020000000
  %2397 = and i32 %2038, 15
  %2398 = lshr i32 4096, %2397
  %2399 = uitofp i32 %2398 to float
  %2400 = fmul fast float %2399, 0x3F30000000000000
  %2401 = lshr i32 %2038, 4
  %2402 = select i1 %2388, i32 255, i32 63
  %2403 = and i32 %2401, %2402
  %2404 = lshr i32 %2038, 12
  %2405 = and i32 %2404, 255
  %2406 = lshr i32 %2038, 10
  %2407 = and i32 %2406, 63
  %2408 = select i1 %2388, i32 %2405, i32 %2407
  %2409 = fmul fast float %2400, %2018
  %2410 = fmul fast float %2400, %2019
  %2411 = call float @dx.op.unary.f32(i32 22, float %2409)  ; Frc(value)
  %2412 = call float @dx.op.unary.f32(i32 22, float %2410)  ; Frc(value)
  %2413 = uitofp i32 %2403 to float
  %2414 = uitofp i32 %2408 to float
  %2415 = fmul fast float %2413, %2385
  %2416 = fmul fast float %2414, %2385
  %2417 = fmul fast float %2411, %2386
  %2418 = fmul fast float %2412, %2386
  %2419 = fadd fast float %2417, %2387
  %2420 = fadd fast float %2418, %2387
  %2421 = fadd fast float %2419, %2415
  %2422 = fadd fast float %2420, %2416
  %2423 = icmp ugt i32 %2038, 15
  %2424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2425 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2426 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2424, %dx.types.Handle %2425, float %2421, float %2422, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2427 = extractvalue %dx.types.ResRet.f32 %2426, 0
  %2428 = extractvalue %dx.types.ResRet.f32 %2426, 1
  %2429 = select i1 %2423, float %2427, float %2396
  %2430 = select i1 %2423, float %2428, float %2392
  %2431 = fmul fast float %2429, 2.000000e+00
  %2432 = fmul fast float %2430, 2.000000e+00
  %2433 = fadd fast float %2431, -1.000000e+00
  %2434 = fadd fast float %2432, -1.000000e+00
  %2435 = call float @dx.op.dot2.f32(i32 54, float %2433, float %2434, float %2433, float %2434)  ; Dot2(ax,ay,bx,by)
  %2436 = fsub fast float 1.000000e+00, %2435
  %2437 = call float @dx.op.unary.f32(i32 7, float %2436)  ; Saturate(value)
  %2438 = call float @dx.op.unary.f32(i32 24, float %2437)  ; Sqrt(value)
  %2439 = fmul fast float %2433, %1949
  %2440 = fmul fast float %2434, %1949
  %2441 = fmul fast float %2438, %1949
  %2442 = fadd fast float %2376, %2439
  %2443 = fadd fast float %2377, %2440
  %2444 = fadd fast float %2378, %2441
  %2445 = fmul fast float %2442, %82
  %2446 = fmul fast float %2443, %82
  %2447 = fmul fast float %2444, %82
  %2448 = fadd fast float %2445, %79
  %2449 = fadd fast float %2446, %80
  %2450 = fadd fast float %2447, %81
  %2451 = call float @dx.op.dot3.f32(i32 55, float %2448, float %2449, float %2450, float %2448, float %2449, float %2450)  ; Dot3(ax,ay,az,bx,by,bz)
  %2452 = call float @dx.op.unary.f32(i32 25, float %2451)  ; Rsqrt(value)
  %2453 = fmul fast float %2448, %2452
  %2454 = fmul fast float %2449, %2452
  %2455 = fmul fast float %2450, %2452
  %2456 = fmul fast float %2453, %1870
  %2457 = call float @dx.op.tertiary.f32(i32 46, float %2454, float %1873, float %2456)  ; FMad(a,b,c)
  %2458 = call float @dx.op.tertiary.f32(i32 46, float %2455, float %1876, float %2457)  ; FMad(a,b,c)
  %2459 = fmul fast float %2453, %1871
  %2460 = call float @dx.op.tertiary.f32(i32 46, float %2454, float %1874, float %2459)  ; FMad(a,b,c)
  %2461 = call float @dx.op.tertiary.f32(i32 46, float %2455, float %1877, float %2460)  ; FMad(a,b,c)
  %2462 = fmul fast float %2453, %1872
  %2463 = call float @dx.op.tertiary.f32(i32 46, float %2454, float %1875, float %2462)  ; FMad(a,b,c)
  %2464 = call float @dx.op.tertiary.f32(i32 46, float %2455, float %1878, float %2463)  ; FMad(a,b,c)
  %2465 = call float @dx.op.dot3.f32(i32 55, float %2458, float %2461, float %2464, float %2458, float %2461, float %2464)  ; Dot3(ax,ay,az,bx,by,bz)
  %2466 = call float @dx.op.unary.f32(i32 25, float %2465)  ; Rsqrt(value)
  %2467 = fmul fast float %2466, %2458
  %2468 = fmul fast float %2466, %2461
  %2469 = fmul fast float %2466, %2464
  %2470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %2471 = extractvalue %dx.types.CBufRet.f32 %2470, 0
  %2472 = extractvalue %dx.types.CBufRet.f32 %2470, 1
  %2473 = extractvalue %dx.types.CBufRet.f32 %2470, 2
  %2474 = extractvalue %dx.types.CBufRet.f32 %2470, 3
  %2475 = fmul fast float %2472, %2471
  %2476 = fmul fast float %2473, %2471
  %2477 = fmul fast float %2474, %2471
  %2478 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %2479 = extractvalue %dx.types.CBufRet.i32 %2478, 0
  %2480 = extractvalue %dx.types.CBufRet.i32 %2478, 1
  %2481 = extractvalue %dx.types.CBufRet.i32 %2478, 2
  %2482 = extractvalue %dx.types.CBufRet.i32 %2478, 3
  %2483 = bitcast i32 %2482 to float
  %2484 = call float @dx.op.unary.f32(i32 6, float %2483)  ; FAbs(value)
  %2485 = bitcast i32 %2480 to float
  %2486 = bitcast i32 %2481 to float
  %2487 = fcmp fast ogt float %2483, 0.000000e+00
  %2488 = and i32 %2479, 255
  %2489 = uitofp i32 %2488 to float
  %2490 = fmul fast float %2489, 0x3F70101020000000
  %2491 = lshr i32 %2479, 8
  %2492 = and i32 %2491, 255
  %2493 = uitofp i32 %2492 to float
  %2494 = fmul fast float %2493, 0x3F70101020000000
  %2495 = lshr i32 %2479, 16
  %2496 = and i32 %2495, 255
  %2497 = uitofp i32 %2496 to float
  %2498 = fmul fast float %2497, 0x3F70101020000000
  %2499 = and i32 %2039, 15
  %2500 = lshr i32 4096, %2499
  %2501 = uitofp i32 %2500 to float
  %2502 = fmul fast float %2501, 0x3F30000000000000
  %2503 = lshr i32 %2039, 4
  %2504 = select i1 %2487, i32 255, i32 63
  %2505 = and i32 %2503, %2504
  %2506 = lshr i32 %2039, 12
  %2507 = and i32 %2506, 255
  %2508 = lshr i32 %2039, 10
  %2509 = and i32 %2508, 63
  %2510 = select i1 %2487, i32 %2507, i32 %2509
  %2511 = fmul fast float %2502, %2018
  %2512 = fmul fast float %2502, %2019
  %2513 = call float @dx.op.unary.f32(i32 22, float %2511)  ; Frc(value)
  %2514 = call float @dx.op.unary.f32(i32 22, float %2512)  ; Frc(value)
  %2515 = uitofp i32 %2505 to float
  %2516 = uitofp i32 %2510 to float
  %2517 = fmul fast float %2515, %2484
  %2518 = fmul fast float %2516, %2484
  %2519 = fmul fast float %2513, %2485
  %2520 = fmul fast float %2514, %2485
  %2521 = fadd fast float %2519, %2486
  %2522 = fadd fast float %2520, %2486
  %2523 = fadd fast float %2521, %2517
  %2524 = fadd fast float %2522, %2518
  %2525 = icmp ugt i32 %2039, 15
  %2526 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2527 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %48, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2528 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2526, %dx.types.Handle %2527, float %2523, float %2524, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2529 = extractvalue %dx.types.ResRet.f32 %2528, 0
  %2530 = extractvalue %dx.types.ResRet.f32 %2528, 1
  %2531 = extractvalue %dx.types.ResRet.f32 %2528, 2
  %2532 = select i1 %2525, float %2529, float %2498
  %2533 = select i1 %2525, float %2530, float %2494
  %2534 = select i1 %2525, float %2531, float %2490
  %2535 = fmul fast float %2532, %1913
  %2536 = fmul fast float %2533, %1913
  %2537 = fmul fast float %2534, %1913
  %2538 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %2539 = extractvalue %dx.types.CBufRet.i32 %2538, 0
  %2540 = extractvalue %dx.types.CBufRet.i32 %2538, 1
  %2541 = extractvalue %dx.types.CBufRet.i32 %2538, 2
  %2542 = extractvalue %dx.types.CBufRet.i32 %2538, 3
  %2543 = bitcast i32 %2542 to float
  %2544 = call float @dx.op.unary.f32(i32 6, float %2543)  ; FAbs(value)
  %2545 = bitcast i32 %2540 to float
  %2546 = bitcast i32 %2541 to float
  %2547 = fcmp fast ogt float %2543, 0.000000e+00
  %2548 = and i32 %2539, 255
  %2549 = uitofp i32 %2548 to float
  %2550 = fmul fast float %2549, 0x3F70101020000000
  %2551 = lshr i32 %2539, 8
  %2552 = and i32 %2551, 255
  %2553 = uitofp i32 %2552 to float
  %2554 = fmul fast float %2553, 0x3F70101020000000
  %2555 = lshr i32 %2539, 16
  %2556 = and i32 %2555, 255
  %2557 = uitofp i32 %2556 to float
  %2558 = fmul fast float %2557, 0x3F70101020000000
  %2559 = and i32 %2040, 15
  %2560 = lshr i32 4096, %2559
  %2561 = uitofp i32 %2560 to float
  %2562 = fmul fast float %2561, 0x3F30000000000000
  %2563 = lshr i32 %2040, 4
  %2564 = select i1 %2547, i32 255, i32 63
  %2565 = and i32 %2563, %2564
  %2566 = lshr i32 %2040, 12
  %2567 = and i32 %2566, 255
  %2568 = lshr i32 %2040, 10
  %2569 = and i32 %2568, 63
  %2570 = select i1 %2547, i32 %2567, i32 %2569
  %2571 = fmul fast float %2562, %2018
  %2572 = fmul fast float %2562, %2019
  %2573 = call float @dx.op.unary.f32(i32 22, float %2571)  ; Frc(value)
  %2574 = call float @dx.op.unary.f32(i32 22, float %2572)  ; Frc(value)
  %2575 = uitofp i32 %2565 to float
  %2576 = uitofp i32 %2570 to float
  %2577 = fmul fast float %2575, %2544
  %2578 = fmul fast float %2576, %2544
  %2579 = fmul fast float %2573, %2545
  %2580 = fmul fast float %2574, %2545
  %2581 = fadd fast float %2579, %2546
  %2582 = fadd fast float %2580, %2546
  %2583 = fadd fast float %2581, %2577
  %2584 = fadd fast float %2582, %2578
  %2585 = icmp ugt i32 %2040, 15
  %2586 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2587 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2588 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2586, %dx.types.Handle %2587, float %2583, float %2584, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2589 = extractvalue %dx.types.ResRet.f32 %2588, 0
  %2590 = extractvalue %dx.types.ResRet.f32 %2588, 1
  %2591 = extractvalue %dx.types.ResRet.f32 %2588, 2
  %2592 = select i1 %2585, float %2589, float %2558
  %2593 = select i1 %2585, float %2590, float %2554
  %2594 = select i1 %2585, float %2591, float %2550
  %2595 = fmul fast float %2592, %1919
  %2596 = fmul fast float %2593, %1919
  %2597 = fmul fast float %2594, %1919
  %2598 = fadd fast float %2595, %2535
  %2599 = fadd fast float %2596, %2536
  %2600 = fadd fast float %2597, %2537
  %2601 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2602 = extractvalue %dx.types.CBufRet.i32 %2601, 0
  %2603 = extractvalue %dx.types.CBufRet.i32 %2601, 1
  %2604 = extractvalue %dx.types.CBufRet.i32 %2601, 2
  %2605 = extractvalue %dx.types.CBufRet.i32 %2601, 3
  %2606 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2607 = extractvalue %dx.types.CBufRet.i32 %2606, 0
  %2608 = extractvalue %dx.types.CBufRet.i32 %2606, 1
  %2609 = extractvalue %dx.types.CBufRet.i32 %2606, 2
  %2610 = extractvalue %dx.types.CBufRet.i32 %2606, 3
  %2611 = bitcast i32 %2607 to float
  %2612 = bitcast i32 %2608 to float
  %2613 = bitcast i32 %2609 to float
  %2614 = bitcast i32 %2610 to float
  %2615 = bitcast i32 %2602 to float
  %2616 = and i32 %2603, 4095
  %2617 = lshr i32 %2603, 12
  %2618 = and i32 %2617, 4095
  %2619 = lshr i32 %2603, 24
  %2620 = and i32 %2604, 15
  %2621 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %2622 = extractvalue %dx.types.CBufRet.f32 %2621, 0
  %2623 = call float @dx.op.unary.f32(i32 21, float %2622)  ; Exp(value)
  %2624 = fmul fast float %2623, %1864
  %2625 = fmul fast float %2623, %1862
  %2626 = fmul fast float %2624, %2611
  %2627 = fmul fast float %2625, %2612
  %2628 = fmul fast float %2611, %1860
  %2629 = fmul fast float %2628, %2613
  %2630 = fmul fast float %2629, %2623
  %2631 = fmul fast float %2612, %1858
  %2632 = fmul fast float %2631, %2614
  %2633 = fmul fast float %2632, %2623
  %2634 = fmul fast float %2626, %2613
  %2635 = fmul fast float %2627, %2614
  %2636 = call float @dx.op.dot2.f32(i32 54, float %2630, float %2633, float %2630, float %2633)  ; Dot2(ax,ay,bx,by)
  %2637 = call float @dx.op.dot2.f32(i32 54, float %2634, float %2635, float %2634, float %2635)  ; Dot2(ax,ay,bx,by)
  %2638 = call float @dx.op.binary.f32(i32 36, float %2636, float %2637)  ; FMin(a,b)
  %2639 = call float @dx.op.unary.f32(i32 23, float %2638)  ; Log(value)
  %2640 = call float @dx.op.binary.f32(i32 35, float %2636, float %2637)  ; FMax(a,b)
  %2641 = call float @dx.op.unary.f32(i32 23, float %2640)  ; Log(value)
  %2642 = fmul fast float %2641, 5.000000e-01
  %2643 = fsub fast float %2641, %2639
  %2644 = fmul fast float %2643, 5.000000e-01
  %2645 = call float @dx.op.binary.f32(i32 36, float %2644, float %2615)  ; FMin(a,b)
  %2646 = fsub fast float %2642, %2645
  %2647 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %2648 = extractvalue %dx.types.CBufRet.f32 %2647, 0
  %2649 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2650 = extractvalue %dx.types.CBufRet.i32 %2649, 1
  %2651 = uitofp i32 %2650 to float
  %2652 = fmul fast float %2651, 0x4040551EC0000000
  %2653 = fmul fast float %2651, 0x4027A147A0000000
  %2654 = fadd fast float %2652, %65
  %2655 = fadd fast float %2653, %66
  %2656 = call float @dx.op.dot2.f32(i32 54, float %2654, float %2655, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %2657 = call float @dx.op.unary.f32(i32 22, float %2656)  ; Frc(value)
  %2658 = fmul fast float %2657, 0x404A7DD040000000
  %2659 = call float @dx.op.unary.f32(i32 22, float %2658)  ; Frc(value)
  %2660 = fadd fast float %2646, %2648
  %2661 = fadd fast float %2660, %2659
  %2662 = call float @dx.op.unary.f32(i32 27, float %2661)  ; Round_ni(value)
  %2663 = fptosi float %2662 to i32
  %2664 = add nsw i32 %2663, %2619
  %2665 = fmul fast float %2611, %1868
  %2666 = fmul fast float %2612, %1866
  %2667 = call float @dx.op.unary.f32(i32 22, float %2665)  ; Frc(value)
  %2668 = call float @dx.op.unary.f32(i32 22, float %2666)  ; Frc(value)
  %2669 = fmul fast float %2667, %2613
  %2670 = fmul fast float %2668, %2614
  %2671 = call i32 @dx.op.binary.i32(i32 37, i32 %2664, i32 0)  ; IMax(a,b)
  %2672 = call i32 @dx.op.binary.i32(i32 38, i32 %2671, i32 %2620)  ; IMin(a,b)
  %2673 = fptoui float %2669 to i32
  %2674 = add i32 %2673, %2616
  %2675 = and i32 %2672, 31
  %2676 = lshr i32 %2674, %2675
  %2677 = fptoui float %2670 to i32
  %2678 = add i32 %2677, %2618
  %2679 = lshr i32 %2678, %2675
  %2680 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2681 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2680, i32 %2672, i32 %2676, i32 %2679, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2682 = extractvalue %dx.types.ResRet.i32 %2681, 0
  %2683 = extractvalue %dx.types.ResRet.i32 %2681, 1
  %2684 = extractvalue %dx.types.ResRet.i32 %2681, 2
  %2685 = extractvalue %dx.types.ResRet.i32 %2681, 3
  %2686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %2687 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2686, i32 %2672, i32 %2676, i32 %2679, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2688 = extractvalue %dx.types.ResRet.i32 %2687, 0
  %2689 = extractvalue %dx.types.ResRet.i32 %2687, 1
  %2690 = extractvalue %dx.types.ResRet.i32 %2687, 2
  %2691 = extractvalue %dx.types.ResRet.i32 %2687, 3
  %2692 = or i32 %2676, %2605
  %2693 = shl i32 %2679, 12
  %2694 = or i32 %2692, %2693
  %2695 = add nuw nsw i32 %2620, 1
  %2696 = add nsw i32 %2664, 1
  %2697 = call i32 @dx.op.binary.i32(i32 37, i32 %2696, i32 0)  ; IMax(a,b)
  %2698 = call i32 @dx.op.binary.i32(i32 38, i32 %2697, i32 %2695)  ; IMin(a,b)
  %2699 = shl i32 %2698, 24
  %2700 = or i32 %2694, %2699
  %2701 = icmp eq i32 %1900, 1
  %2702 = select i1 %2701, i32 %2700, i32 %2051
  %2703 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %2704 = extractvalue %dx.types.CBufRet.i32 %2703, 0
  %2705 = extractvalue %dx.types.CBufRet.i32 %2703, 1
  %2706 = extractvalue %dx.types.CBufRet.i32 %2703, 2
  %2707 = extractvalue %dx.types.CBufRet.i32 %2703, 3
  %2708 = bitcast i32 %2707 to float
  %2709 = call float @dx.op.unary.f32(i32 6, float %2708)  ; FAbs(value)
  %2710 = bitcast i32 %2705 to float
  %2711 = bitcast i32 %2706 to float
  %2712 = fcmp fast ogt float %2708, 0.000000e+00
  %2713 = and i32 %2704, 255
  %2714 = uitofp i32 %2713 to float
  %2715 = fmul fast float %2714, 0x3F70101020000000
  %2716 = lshr i32 %2704, 8
  %2717 = and i32 %2716, 255
  %2718 = uitofp i32 %2717 to float
  %2719 = fmul fast float %2718, 0x3F70101020000000
  %2720 = lshr i32 %2704, 16
  %2721 = and i32 %2720, 255
  %2722 = uitofp i32 %2721 to float
  %2723 = fmul fast float %2722, 0x3F70101020000000
  %2724 = and i32 %2682, 15
  %2725 = lshr i32 4096, %2724
  %2726 = uitofp i32 %2725 to float
  %2727 = fmul fast float %2726, 0x3F30000000000000
  %2728 = lshr i32 %2682, 4
  %2729 = select i1 %2712, i32 255, i32 63
  %2730 = and i32 %2728, %2729
  %2731 = lshr i32 %2682, 12
  %2732 = and i32 %2731, 255
  %2733 = lshr i32 %2682, 10
  %2734 = and i32 %2733, 63
  %2735 = select i1 %2712, i32 %2732, i32 %2734
  %2736 = fmul fast float %2727, %2669
  %2737 = fmul fast float %2727, %2670
  %2738 = call float @dx.op.unary.f32(i32 22, float %2736)  ; Frc(value)
  %2739 = call float @dx.op.unary.f32(i32 22, float %2737)  ; Frc(value)
  %2740 = uitofp i32 %2730 to float
  %2741 = uitofp i32 %2735 to float
  %2742 = fmul fast float %2740, %2709
  %2743 = fmul fast float %2741, %2709
  %2744 = fmul fast float %2738, %2710
  %2745 = fmul fast float %2739, %2710
  %2746 = fadd fast float %2744, %2711
  %2747 = fadd fast float %2745, %2711
  %2748 = fadd fast float %2746, %2742
  %2749 = fadd fast float %2747, %2743
  %2750 = icmp ugt i32 %2682, 15
  %2751 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2752 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2753 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2751, %dx.types.Handle %2752, float %2748, float %2749, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2754 = extractvalue %dx.types.ResRet.f32 %2753, 0
  %2755 = extractvalue %dx.types.ResRet.f32 %2753, 1
  %2756 = extractvalue %dx.types.ResRet.f32 %2753, 2
  %2757 = select i1 %2750, float %2754, float %2723
  %2758 = select i1 %2750, float %2755, float %2719
  %2759 = select i1 %2750, float %2756, float %2715
  %2760 = fmul fast float %2757, %1925
  %2761 = fmul fast float %2758, %1925
  %2762 = fmul fast float %2759, %1925
  %2763 = fadd fast float %2598, %2760
  %2764 = fadd fast float %2599, %2761
  %2765 = fadd fast float %2600, %2762
  %2766 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %2767 = extractvalue %dx.types.CBufRet.i32 %2766, 0
  %2768 = extractvalue %dx.types.CBufRet.i32 %2766, 1
  %2769 = extractvalue %dx.types.CBufRet.i32 %2766, 2
  %2770 = extractvalue %dx.types.CBufRet.i32 %2766, 3
  %2771 = bitcast i32 %2770 to float
  %2772 = call float @dx.op.unary.f32(i32 6, float %2771)  ; FAbs(value)
  %2773 = bitcast i32 %2768 to float
  %2774 = bitcast i32 %2769 to float
  %2775 = fcmp fast ogt float %2771, 0.000000e+00
  %2776 = and i32 %2767, 255
  %2777 = uitofp i32 %2776 to float
  %2778 = fmul fast float %2777, 0x3F70101020000000
  %2779 = lshr i32 %2767, 8
  %2780 = and i32 %2779, 255
  %2781 = uitofp i32 %2780 to float
  %2782 = fmul fast float %2781, 0x3F70101020000000
  %2783 = lshr i32 %2767, 16
  %2784 = and i32 %2783, 255
  %2785 = uitofp i32 %2784 to float
  %2786 = fmul fast float %2785, 0x3F70101020000000
  %2787 = and i32 %2683, 15
  %2788 = lshr i32 4096, %2787
  %2789 = uitofp i32 %2788 to float
  %2790 = fmul fast float %2789, 0x3F30000000000000
  %2791 = lshr i32 %2683, 4
  %2792 = select i1 %2775, i32 255, i32 63
  %2793 = and i32 %2791, %2792
  %2794 = lshr i32 %2683, 12
  %2795 = and i32 %2794, 255
  %2796 = lshr i32 %2683, 10
  %2797 = and i32 %2796, 63
  %2798 = select i1 %2775, i32 %2795, i32 %2797
  %2799 = fmul fast float %2790, %2669
  %2800 = fmul fast float %2790, %2670
  %2801 = call float @dx.op.unary.f32(i32 22, float %2799)  ; Frc(value)
  %2802 = call float @dx.op.unary.f32(i32 22, float %2800)  ; Frc(value)
  %2803 = uitofp i32 %2793 to float
  %2804 = uitofp i32 %2798 to float
  %2805 = fmul fast float %2803, %2772
  %2806 = fmul fast float %2804, %2772
  %2807 = fmul fast float %2801, %2773
  %2808 = fmul fast float %2802, %2773
  %2809 = fadd fast float %2807, %2774
  %2810 = fadd fast float %2808, %2774
  %2811 = fadd fast float %2809, %2805
  %2812 = fadd fast float %2810, %2806
  %2813 = icmp ugt i32 %2683, 15
  %2814 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2815 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2816 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2814, %dx.types.Handle %2815, float %2811, float %2812, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2817 = extractvalue %dx.types.ResRet.f32 %2816, 0
  %2818 = extractvalue %dx.types.ResRet.f32 %2816, 1
  %2819 = extractvalue %dx.types.ResRet.f32 %2816, 2
  %2820 = select i1 %2813, float %2817, float %2786
  %2821 = select i1 %2813, float %2818, float %2782
  %2822 = select i1 %2813, float %2819, float %2778
  %2823 = fmul fast float %2820, %1931
  %2824 = fmul fast float %2821, %1931
  %2825 = fmul fast float %2822, %1931
  %2826 = fadd fast float %2763, %2823
  %2827 = fadd fast float %2764, %2824
  %2828 = fadd fast float %2765, %2825
  %2829 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %2830 = extractvalue %dx.types.CBufRet.i32 %2829, 0
  %2831 = extractvalue %dx.types.CBufRet.i32 %2829, 1
  %2832 = extractvalue %dx.types.CBufRet.i32 %2829, 2
  %2833 = extractvalue %dx.types.CBufRet.i32 %2829, 3
  %2834 = bitcast i32 %2833 to float
  %2835 = call float @dx.op.unary.f32(i32 6, float %2834)  ; FAbs(value)
  %2836 = bitcast i32 %2831 to float
  %2837 = bitcast i32 %2832 to float
  %2838 = fcmp fast ogt float %2834, 0.000000e+00
  %2839 = and i32 %2830, 255
  %2840 = uitofp i32 %2839 to float
  %2841 = fmul fast float %2840, 0x3F70101020000000
  %2842 = lshr i32 %2830, 8
  %2843 = and i32 %2842, 255
  %2844 = uitofp i32 %2843 to float
  %2845 = fmul fast float %2844, 0x3F70101020000000
  %2846 = lshr i32 %2830, 16
  %2847 = and i32 %2846, 255
  %2848 = uitofp i32 %2847 to float
  %2849 = fmul fast float %2848, 0x3F70101020000000
  %2850 = and i32 %2684, 15
  %2851 = lshr i32 4096, %2850
  %2852 = uitofp i32 %2851 to float
  %2853 = fmul fast float %2852, 0x3F30000000000000
  %2854 = lshr i32 %2684, 4
  %2855 = select i1 %2838, i32 255, i32 63
  %2856 = and i32 %2854, %2855
  %2857 = lshr i32 %2684, 12
  %2858 = and i32 %2857, 255
  %2859 = lshr i32 %2684, 10
  %2860 = and i32 %2859, 63
  %2861 = select i1 %2838, i32 %2858, i32 %2860
  %2862 = fmul fast float %2853, %2669
  %2863 = fmul fast float %2853, %2670
  %2864 = call float @dx.op.unary.f32(i32 22, float %2862)  ; Frc(value)
  %2865 = call float @dx.op.unary.f32(i32 22, float %2863)  ; Frc(value)
  %2866 = uitofp i32 %2856 to float
  %2867 = uitofp i32 %2861 to float
  %2868 = fmul fast float %2866, %2835
  %2869 = fmul fast float %2867, %2835
  %2870 = fmul fast float %2864, %2836
  %2871 = fmul fast float %2865, %2836
  %2872 = fadd fast float %2870, %2837
  %2873 = fadd fast float %2871, %2837
  %2874 = fadd fast float %2872, %2868
  %2875 = fadd fast float %2873, %2869
  %2876 = icmp ugt i32 %2684, 15
  %2877 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2878 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2879 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2877, %dx.types.Handle %2878, float %2874, float %2875, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2880 = extractvalue %dx.types.ResRet.f32 %2879, 0
  %2881 = extractvalue %dx.types.ResRet.f32 %2879, 1
  %2882 = extractvalue %dx.types.ResRet.f32 %2879, 2
  %2883 = select i1 %2876, float %2880, float %2849
  %2884 = select i1 %2876, float %2881, float %2845
  %2885 = select i1 %2876, float %2882, float %2841
  %2886 = fmul fast float %2883, %1943
  %2887 = fmul fast float %2884, %1943
  %2888 = fmul fast float %2885, %1943
  %2889 = fadd fast float %2826, %2886
  %2890 = fadd fast float %2827, %2887
  %2891 = fadd fast float %2828, %2888
  %2892 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %2893 = extractvalue %dx.types.CBufRet.i32 %2892, 0
  %2894 = extractvalue %dx.types.CBufRet.i32 %2892, 1
  %2895 = extractvalue %dx.types.CBufRet.i32 %2892, 2
  %2896 = extractvalue %dx.types.CBufRet.i32 %2892, 3
  %2897 = bitcast i32 %2896 to float
  %2898 = call float @dx.op.unary.f32(i32 6, float %2897)  ; FAbs(value)
  %2899 = bitcast i32 %2894 to float
  %2900 = bitcast i32 %2895 to float
  %2901 = fcmp fast ogt float %2897, 0.000000e+00
  %2902 = and i32 %2893, 255
  %2903 = uitofp i32 %2902 to float
  %2904 = fmul fast float %2903, 0x3F70101020000000
  %2905 = lshr i32 %2893, 8
  %2906 = and i32 %2905, 255
  %2907 = uitofp i32 %2906 to float
  %2908 = fmul fast float %2907, 0x3F70101020000000
  %2909 = lshr i32 %2893, 16
  %2910 = and i32 %2909, 255
  %2911 = uitofp i32 %2910 to float
  %2912 = fmul fast float %2911, 0x3F70101020000000
  %2913 = and i32 %2685, 15
  %2914 = lshr i32 4096, %2913
  %2915 = uitofp i32 %2914 to float
  %2916 = fmul fast float %2915, 0x3F30000000000000
  %2917 = lshr i32 %2685, 4
  %2918 = select i1 %2901, i32 255, i32 63
  %2919 = and i32 %2917, %2918
  %2920 = lshr i32 %2685, 12
  %2921 = and i32 %2920, 255
  %2922 = lshr i32 %2685, 10
  %2923 = and i32 %2922, 63
  %2924 = select i1 %2901, i32 %2921, i32 %2923
  %2925 = fmul fast float %2916, %2669
  %2926 = fmul fast float %2916, %2670
  %2927 = call float @dx.op.unary.f32(i32 22, float %2925)  ; Frc(value)
  %2928 = call float @dx.op.unary.f32(i32 22, float %2926)  ; Frc(value)
  %2929 = uitofp i32 %2919 to float
  %2930 = uitofp i32 %2924 to float
  %2931 = fmul fast float %2929, %2898
  %2932 = fmul fast float %2930, %2898
  %2933 = fmul fast float %2927, %2899
  %2934 = fmul fast float %2928, %2899
  %2935 = fadd fast float %2933, %2900
  %2936 = fadd fast float %2934, %2900
  %2937 = fadd fast float %2935, %2931
  %2938 = fadd fast float %2936, %2932
  %2939 = icmp ugt i32 %2685, 15
  %2940 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2941 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2942 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2940, %dx.types.Handle %2941, float %2937, float %2938, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2943 = extractvalue %dx.types.ResRet.f32 %2942, 0
  %2944 = extractvalue %dx.types.ResRet.f32 %2942, 1
  %2945 = extractvalue %dx.types.ResRet.f32 %2942, 2
  %2946 = select i1 %2939, float %2943, float %2912
  %2947 = select i1 %2939, float %2944, float %2908
  %2948 = select i1 %2939, float %2945, float %2904
  %2949 = fmul fast float %2946, %1949
  %2950 = fmul fast float %2947, %1949
  %2951 = fmul fast float %2948, %1949
  %2952 = fadd fast float %2889, %2949
  %2953 = fadd fast float %2890, %2950
  %2954 = fadd fast float %2891, %2951
  %2955 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %2956 = extractvalue %dx.types.CBufRet.i32 %2955, 0
  %2957 = extractvalue %dx.types.CBufRet.i32 %2955, 1
  %2958 = extractvalue %dx.types.CBufRet.i32 %2955, 2
  %2959 = extractvalue %dx.types.CBufRet.i32 %2955, 3
  %2960 = bitcast i32 %2959 to float
  %2961 = call float @dx.op.unary.f32(i32 6, float %2960)  ; FAbs(value)
  %2962 = bitcast i32 %2957 to float
  %2963 = bitcast i32 %2958 to float
  %2964 = fcmp fast ogt float %2960, 0.000000e+00
  %2965 = lshr i32 %2956, 16
  %2966 = and i32 %2965, 255
  %2967 = uitofp i32 %2966 to float
  %2968 = fmul fast float %2967, 0x3F70101020000000
  %2969 = and i32 %2688, 15
  %2970 = lshr i32 4096, %2969
  %2971 = uitofp i32 %2970 to float
  %2972 = fmul fast float %2971, 0x3F30000000000000
  %2973 = lshr i32 %2688, 4
  %2974 = select i1 %2964, i32 255, i32 63
  %2975 = and i32 %2973, %2974
  %2976 = lshr i32 %2688, 12
  %2977 = and i32 %2976, 255
  %2978 = lshr i32 %2688, 10
  %2979 = and i32 %2978, 63
  %2980 = select i1 %2964, i32 %2977, i32 %2979
  %2981 = fmul fast float %2972, %2669
  %2982 = fmul fast float %2972, %2670
  %2983 = call float @dx.op.unary.f32(i32 22, float %2981)  ; Frc(value)
  %2984 = call float @dx.op.unary.f32(i32 22, float %2982)  ; Frc(value)
  %2985 = uitofp i32 %2975 to float
  %2986 = uitofp i32 %2980 to float
  %2987 = fmul fast float %2985, %2961
  %2988 = fmul fast float %2986, %2961
  %2989 = fmul fast float %2983, %2962
  %2990 = fmul fast float %2984, %2962
  %2991 = fadd fast float %2989, %2963
  %2992 = fadd fast float %2990, %2963
  %2993 = fadd fast float %2991, %2987
  %2994 = fadd fast float %2992, %2988
  %2995 = icmp ugt i32 %2688, 15
  %2996 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2997 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2998 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2996, %dx.types.Handle %2997, float %2993, float %2994, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2999 = extractvalue %dx.types.ResRet.f32 %2998, 0
  %3000 = select i1 %2995, float %2999, float %2968
  %3001 = fmul fast float %3000, %1913
  %3002 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %3003 = extractvalue %dx.types.CBufRet.i32 %3002, 0
  %3004 = extractvalue %dx.types.CBufRet.i32 %3002, 1
  %3005 = extractvalue %dx.types.CBufRet.i32 %3002, 2
  %3006 = extractvalue %dx.types.CBufRet.i32 %3002, 3
  %3007 = bitcast i32 %3006 to float
  %3008 = call float @dx.op.unary.f32(i32 6, float %3007)  ; FAbs(value)
  %3009 = bitcast i32 %3004 to float
  %3010 = bitcast i32 %3005 to float
  %3011 = fcmp fast ogt float %3007, 0.000000e+00
  %3012 = lshr i32 %3003, 16
  %3013 = and i32 %3012, 255
  %3014 = uitofp i32 %3013 to float
  %3015 = fmul fast float %3014, 0x3F70101020000000
  %3016 = and i32 %2689, 15
  %3017 = lshr i32 4096, %3016
  %3018 = uitofp i32 %3017 to float
  %3019 = fmul fast float %3018, 0x3F30000000000000
  %3020 = lshr i32 %2689, 4
  %3021 = select i1 %3011, i32 255, i32 63
  %3022 = and i32 %3020, %3021
  %3023 = lshr i32 %2689, 12
  %3024 = and i32 %3023, 255
  %3025 = lshr i32 %2689, 10
  %3026 = and i32 %3025, 63
  %3027 = select i1 %3011, i32 %3024, i32 %3026
  %3028 = fmul fast float %3019, %2669
  %3029 = fmul fast float %3019, %2670
  %3030 = call float @dx.op.unary.f32(i32 22, float %3028)  ; Frc(value)
  %3031 = call float @dx.op.unary.f32(i32 22, float %3029)  ; Frc(value)
  %3032 = uitofp i32 %3022 to float
  %3033 = uitofp i32 %3027 to float
  %3034 = fmul fast float %3032, %3008
  %3035 = fmul fast float %3033, %3008
  %3036 = fmul fast float %3030, %3009
  %3037 = fmul fast float %3031, %3009
  %3038 = fadd fast float %3036, %3010
  %3039 = fadd fast float %3037, %3010
  %3040 = fadd fast float %3038, %3034
  %3041 = fadd fast float %3039, %3035
  %3042 = icmp ugt i32 %2689, 15
  %3043 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3044 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3045 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3043, %dx.types.Handle %3044, float %3040, float %3041, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3046 = extractvalue %dx.types.ResRet.f32 %3045, 0
  %3047 = select i1 %3042, float %3046, float %3015
  %3048 = fmul fast float %3047, %1919
  %3049 = fadd fast float %3048, %3001
  %3050 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %3051 = extractvalue %dx.types.CBufRet.i32 %3050, 0
  %3052 = extractvalue %dx.types.CBufRet.i32 %3050, 1
  %3053 = extractvalue %dx.types.CBufRet.i32 %3050, 2
  %3054 = extractvalue %dx.types.CBufRet.i32 %3050, 3
  %3055 = bitcast i32 %3054 to float
  %3056 = call float @dx.op.unary.f32(i32 6, float %3055)  ; FAbs(value)
  %3057 = bitcast i32 %3052 to float
  %3058 = bitcast i32 %3053 to float
  %3059 = fcmp fast ogt float %3055, 0.000000e+00
  %3060 = lshr i32 %3051, 16
  %3061 = and i32 %3060, 255
  %3062 = uitofp i32 %3061 to float
  %3063 = fmul fast float %3062, 0x3F70101020000000
  %3064 = and i32 %2690, 15
  %3065 = lshr i32 4096, %3064
  %3066 = uitofp i32 %3065 to float
  %3067 = fmul fast float %3066, 0x3F30000000000000
  %3068 = lshr i32 %2690, 4
  %3069 = select i1 %3059, i32 255, i32 63
  %3070 = and i32 %3068, %3069
  %3071 = lshr i32 %2690, 12
  %3072 = and i32 %3071, 255
  %3073 = lshr i32 %2690, 10
  %3074 = and i32 %3073, 63
  %3075 = select i1 %3059, i32 %3072, i32 %3074
  %3076 = fmul fast float %3067, %2669
  %3077 = fmul fast float %3067, %2670
  %3078 = call float @dx.op.unary.f32(i32 22, float %3076)  ; Frc(value)
  %3079 = call float @dx.op.unary.f32(i32 22, float %3077)  ; Frc(value)
  %3080 = uitofp i32 %3070 to float
  %3081 = uitofp i32 %3075 to float
  %3082 = fmul fast float %3080, %3056
  %3083 = fmul fast float %3081, %3056
  %3084 = fmul fast float %3078, %3057
  %3085 = fmul fast float %3079, %3057
  %3086 = fadd fast float %3084, %3058
  %3087 = fadd fast float %3085, %3058
  %3088 = fadd fast float %3086, %3082
  %3089 = fadd fast float %3087, %3083
  %3090 = icmp ugt i32 %2690, 15
  %3091 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3093 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3091, %dx.types.Handle %3092, float %3088, float %3089, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3094 = extractvalue %dx.types.ResRet.f32 %3093, 0
  %3095 = select i1 %3090, float %3094, float %3063
  %3096 = fmul fast float %3095, %1925
  %3097 = fadd fast float %3049, %3096
  %3098 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %3099 = extractvalue %dx.types.CBufRet.i32 %3098, 0
  %3100 = extractvalue %dx.types.CBufRet.i32 %3098, 1
  %3101 = extractvalue %dx.types.CBufRet.i32 %3098, 2
  %3102 = extractvalue %dx.types.CBufRet.i32 %3098, 3
  %3103 = bitcast i32 %3102 to float
  %3104 = call float @dx.op.unary.f32(i32 6, float %3103)  ; FAbs(value)
  %3105 = bitcast i32 %3100 to float
  %3106 = bitcast i32 %3101 to float
  %3107 = fcmp fast ogt float %3103, 0.000000e+00
  %3108 = lshr i32 %3099, 16
  %3109 = and i32 %3108, 255
  %3110 = uitofp i32 %3109 to float
  %3111 = fmul fast float %3110, 0x3F70101020000000
  %3112 = and i32 %2691, 15
  %3113 = lshr i32 4096, %3112
  %3114 = uitofp i32 %3113 to float
  %3115 = fmul fast float %3114, 0x3F30000000000000
  %3116 = lshr i32 %2691, 4
  %3117 = select i1 %3107, i32 255, i32 63
  %3118 = and i32 %3116, %3117
  %3119 = lshr i32 %2691, 12
  %3120 = and i32 %3119, 255
  %3121 = lshr i32 %2691, 10
  %3122 = and i32 %3121, 63
  %3123 = select i1 %3107, i32 %3120, i32 %3122
  %3124 = fmul fast float %3115, %2669
  %3125 = fmul fast float %3115, %2670
  %3126 = call float @dx.op.unary.f32(i32 22, float %3124)  ; Frc(value)
  %3127 = call float @dx.op.unary.f32(i32 22, float %3125)  ; Frc(value)
  %3128 = uitofp i32 %3118 to float
  %3129 = uitofp i32 %3123 to float
  %3130 = fmul fast float %3128, %3104
  %3131 = fmul fast float %3129, %3104
  %3132 = fmul fast float %3126, %3105
  %3133 = fmul fast float %3127, %3105
  %3134 = fadd fast float %3132, %3106
  %3135 = fadd fast float %3133, %3106
  %3136 = fadd fast float %3134, %3130
  %3137 = fadd fast float %3135, %3131
  %3138 = icmp ugt i32 %2691, 15
  %3139 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3140 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3141 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3139, %dx.types.Handle %3140, float %3136, float %3137, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3142 = extractvalue %dx.types.ResRet.f32 %3141, 0
  %3143 = select i1 %3138, float %3142, float %3111
  %3144 = fmul fast float %3143, %1931
  %3145 = fadd fast float %3097, %3144
  %3146 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3147 = extractvalue %dx.types.CBufRet.i32 %3146, 0
  %3148 = extractvalue %dx.types.CBufRet.i32 %3146, 1
  %3149 = extractvalue %dx.types.CBufRet.i32 %3146, 2
  %3150 = extractvalue %dx.types.CBufRet.i32 %3146, 3
  %3151 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3152 = extractvalue %dx.types.CBufRet.i32 %3151, 0
  %3153 = extractvalue %dx.types.CBufRet.i32 %3151, 1
  %3154 = extractvalue %dx.types.CBufRet.i32 %3151, 2
  %3155 = extractvalue %dx.types.CBufRet.i32 %3151, 3
  %3156 = bitcast i32 %3152 to float
  %3157 = bitcast i32 %3153 to float
  %3158 = bitcast i32 %3154 to float
  %3159 = bitcast i32 %3155 to float
  %3160 = bitcast i32 %3147 to float
  %3161 = and i32 %3148, 4095
  %3162 = lshr i32 %3148, 12
  %3163 = and i32 %3162, 4095
  %3164 = lshr i32 %3148, 24
  %3165 = and i32 %3149, 15
  %3166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %3167 = extractvalue %dx.types.CBufRet.f32 %3166, 0
  %3168 = call float @dx.op.unary.f32(i32 21, float %3167)  ; Exp(value)
  %3169 = fmul fast float %3168, %1864
  %3170 = fmul fast float %3168, %1862
  %3171 = fmul fast float %3169, %3156
  %3172 = fmul fast float %3170, %3157
  %3173 = fmul fast float %3156, %1860
  %3174 = fmul fast float %3173, %3158
  %3175 = fmul fast float %3174, %3168
  %3176 = fmul fast float %3157, %1858
  %3177 = fmul fast float %3176, %3159
  %3178 = fmul fast float %3177, %3168
  %3179 = fmul fast float %3171, %3158
  %3180 = fmul fast float %3172, %3159
  %3181 = call float @dx.op.dot2.f32(i32 54, float %3175, float %3178, float %3175, float %3178)  ; Dot2(ax,ay,bx,by)
  %3182 = call float @dx.op.dot2.f32(i32 54, float %3179, float %3180, float %3179, float %3180)  ; Dot2(ax,ay,bx,by)
  %3183 = call float @dx.op.binary.f32(i32 36, float %3181, float %3182)  ; FMin(a,b)
  %3184 = call float @dx.op.unary.f32(i32 23, float %3183)  ; Log(value)
  %3185 = call float @dx.op.binary.f32(i32 35, float %3181, float %3182)  ; FMax(a,b)
  %3186 = call float @dx.op.unary.f32(i32 23, float %3185)  ; Log(value)
  %3187 = fmul fast float %3186, 5.000000e-01
  %3188 = fsub fast float %3186, %3184
  %3189 = fmul fast float %3188, 5.000000e-01
  %3190 = call float @dx.op.binary.f32(i32 36, float %3189, float %3160)  ; FMin(a,b)
  %3191 = fsub fast float %3187, %3190
  %3192 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %3193 = extractvalue %dx.types.CBufRet.f32 %3192, 0
  %3194 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %3195 = extractvalue %dx.types.CBufRet.i32 %3194, 1
  %3196 = uitofp i32 %3195 to float
  %3197 = fmul fast float %3196, 0x4040551EC0000000
  %3198 = fmul fast float %3196, 0x4027A147A0000000
  %3199 = fadd fast float %3197, %65
  %3200 = fadd fast float %3198, %66
  %3201 = call float @dx.op.dot2.f32(i32 54, float %3199, float %3200, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %3202 = call float @dx.op.unary.f32(i32 22, float %3201)  ; Frc(value)
  %3203 = fmul fast float %3202, 0x404A7DD040000000
  %3204 = call float @dx.op.unary.f32(i32 22, float %3203)  ; Frc(value)
  %3205 = fadd fast float %3191, %3193
  %3206 = fadd fast float %3205, %3204
  %3207 = call float @dx.op.unary.f32(i32 27, float %3206)  ; Round_ni(value)
  %3208 = fptosi float %3207 to i32
  %3209 = add nsw i32 %3208, %3164
  %3210 = fmul fast float %3156, %1868
  %3211 = fmul fast float %3157, %1866
  %3212 = call float @dx.op.unary.f32(i32 22, float %3210)  ; Frc(value)
  %3213 = call float @dx.op.unary.f32(i32 22, float %3211)  ; Frc(value)
  %3214 = fmul fast float %3212, %3158
  %3215 = fmul fast float %3213, %3159
  %3216 = call i32 @dx.op.binary.i32(i32 37, i32 %3209, i32 0)  ; IMax(a,b)
  %3217 = call i32 @dx.op.binary.i32(i32 38, i32 %3216, i32 %3165)  ; IMin(a,b)
  %3218 = fptoui float %3214 to i32
  %3219 = add i32 %3218, %3161
  %3220 = and i32 %3217, 31
  %3221 = lshr i32 %3219, %3220
  %3222 = fptoui float %3215 to i32
  %3223 = add i32 %3222, %3163
  %3224 = lshr i32 %3223, %3220
  %3225 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %3226 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3225, i32 %3217, i32 %3221, i32 %3224, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3227 = extractvalue %dx.types.ResRet.i32 %3226, 0
  %3228 = extractvalue %dx.types.ResRet.i32 %3226, 1
  %3229 = or i32 %3221, %3150
  %3230 = shl i32 %3224, 12
  %3231 = or i32 %3229, %3230
  %3232 = add nuw nsw i32 %3165, 1
  %3233 = add nsw i32 %3209, 1
  %3234 = call i32 @dx.op.binary.i32(i32 37, i32 %3233, i32 0)  ; IMax(a,b)
  %3235 = call i32 @dx.op.binary.i32(i32 38, i32 %3234, i32 %3232)  ; IMin(a,b)
  %3236 = shl i32 %3235, 24
  %3237 = or i32 %3231, %3236
  %3238 = icmp eq i32 %1900, 2
  %3239 = select i1 %3238, i32 %3237, i32 %2702
  %3240 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %3241 = extractvalue %dx.types.CBufRet.i32 %3240, 0
  %3242 = extractvalue %dx.types.CBufRet.i32 %3240, 1
  %3243 = extractvalue %dx.types.CBufRet.i32 %3240, 2
  %3244 = extractvalue %dx.types.CBufRet.i32 %3240, 3
  %3245 = bitcast i32 %3244 to float
  %3246 = call float @dx.op.unary.f32(i32 6, float %3245)  ; FAbs(value)
  %3247 = bitcast i32 %3242 to float
  %3248 = bitcast i32 %3243 to float
  %3249 = fcmp fast ogt float %3245, 0.000000e+00
  %3250 = lshr i32 %3241, 16
  %3251 = and i32 %3250, 255
  %3252 = uitofp i32 %3251 to float
  %3253 = fmul fast float %3252, 0x3F70101020000000
  %3254 = and i32 %3227, 15
  %3255 = lshr i32 4096, %3254
  %3256 = uitofp i32 %3255 to float
  %3257 = fmul fast float %3256, 0x3F30000000000000
  %3258 = lshr i32 %3227, 4
  %3259 = select i1 %3249, i32 255, i32 63
  %3260 = and i32 %3258, %3259
  %3261 = lshr i32 %3227, 12
  %3262 = and i32 %3261, 255
  %3263 = lshr i32 %3227, 10
  %3264 = and i32 %3263, 63
  %3265 = select i1 %3249, i32 %3262, i32 %3264
  %3266 = fmul fast float %3257, %3214
  %3267 = fmul fast float %3257, %3215
  %3268 = call float @dx.op.unary.f32(i32 22, float %3266)  ; Frc(value)
  %3269 = call float @dx.op.unary.f32(i32 22, float %3267)  ; Frc(value)
  %3270 = uitofp i32 %3260 to float
  %3271 = uitofp i32 %3265 to float
  %3272 = fmul fast float %3270, %3246
  %3273 = fmul fast float %3271, %3246
  %3274 = fmul fast float %3268, %3247
  %3275 = fmul fast float %3269, %3247
  %3276 = fadd fast float %3274, %3248
  %3277 = fadd fast float %3275, %3248
  %3278 = fadd fast float %3276, %3272
  %3279 = fadd fast float %3277, %3273
  %3280 = icmp ugt i32 %3227, 15
  %3281 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3282 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3283 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3281, %dx.types.Handle %3282, float %3278, float %3279, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3284 = extractvalue %dx.types.ResRet.f32 %3283, 0
  %3285 = select i1 %3280, float %3284, float %3253
  %3286 = fmul fast float %3285, %1943
  %3287 = fadd fast float %3145, %3286
  %3288 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %3289 = extractvalue %dx.types.CBufRet.i32 %3288, 0
  %3290 = extractvalue %dx.types.CBufRet.i32 %3288, 1
  %3291 = extractvalue %dx.types.CBufRet.i32 %3288, 2
  %3292 = extractvalue %dx.types.CBufRet.i32 %3288, 3
  %3293 = bitcast i32 %3292 to float
  %3294 = call float @dx.op.unary.f32(i32 6, float %3293)  ; FAbs(value)
  %3295 = bitcast i32 %3290 to float
  %3296 = bitcast i32 %3291 to float
  %3297 = fcmp fast ogt float %3293, 0.000000e+00
  %3298 = lshr i32 %3289, 16
  %3299 = and i32 %3298, 255
  %3300 = uitofp i32 %3299 to float
  %3301 = fmul fast float %3300, 0x3F70101020000000
  %3302 = and i32 %3228, 15
  %3303 = lshr i32 4096, %3302
  %3304 = uitofp i32 %3303 to float
  %3305 = fmul fast float %3304, 0x3F30000000000000
  %3306 = lshr i32 %3228, 4
  %3307 = select i1 %3297, i32 255, i32 63
  %3308 = and i32 %3306, %3307
  %3309 = lshr i32 %3228, 12
  %3310 = and i32 %3309, 255
  %3311 = lshr i32 %3228, 10
  %3312 = and i32 %3311, 63
  %3313 = select i1 %3297, i32 %3310, i32 %3312
  %3314 = fmul fast float %3305, %3214
  %3315 = fmul fast float %3305, %3215
  %3316 = call float @dx.op.unary.f32(i32 22, float %3314)  ; Frc(value)
  %3317 = call float @dx.op.unary.f32(i32 22, float %3315)  ; Frc(value)
  %3318 = uitofp i32 %3308 to float
  %3319 = uitofp i32 %3313 to float
  %3320 = fmul fast float %3318, %3294
  %3321 = fmul fast float %3319, %3294
  %3322 = fmul fast float %3316, %3295
  %3323 = fmul fast float %3317, %3295
  %3324 = fadd fast float %3322, %3296
  %3325 = fadd fast float %3323, %3296
  %3326 = fadd fast float %3324, %3320
  %3327 = fadd fast float %3325, %3321
  %3328 = icmp ugt i32 %3228, 15
  %3329 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3330 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3331 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3329, %dx.types.Handle %3330, float %3326, float %3327, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3332 = extractvalue %dx.types.ResRet.f32 %3331, 0
  %3333 = select i1 %3328, float %3332, float %3301
  %3334 = fmul fast float %3333, %1949
  %3335 = fadd fast float %3287, %3334
  %3336 = call float @dx.op.unary.f32(i32 7, float %2952)  ; Saturate(value)
  %3337 = call float @dx.op.unary.f32(i32 7, float %2953)  ; Saturate(value)
  %3338 = call float @dx.op.unary.f32(i32 7, float %2954)  ; Saturate(value)
  %3339 = call float @dx.op.unary.f32(i32 7, float %3335)  ; Saturate(value)
  %3340 = fmul fast float %3339, %85
  %3341 = fadd fast float %3340, %84
  %3342 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3343 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %1882, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3344 = extractvalue %dx.types.ResRet.f32 %3343, 0
  %3345 = bitcast float %3344 to i32
  %3346 = and i32 %3345, 8
  %3347 = icmp ne i32 %3346, 0
  %3348 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 192)  ; CBufferLoadLegacy(handle,regIndex)
  %3349 = extractvalue %dx.types.CBufRet.f32 %3348, 3
  %3350 = fcmp fast ogt float %3349, 0.000000e+00
  %3351 = and i1 %3350, %3347
  br i1 %3351, label %3352, label %3407, !dx.controlflow.hints !100

; <label>:3352                                    ; preds = %1857
  %3353 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %3354 = extractvalue %dx.types.CBufRet.f32 %3353, 2
  %3355 = extractvalue %dx.types.CBufRet.f32 %3353, 3
  %3356 = fmul fast float %3354, %65
  %3357 = fmul fast float %3355, %66
  %3358 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3359 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %55, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3360 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3358, %dx.types.Handle %3359, float %3356, float %3357, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3361 = extractvalue %dx.types.ResRet.f32 %3360, 0
  %3362 = extractvalue %dx.types.ResRet.f32 %3360, 1
  %3363 = extractvalue %dx.types.ResRet.f32 %3360, 2
  %3364 = extractvalue %dx.types.ResRet.f32 %3360, 3
  %3365 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3366 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3365, %dx.types.Handle %3359, float %3356, float %3357, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3367 = extractvalue %dx.types.ResRet.f32 %3366, 0
  %3368 = extractvalue %dx.types.ResRet.f32 %3366, 1
  %3369 = extractvalue %dx.types.ResRet.f32 %3366, 2
  %3370 = extractvalue %dx.types.ResRet.f32 %3366, 3
  %3371 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3372 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3371, %dx.types.Handle %3359, float %3356, float %3357, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3373 = extractvalue %dx.types.ResRet.f32 %3372, 0
  %3374 = extractvalue %dx.types.ResRet.f32 %3372, 1
  %3375 = extractvalue %dx.types.ResRet.f32 %3372, 2
  %3376 = extractvalue %dx.types.ResRet.f32 %3372, 3
  %3377 = fmul fast float %3367, 2.000000e+00
  %3378 = fmul fast float %3368, 2.000000e+00
  %3379 = fmul fast float %3369, 2.000000e+00
  %3380 = fadd fast float %3377, 0xBFF0101020000000
  %3381 = fadd fast float %3378, 0xBFF0101020000000
  %3382 = fadd fast float %3379, 0xBFF0101020000000
  %3383 = fmul fast float %3364, %3336
  %3384 = fmul fast float %3364, %3337
  %3385 = fmul fast float %3364, %3338
  %3386 = fadd fast float %3383, %3361
  %3387 = fadd fast float %3384, %3362
  %3388 = fadd fast float %3385, %3363
  %3389 = fmul fast float %3370, %2467
  %3390 = fmul fast float %3370, %2468
  %3391 = fmul fast float %3370, %2469
  %3392 = fadd fast float %3380, %3389
  %3393 = fadd fast float %3381, %3390
  %3394 = fadd fast float %3382, %3391
  %3395 = call float @dx.op.dot3.f32(i32 55, float %3392, float %3393, float %3394, float %3392, float %3393, float %3394)  ; Dot3(ax,ay,az,bx,by,bz)
  %3396 = call float @dx.op.unary.f32(i32 25, float %3395)  ; Rsqrt(value)
  %3397 = fmul fast float %3396, %3392
  %3398 = fmul fast float %3396, %3393
  %3399 = fmul fast float %3396, %3394
  %3400 = fmul fast float %3376, %3341
  %3401 = fadd fast float %3400, %3375
  %3402 = fmul fast float %3376, 5.000000e-01
  %3403 = fadd fast float %3402, %3374
  %3404 = fadd fast float %3370, %3364
  %3405 = fadd fast float %3404, %3376
  %3406 = fmul fast float %3405, 0x3FD5555560000000
  br label %3407

; <label>:3407                                    ; preds = %3352, %1857
  %3408 = phi float [ %3397, %3352 ], [ %2467, %1857 ]
  %3409 = phi float [ %3398, %3352 ], [ %2468, %1857 ]
  %3410 = phi float [ %3399, %3352 ], [ %2469, %1857 ]
  %3411 = phi float [ %3386, %3352 ], [ %3336, %1857 ]
  %3412 = phi float [ %3387, %3352 ], [ %3337, %1857 ]
  %3413 = phi float [ %3388, %3352 ], [ %3338, %1857 ]
  %3414 = phi float [ %3373, %3352 ], [ 0.000000e+00, %1857 ]
  %3415 = phi float [ %3403, %3352 ], [ 5.000000e-01, %1857 ]
  %3416 = phi float [ %3401, %3352 ], [ %3341, %1857 ]
  %3417 = phi float [ %3406, %3352 ], [ 1.000000e+00, %1857 ]
  %3418 = and i32 %3345, 256
  %3419 = icmp ne i32 %3418, 0
  %3420 = and i32 %3345, 512
  %3421 = icmp ne i32 %3420, 0
  %3422 = select i1 %3421, float 1.000000e+00, float 0.000000e+00
  %3423 = select i1 %3419, float 2.000000e+00, float 0.000000e+00
  %3424 = fadd fast float %3423, %3422
  %3425 = fmul fast float %3424, 0x3FD5555560000000
  %3426 = and i32 %3345, 4
  %3427 = icmp eq i32 %3426, 0
  br i1 %3427, label %3506, label %3428, !dx.controlflow.hints !101

; <label>:3428                                    ; preds = %3407
  %3429 = fmul fast float %71, 2.097152e+06
  %3430 = fmul fast float %72, 2.097152e+06
  %3431 = fmul fast float %73, 2.097152e+06
  %3432 = fadd fast float %1884, %3429
  %3433 = fadd fast float %1885, %3430
  %3434 = fadd fast float %1886, %3431
  %3435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %3436 = extractvalue %dx.types.CBufRet.f32 %3435, 0
  %3437 = extractvalue %dx.types.CBufRet.f32 %3435, 1
  %3438 = extractvalue %dx.types.CBufRet.f32 %3435, 2
  %3439 = fmul fast float %3436, %3432
  %3440 = fmul fast float %3437, %3433
  %3441 = fmul fast float %3438, %3434
  %3442 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 232)  ; CBufferLoadLegacy(handle,regIndex)
  %3443 = extractvalue %dx.types.CBufRet.f32 %3442, 0
  %3444 = extractvalue %dx.types.CBufRet.f32 %3442, 1
  %3445 = extractvalue %dx.types.CBufRet.f32 %3442, 2
  %3446 = fadd fast float %3439, %3443
  %3447 = fadd fast float %3440, %3444
  %3448 = fadd fast float %3441, %3445
  %3449 = call float @dx.op.binary.f32(i32 35, float %3446, float 0.000000e+00)  ; FMax(a,b)
  %3450 = call float @dx.op.binary.f32(i32 35, float %3447, float 0.000000e+00)  ; FMax(a,b)
  %3451 = call float @dx.op.binary.f32(i32 35, float %3448, float 0.000000e+00)  ; FMax(a,b)
  %3452 = call float @dx.op.binary.f32(i32 36, float %3449, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %3453 = call float @dx.op.binary.f32(i32 36, float %3450, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %3454 = call float @dx.op.binary.f32(i32 36, float %3451, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %3455 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %3456 = extractvalue %dx.types.CBufRet.f32 %3455, 0
  %3457 = extractvalue %dx.types.CBufRet.f32 %3455, 1
  %3458 = extractvalue %dx.types.CBufRet.f32 %3455, 2
  %3459 = fmul fast float %3456, %3452
  %3460 = fmul fast float %3457, %3453
  %3461 = fmul fast float %3458, %3454
  %3462 = fptosi float %3459 to i32
  %3463 = fptosi float %3460 to i32
  %3464 = fptosi float %3461 to i32
  %3465 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %3466 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3465, i32 0, i32 %3462, i32 %3463, i32 %3464, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3467 = extractvalue %dx.types.ResRet.i32 %3466, 0
  %3468 = extractvalue %dx.types.ResRet.i32 %3466, 1
  %3469 = extractvalue %dx.types.ResRet.i32 %3466, 2
  %3470 = extractvalue %dx.types.ResRet.i32 %3466, 3
  %3471 = uitofp i32 %3467 to float
  %3472 = uitofp i32 %3468 to float
  %3473 = uitofp i32 %3469 to float
  %3474 = uitofp i32 %3470 to float
  %3475 = extractvalue %dx.types.CBufRet.f32 %3455, 3
  %3476 = fadd fast float %3475, 1.000000e+00
  %3477 = fmul fast float %3476, %3471
  %3478 = fmul fast float %3476, %3472
  %3479 = fmul fast float %3476, %3473
  %3480 = fdiv fast float %3459, %3474
  %3481 = fdiv fast float %3460, %3474
  %3482 = fdiv fast float %3461, %3474
  %3483 = call float @dx.op.unary.f32(i32 22, float %3480)  ; Frc(value)
  %3484 = call float @dx.op.unary.f32(i32 22, float %3481)  ; Frc(value)
  %3485 = call float @dx.op.unary.f32(i32 22, float %3482)  ; Frc(value)
  %3486 = fmul fast float %3475, %3483
  %3487 = fmul fast float %3475, %3484
  %3488 = fmul fast float %3475, %3485
  %3489 = fadd fast float %3477, 5.000000e-01
  %3490 = fadd fast float %3489, %3486
  %3491 = fadd fast float %3478, 5.000000e-01
  %3492 = fadd fast float %3491, %3487
  %3493 = fadd fast float %3479, 5.000000e-01
  %3494 = fadd fast float %3493, %3488
  %3495 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %3496 = extractvalue %dx.types.CBufRet.f32 %3495, 0
  %3497 = extractvalue %dx.types.CBufRet.f32 %3495, 1
  %3498 = extractvalue %dx.types.CBufRet.f32 %3495, 2
  %3499 = fmul fast float %3490, %3496
  %3500 = fmul fast float %3492, %3497
  %3501 = fmul fast float %3494, %3498
  %3502 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3503 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %57, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3504 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3502, %dx.types.Handle %3503, float %3499, float %3500, float %3501, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3505 = extractvalue %dx.types.ResRet.f32 %3504, 0
  br label %3506

; <label>:3506                                    ; preds = %3428, %3407
  %3507 = phi float [ %3505, %3428 ], [ 1.000000e+00, %3407 ]
  %3508 = fmul fast float %3415, 0x3FB47AE140000000
  %3509 = fsub fast float %3411, %3508
  %3510 = fsub fast float %3412, %3508
  %3511 = fsub fast float %3413, %3508
  %3512 = fmul fast float %3509, %3414
  %3513 = fmul fast float %3510, %3414
  %3514 = fmul fast float %3511, %3414
  %3515 = fadd fast float %3512, %3508
  %3516 = fadd fast float %3513, %3508
  %3517 = fadd fast float %3514, %3508
  %3518 = fmul fast float %3414, %3411
  %3519 = fmul fast float %3414, %3412
  %3520 = fmul fast float %3414, %3413
  %3521 = fsub fast float %3411, %3518
  %3522 = fsub fast float %3412, %3519
  %3523 = fsub fast float %3413, %3520
  %3524 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %3525 = extractvalue %dx.types.CBufRet.f32 %3524, 3
  %3526 = fmul fast float %3525, %3521
  %3527 = fmul fast float %3525, %3522
  %3528 = fmul fast float %3525, %3523
  %3529 = extractvalue %dx.types.CBufRet.f32 %3524, 0
  %3530 = extractvalue %dx.types.CBufRet.f32 %3524, 1
  %3531 = extractvalue %dx.types.CBufRet.f32 %3524, 2
  %3532 = fadd fast float %3526, %3529
  %3533 = fadd fast float %3527, %3530
  %3534 = fadd fast float %3528, %3531
  %3535 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %3536 = extractvalue %dx.types.CBufRet.f32 %3535, 3
  %3537 = fmul fast float %3536, %3515
  %3538 = fmul fast float %3536, %3516
  %3539 = fmul fast float %3536, %3517
  %3540 = extractvalue %dx.types.CBufRet.f32 %3535, 0
  %3541 = extractvalue %dx.types.CBufRet.f32 %3535, 1
  %3542 = extractvalue %dx.types.CBufRet.f32 %3535, 2
  %3543 = fadd fast float %3537, %3540
  %3544 = fadd fast float %3538, %3541
  %3545 = fadd fast float %3539, %3542
  %3546 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %3547 = extractvalue %dx.types.CBufRet.f32 %3546, 3
  %3548 = fcmp fast une float %3547, 0.000000e+00
  %3549 = fmul fast float %3543, 0x3FDCCCCCC0000000
  %3550 = fmul fast float %3544, 0x3FDCCCCCC0000000
  %3551 = fmul fast float %3545, 0x3FDCCCCCC0000000
  %3552 = fadd fast float %3549, %3532
  %3553 = fadd fast float %3550, %3533
  %3554 = fadd fast float %3551, %3534
  %3555 = select i1 %3548, float %3552, float %3532
  %3556 = select i1 %3548, float %3553, float %3533
  %3557 = select i1 %3548, float %3554, float %3534
  %3558 = select i1 %3548, float 0.000000e+00, float %3549
  %3559 = select i1 %3548, float 0.000000e+00, float %3550
  %3560 = select i1 %3548, float 0.000000e+00, float %3551
  %3561 = fadd fast float %3555, %3558
  %3562 = fadd fast float %3556, %3559
  %3563 = fadd fast float %3557, %3560
  %3564 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %3565 = extractvalue %dx.types.CBufRet.f32 %3564, 2
  %3566 = fmul fast float %3561, %3565
  %3567 = fmul fast float %3562, %3565
  %3568 = fmul fast float %3563, %3565
  %3569 = call float @dx.op.binary.f32(i32 35, float %2475, float 0.000000e+00)  ; FMax(a,b)
  %3570 = call float @dx.op.binary.f32(i32 35, float %2476, float 0.000000e+00)  ; FMax(a,b)
  %3571 = call float @dx.op.binary.f32(i32 35, float %2477, float 0.000000e+00)  ; FMax(a,b)
  %3572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %3573 = extractvalue %dx.types.CBufRet.f32 %3572, 0
  %3574 = fcmp fast ogt float %3573, 0.000000e+00
  br i1 %3574, label %3575, label %3648, !dx.controlflow.hints !102

; <label>:3575                                    ; preds = %3506
  %3576 = add nsw i32 %1882, 1
  %3577 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %3576, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3578 = extractvalue %dx.types.ResRet.f32 %3577, 0
  %3579 = extractvalue %dx.types.ResRet.f32 %3577, 1
  %3580 = extractvalue %dx.types.ResRet.f32 %3577, 2
  %3581 = add nsw i32 %1882, 18
  %3582 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %3581, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3583 = extractvalue %dx.types.ResRet.f32 %3582, 0
  %3584 = extractvalue %dx.types.ResRet.f32 %3582, 1
  %3585 = extractvalue %dx.types.ResRet.f32 %3582, 2
  %3586 = add nsw i32 %1882, 17
  %3587 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %3586, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3588 = extractvalue %dx.types.ResRet.f32 %3587, 3
  %3589 = add nsw i32 %1882, 24
  %3590 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %3589, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3591 = extractvalue %dx.types.ResRet.f32 %3590, 3
  %3592 = add nsw i32 %1882, 25
  %3593 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %3592, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3594 = extractvalue %dx.types.ResRet.f32 %3593, 3
  %3595 = add nsw i32 %1882, 31
  %3596 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3342, i32 %3595, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3597 = extractvalue %dx.types.ResRet.f32 %3596, 0
  %3598 = fsub fast float %71, %3578
  %3599 = fsub fast float %72, %3579
  %3600 = fsub fast float %73, %3580
  %3601 = fmul fast float %3598, 2.097152e+06
  %3602 = fmul fast float %3599, 2.097152e+06
  %3603 = fmul fast float %3600, 2.097152e+06
  %3604 = fadd fast float %3601, %1884
  %3605 = fsub fast float %3604, %3583
  %3606 = fadd fast float %3602, %1885
  %3607 = fsub fast float %3606, %3584
  %3608 = fadd fast float %3603, %1886
  %3609 = fsub fast float %3608, %3585
  %3610 = call float @dx.op.unary.f32(i32 6, float %3605)  ; FAbs(value)
  %3611 = call float @dx.op.unary.f32(i32 6, float %3607)  ; FAbs(value)
  %3612 = call float @dx.op.unary.f32(i32 6, float %3609)  ; FAbs(value)
  %3613 = fadd fast float %3588, 1.000000e+00
  %3614 = fadd fast float %3591, 1.000000e+00
  %3615 = fadd fast float %3594, 1.000000e+00
  %3616 = fcmp fast ogt float %3610, %3613
  %3617 = fcmp fast ogt float %3611, %3614
  %3618 = fcmp fast ogt float %3612, %3615
  %3619 = or i1 %3616, %3617
  %3620 = or i1 %3619, %3618
  br i1 %3620, label %3621, label %3634

; <label>:3621                                    ; preds = %3575
  %3622 = fadd fast float %1885, %1884
  %3623 = fadd fast float %71, %72
  %3624 = fadd fast float %3622, %1886
  %3625 = fadd fast float %3623, %73
  %3626 = fmul fast float %3624, 0x3F52E83A20000000
  %3627 = fmul fast float %3625, 0x40A2E83A20000000
  %3628 = call float @dx.op.unary.f32(i32 22, float %3627)  ; Frc(value)
  %3629 = fadd fast float %3628, %3626
  %3630 = call float @dx.op.unary.f32(i32 22, float %3629)  ; Frc(value)
  %3631 = fcmp fast ogt float %3630, 5.000000e-01
  %3632 = uitofp i1 %3631 to float
  %3633 = fsub fast float 1.000000e+00, %3632
  br label %3648

; <label>:3634                                    ; preds = %3575
  %3635 = fcmp fast ogt float %3597, 0.000000e+00
  br i1 %3635, label %3636, label %3648

; <label>:3636                                    ; preds = %3634
  %3637 = fsub fast float -0.000000e+00, %3597
  %3638 = call float @dx.op.unary.f32(i32 6, float %3637)  ; FAbs(value)
  %3639 = fmul fast float %3638, 2.000000e+01
  %3640 = call float @dx.op.unary.f32(i32 7, float %3639)  ; Saturate(value)
  %3641 = fsub fast float 1.000000e+00, %3640
  %3642 = fcmp fast ogt float %3641, 0.000000e+00
  %3643 = fcmp fast olt float %3641, 0.000000e+00
  %3644 = zext i1 %3642 to i32
  %3645 = zext i1 %3643 to i32
  %3646 = sub nsw i32 %3644, %3645
  %3647 = sitofp i32 %3646 to float
  br label %3648

; <label>:3648                                    ; preds = %3636, %3634, %3621, %3506
  %3649 = phi float [ 1.000000e+00, %3621 ], [ %3647, %3636 ], [ 1.000000e+00, %3634 ], [ 1.000000e+00, %3506 ]
  %3650 = phi float [ %3633, %3621 ], [ %3641, %3636 ], [ %3569, %3634 ], [ %3569, %3506 ]
  %3651 = phi float [ 1.000000e+00, %3621 ], [ 0.000000e+00, %3636 ], [ %3570, %3634 ], [ %3570, %3506 ]
  %3652 = phi float [ %3632, %3621 ], [ %3641, %3636 ], [ %3571, %3634 ], [ %3571, %3506 ]
  %3653 = fadd fast float %3650, %3566
  %3654 = fadd fast float %3651, %3567
  %3655 = fadd fast float %3652, %3568
  %3656 = fmul fast float %65, 7.812500e-03
  %3657 = fmul fast float %66, 7.812500e-03
  %3658 = call float @dx.op.unary.f32(i32 22, float %3656)  ; Frc(value)
  %3659 = call float @dx.op.unary.f32(i32 22, float %3657)  ; Frc(value)
  %3660 = fmul fast float %3658, 1.280000e+02
  %3661 = fmul fast float %3659, 1.280000e+02
  %3662 = fadd fast float %3660, 0xC05015CCC0000000
  %3663 = fadd fast float %3661, 0xC0521DCCC0000000
  %3664 = fmul fast float %3662, %3662
  %3665 = fmul fast float %3663, %3663
  %3666 = fmul fast float %3663, %3662
  %3667 = call float @dx.op.dot3.f32(i32 55, float %3664, float %3665, float %3666, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3668 = call float @dx.op.unary.f32(i32 22, float %3667)  ; Frc(value)
  %3669 = fadd fast float %3668, -5.000000e-01
  %3670 = fmul fast float %3669, 0x3F70101020000000
  %3671 = fmul fast float %3408, 5.000000e-01
  %3672 = fmul fast float %3409, 5.000000e-01
  %3673 = fmul fast float %3410, 5.000000e-01
  %3674 = fadd fast float %3671, 5.000000e-01
  %3675 = fadd fast float %3672, 5.000000e-01
  %3676 = fadd fast float %3673, 5.000000e-01
  %3677 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %64, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3678 = extractvalue %dx.types.CBufRet.f32 %3677, 2
  %3679 = fmul fast float %3678, %3653
  %3680 = fmul fast float %3678, %3654
  %3681 = fmul fast float %3678, %3655
  %3682 = call float @dx.op.binary.f32(i32 36, float %3679, float 3.225600e+04)  ; FMin(a,b)
  %3683 = call float @dx.op.binary.f32(i32 36, float %3680, float 3.225600e+04)  ; FMin(a,b)
  %3684 = call float @dx.op.binary.f32(i32 36, float %3681, float 3.225600e+04)  ; FMin(a,b)
  %3685 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %3686 = extractvalue %dx.types.CBufRet.i32 %3685, 3
  %3687 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %3688 = extractvalue %dx.types.CBufRet.i32 %3687, 2
  %3689 = and i32 %3688, %1887
  %3690 = and i32 %3688, %1888
  %3691 = extractvalue %dx.types.CBufRet.i32 %3687, 1
  %3692 = and i32 %3691, 31
  %3693 = shl i32 %3690, %3692
  %3694 = add i32 %3693, %3689
  %3695 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 239)  ; CBufferLoadLegacy(handle,regIndex)
  %3696 = extractvalue %dx.types.CBufRet.i32 %3695, 0
  %3697 = icmp eq i32 %3694, %3696
  br i1 %3697, label %3698, label %3729, !dx.controlflow.hints !103

; <label>:3698                                    ; preds = %3648
  %3699 = fmul fast float %3649, %3417
  %3700 = lshr i32 %1887, %3692
  %3701 = lshr i32 %1888, %3692
  %3702 = call float @dx.op.binary.f32(i32 35, float %3699, float 0x3F947AE140000000)  ; FMax(a,b)
  %3703 = call float @dx.op.binary.f32(i32 36, float %3702, float 1.000000e+00)  ; FMin(a,b)
  %3704 = add i32 %3700, %3686
  %3705 = add i32 %3701, %3686
  %3706 = uitofp i32 %3704 to float
  %3707 = uitofp i32 %3705 to float
  %3708 = fmul fast float %3706, 7.812500e-03
  %3709 = fmul fast float %3707, 7.812500e-03
  %3710 = call float @dx.op.unary.f32(i32 22, float %3708)  ; Frc(value)
  %3711 = call float @dx.op.unary.f32(i32 22, float %3709)  ; Frc(value)
  %3712 = fmul fast float %3710, 1.280000e+02
  %3713 = fmul fast float %3711, 1.280000e+02
  %3714 = fadd fast float %3712, 0xC05015CCC0000000
  %3715 = fadd fast float %3713, 0xC0521DCCC0000000
  %3716 = fmul fast float %3714, %3714
  %3717 = fmul fast float %3715, %3715
  %3718 = fmul fast float %3715, %3714
  %3719 = call float @dx.op.dot3.f32(i32 55, float %3716, float %3717, float %3718, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3720 = call float @dx.op.unary.f32(i32 22, float %3719)  ; Frc(value)
  %3721 = fadd fast float %3720, %1883
  %3722 = call float @dx.op.unary.f32(i32 22, float %3721)  ; Frc(value)
  %3723 = fcmp fast ogt float %3703, %3722
  br i1 %3723, label %3724, label %3729, !dx.controlflow.hints !104

; <label>:3724                                    ; preds = %3698
  %3725 = extractvalue %dx.types.CBufRet.i32 %3687, 3
  %3726 = mul i32 %3725, %3701
  %3727 = add i32 %3726, %3700
  %3728 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %3728, i32 %3727, i32 0, i32 %3239, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %3729

; <label>:3729                                    ; preds = %3724, %3698, %3648
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %3682)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3683)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %3684)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %3674)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %3675)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %3676)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %3425)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %3414)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %3415)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %3416)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3FE0303040000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %3411)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %3412)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %3413)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %3670)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %3507)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!74}
!dx.entryPoints = !{!75}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, !44, !47, !52}
!5 = !{!6, !8, !10, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 16}
!12 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !11}
!13 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !9}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 8, i32 1, i32 11, i32 0, null}
!18 = !{i32 9, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!24 = !{i32 15, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!25 = !{i32 16, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!35 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!36 = !{i32 27, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 27, i32 1, i32 2, i32 0, !9}
!37 = !{i32 28, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 28, i32 1, i32 2, i32 0, !9}
!38 = !{i32 29, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 29, i32 1, i32 2, i32 0, !9}
!39 = !{i32 30, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 30, i32 1, i32 2, i32 0, !9}
!40 = !{i32 31, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 31, i32 1, i32 2, i32 0, !9}
!41 = !{i32 32, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 32, i32 1, i32 2, i32 0, !9}
!42 = !{i32 33, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 33, i32 1, i32 2, i32 0, !9}
!43 = !{i32 34, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 34, i32 1, i32 2, i32 0, !9}
!44 = !{!45}
!45 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !46}
!46 = !{i32 1, i32 4}
!47 = !{!48, !49, !50, !51}
!48 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!49 = !{i32 1, %UniformBufferConstants_Scene* undef, !"", i32 0, i32 1, i32 1, i32 56, null}
!50 = !{i32 2, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 2, i32 1, i32 188, null}
!51 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 908, null}
!52 = !{!53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73}
!53 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!54 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!55 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!56 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!57 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!58 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!59 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!60 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!61 = !{i32 8, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!62 = !{i32 9, %struct.SamplerState* undef, !"", i32 0, i32 9, i32 1, i32 0, null}
!63 = !{i32 10, %struct.SamplerState* undef, !"", i32 0, i32 10, i32 1, i32 0, null}
!64 = !{i32 11, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!65 = !{i32 12, %struct.SamplerState* undef, !"", i32 0, i32 12, i32 1, i32 0, null}
!66 = !{i32 13, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!67 = !{i32 14, %struct.SamplerState* undef, !"", i32 0, i32 14, i32 1, i32 0, null}
!68 = !{i32 15, %struct.SamplerState* undef, !"", i32 0, i32 15, i32 1, i32 0, null}
!69 = !{i32 16, %struct.SamplerState* undef, !"", i32 0, i32 16, i32 1, i32 0, null}
!70 = !{i32 17, %struct.SamplerState* undef, !"", i32 0, i32 17, i32 1, i32 0, null}
!71 = !{i32 18, %struct.SamplerState* undef, !"", i32 0, i32 18, i32 1, i32 0, null}
!72 = !{i32 19, %struct.SamplerState* undef, !"", i32 0, i32 19, i32 1, i32 0, null}
!73 = !{i32 20, %struct.SamplerState* undef, !"", i32 0, i32 20, i32 1, i32 0, null}
!74 = !{[10 x i32] [i32 8, i32 24, i32 0, i32 0, i32 0, i32 0, i32 1112055, i32 1112055, i32 0, i32 1078391]}
!75 = !{void ()* @MainPS, !"MainPS", !76, !4, !95}
!76 = !{!77, !84, null}
!77 = !{!78, !80, !81, !83}
!78 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !79, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!79 = !{i32 0}
!80 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !79, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!81 = !{i32 2, !"SV_Position", i8 9, i8 3, !79, i8 4, i32 1, i8 4, i32 1, i8 0, !82}
!82 = !{i32 3, i32 11}
!83 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !79, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!84 = !{!85, !87, !89, !91, !93}
!85 = !{i32 0, !"SV_Target", i8 9, i8 16, !79, i8 0, i32 1, i8 4, i32 0, i8 0, !86}
!86 = !{i32 3, i32 15}
!87 = !{i32 1, !"SV_Target", i8 9, i8 16, !88, i8 0, i32 1, i8 4, i32 1, i8 0, !86}
!88 = !{i32 1}
!89 = !{i32 2, !"SV_Target", i8 9, i8 16, !90, i8 0, i32 1, i8 4, i32 2, i8 0, !86}
!90 = !{i32 2}
!91 = !{i32 3, !"SV_Target", i8 9, i8 16, !92, i8 0, i32 1, i8 4, i32 3, i8 0, !86}
!92 = !{i32 3}
!93 = !{i32 4, !"SV_Target", i8 9, i8 16, !94, i8 0, i32 1, i8 4, i32 5, i8 0, !86}
!94 = !{i32 5}
!95 = !{i32 0, i64 24, i32 5, !79}
!96 = distinct !{!96, !"dx.controlflow.hints", i32 1}
!97 = distinct !{!97, !"dx.controlflow.hints", i32 1}
!98 = distinct !{!98, !"dx.controlflow.hints", i32 1}
!99 = distinct !{!99, !"dx.controlflow.hints", i32 1}
!100 = distinct !{!100, !"dx.controlflow.hints", i32 2}
!101 = distinct !{!101, !"dx.controlflow.hints", i32 1}
!102 = distinct !{!102, !"dx.controlflow.hints", i32 1}
!103 = distinct !{!103, !"dx.controlflow.hints", i32 1}
!104 = distinct !{!104, !"dx.controlflow.hints", i32 1}
